/// Expect:
/// - output: "40320\n"

class Memo<T, V> {
    public value: [T:V]
}

function make_memo<R, S>() throws -> Memo<R, S> {
    let value: [R:S] = [:]
    return Memo(value)
}

function memo_fix_helper<T, U>(anon fn: &function(anon loop_: &function(anon x: T) throws -> U, anon x: T) throws -> U, anon x: T, mut memo: Memo<T, U>) throws -> U {
    if memo.value.contains(x) {
        return memo.value[x]
    }

    return memo_fix(fn, x, memo: Some(memo))
}

function memo_fix<T, U>(anon fn: &function(anon loop_: &function(anon x: T) throws -> U, anon x: T) throws -> U, anon x: T, mut memo: Memo<T, U>? = None) throws -> U {
    if not memo.has_value() {
        memo = make_memo<T, U>()
    }

    let loop_ = function[&memo, &fn](anon x: T) throws -> U {
        if memo!.value.contains(x) {
            return memo!.value[x]
        }

        return memo_fix_helper(fn, x, memo: memo!)
    }

    let res = fn(&loop_, x)
    memo!.value.set(x, res)
    return res
}

function main() {
    let foo = memo_fix(
        &function(anon loop_: &function(anon x: i32) throws -> i64, anon x: i32) throws -> i64 {
            if x == 0 {
                return 1
            }
            return (x as! i64) * loop_(x - 1)
        }
        8i32
    )

    println("{}", foo)
}

