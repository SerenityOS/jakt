/// Expect:
/// - output: "arithmetic 586, boolean true, unary -70, match 1, access 139, index 0, brackets 0\n"

fn deref_arithmetic_binary(anon foo: &i32) -> i32 {
    return (
        (foo + 1) +
        (foo * 1) +
        (foo / 1) +
        (foo % 1) +
        (foo - 1) +
        (foo << 1) +
        (foo >> 1) +
        (foo | 1) +
        (foo & 1) +
        (foo ^ 1)
    )
}

fn deref_boolean_binary(anon foo: &i32) -> bool {
    return (
        (foo == 1) or
        (foo != 1) or
        (foo < 1) or
        (foo <= 1) or
        (foo > 1) or
        (foo >= 1)
    )
}

fn deref_unary(anon foo: &mut i32) -> i32 {
    ++foo
    --foo
    foo++
    foo--
    return (
        (~foo) +
        (-foo) +
        (foo as! i64 as! i32)
    )
}

fn deref_match(anon foo: &i32) -> i32 {
    return match foo {
        32i32 => 0
        else => 1
    }
}

struct Foo {
    fn const_method(this) => 69
    fn mutable_method(mut this) => 69 + 1
}

fn deref_access(anon foo: &mut Foo) -> i32 {
    return foo.const_method() + foo.mutable_method()
}

fn deref_index(anon foo: &(i32, i32)) -> i32 {
    return foo.0
}

fn deref_brackets(anon foo: &mut [i32]) -> i32 {
    return foo[0]
}

fn main() {
    mut foo = 69i32
    let arithmetic = deref_arithmetic_binary(&foo)
    let boolean = deref_boolean_binary(&foo)
    let unary = deref_unary(&mut foo)
    let match_ = deref_match(&foo)

    mut structured_foo = Foo()
    let access = deref_access(&mut structured_foo)

    let tuple = (0i32, 1i32)
    let index = deref_index(&tuple)

    mut array = [0i32, 1i32]
    let brackets = deref_brackets(&mut array)

    println("arithmetic {}, boolean {}, unary {}, match {}, access {}, index {}, brackets {}",
        arithmetic, boolean, unary, match_, access, index, brackets)
}
