class Toolchain {
}

struct Target {

}

enum Segment implements(ThrowingFromStringLiteral) {
    Literal(String)
    Interpolated(String)
    Variable(String)

    fn from_string_literal(anon s: StringView) throws -> Segment {
        return Segment::Literal(s.to_string())
    }
}

struct Tool {
    name: String
    command: [Segment]
    description: Segment
    outputs: [Segment]
}

fn tool(anon name: String, anon describe: &fn(anon tool: &mut Tool) throws -> void) -> Tool {
    try {
        mut tool = Tool(
            name
            command: []
            description: Segment::Literal(name)
            outputs: []
        )
        describe(&mut tool)

        return tool
    } catch error {
        eprintln("Toolchain tool definition failed: {}", error)
        abort()
    }
}
