import jakt::prelude::iteration

trait ReflectedType {
    fn size(this) -> usize
    fn alignment(this) -> usize
}

type Reflect::Type implements(ReflectedType) {
    fn size(this) -> usize => match this {
        Unknown | Never | Void => 0
        Bool => 1
        I8 | U8 => 1
        I16 | U16 => 2
        I32 | U32 | F32 => 4
        I64 | U64 | F64 => 8
        CChar => 1
        CInt => 4
        Usize => 8 // FIXME: Platform-dependent
        JaktString | RawPtr | Reference | MutableReference => 8
        TypeVariable => 0
        StructureOrEnum(record) => record.size()
    }

    fn alignment(this) -> usize => match this {
        Unknown | Never | Void => 0
        Bool => 1
        I8 | U8 => 1
        I16 | U16 => 2
        I32 | U32 | F32 => 4
        I64 | U64 | F64 => 8
        CChar => 1
        CInt => 4
        Usize => 8 // FIXME: Platform-dependent
        JaktString | RawPtr | Reference | MutableReference => 8
        TypeVariable => 0
        StructureOrEnum(record) => record.alignment()
    }
}

type Reflect::Record implements(ReflectedType) {
    fn size(this) -> usize => match .record_type {
        Struct(fields) | Class(fields) => {
            mut size = 0uz
            for field in fields {
                let field_size = field.variable.type.size()
                let field_alignment = field.variable.type.alignment()
                let alignment_slack = size % field_alignment

                size += field_size + (field_alignment - alignment_slack)
            }
            yield size
        }
        else => {
            abort()
        }
    }

    fn alignment(this) -> usize => match .record_type {
        Struct(fields) | Class(fields) => {
            mut alignment = 0uz
            for field in fields {
                let field_alignment = field.variable.type.alignment()
                if alignment < field_alignment {
                    alignment = field_alignment
                }
            }
            yield alignment
        }
        else => {
            abort()
        }
    }
}

