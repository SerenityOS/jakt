import jakt::path { Path }
import jakt::platform { platform_module, platform_errno }
import platform_errno() { errno_value }
import utility { allocate, null }

import extern c "sys/stat.h" {
    extern fn mkdir(anon pathname: raw c_char, anon mode: u32) -> c_int
}

import extern c "unistd.h" {
    extern fn getcwd(anon mut buf: raw c_char, anon size: usize) -> raw c_char
}

import extern c "stdlib.h" {
    extern fn realpath(anon path: raw c_char, anon mut resolved_path: raw c_char) -> raw c_char
}

import extern "dirent.h" {
    extern struct DIR {}
    extern struct dirent {
        d_name: raw c_char
        d_type: u32
    }

    extern fn opendir(anon pathname: raw c_char) -> raw DIR
    extern fn readdir(anon dir_fd: raw DIR) -> raw dirent
    extern fn closedir(anon dir_fd: raw DIR) -> c_int
}

fn make_directory(path: String) throws {
    let rc = mkdir(path.c_string(), mode: 0o777)
    if rc == 0 {
        return
    }

    throw Error::from_errno(errno_value())
}

fn current_directory() throws -> String {
    let buffer_size : usize = 4096; // Roughly PATH_MAX
    mut buffer = allocate<c_char>(count: buffer_size  + 1)
    defer {
        unsafe { cpp { "free(buffer);" } }
    }

    let buf = getcwd(buffer, buffer_size)
    if buf == null<c_char>() {
        throw Error::from_errno(errno_value())
    }

    mut b = StringBuilder::create()
    b.append_c_string(buf)
    return b.to_string()
}

fn real_path(anon path: String) throws -> String {
    let buffer_size : usize = 4096; // Roughly PATH_MAX
    mut buffer = allocate<c_char>(count: buffer_size  + 1)
    defer {
        unsafe { cpp { "free(buffer);" } }
    }

    let buf = realpath(path: path.c_string(), resolved_path: buffer)
    if buf == null<c_char>() {
        throw Error::from_errno(errno_value())
    }

    mut b = StringBuilder::create()
    b.append_c_string(buf)
    return b.to_string()
}

class DirectoryIterator implements(ThrowingIterable<(Path, bool)>) {
    path: Path
    dir_fd: raw DIR

    public fn next(mut this) throws -> (Path, bool)? {
        let file = readdir(.dir_fd)

        if file == null<dirent>() {
            closedir(.dir_fd)

            return None
        }

        mut builder = StringBuilder::create()
        mut is_directory = false

        unsafe {
            builder.append_c_string((*file).d_name)

            // FIXME: Extern constant support
            cpp {
                "if ((*file).d_type == DT_DIR)"
                "is_directory = true;"
            }
        }

        let filename = builder.to_string()
        if filename == "." or filename == ".." {
            return .next()
        }

        return (Path::from_string(filename), is_directory)
    }

    public fn get_path(this) -> Path {
        return .path
    }

    public fn from_path(path: Path) throws -> DirectoryIterator? {
        let dir_fd = opendir(path.to_string().c_string())
        if dir_fd == null<DIR>() {
            return None
        }

        return DirectoryIterator(path, dir_fd)
    }
}
