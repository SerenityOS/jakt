comptime null_maker<T>(dep: bool = true) -> fn() -> T => match reflect T {
    RawPtr => fn[comptime dep]() -> T {
        unsafe { cpp { "return nullptr;" } }
        abort()
    }
    I8 | U8 | I16 | U16 | I32 | U32 | I64 | U64 => fn[comptime dep]() -> T {
        return 0
    }
    F32 | F64 => fn[comptime dep]() -> T {
        return 0.0
    }
    Bool => fn[comptime dep]() -> T {
        return false
    }
    else => fn[comptime dep]() -> T {
        abort()
    }
}

fn null<T>() -> T {
    let make_null = null_maker<T>()
    return make_null()
}

fn allocate<T>(count: usize) -> raw T {
    let alloc_impl = fn[count](anon ptr: &mut raw T) -> void {
        unsafe {
            cpp {
                "ptr = static_cast<RemoveReference<decltype(ptr)>>(calloc(count, sizeof(*ptr)));"
            }
        }
    }

    mut ptr = null<T>()
    alloc_impl(&mut ptr)
    return ptr
}

fn join(anon strings: [String], separator: String) throws -> String {
    mut output = ""

    mut i = 0uz
    for s in strings {
        output += s
        if i < strings.size() - 1 {
            output += separator
        }
        i++
    }

    return output
}
