extern struct Optional<T> {
    fn has_value(this) -> bool
    fn value(this) -> T
    fn value_or(this, anon x: T) -> T
    fn Optional<S>(anon x: S) -> Optional<S>
}

extern struct ArrayIterator<T> {
    fn next(mut this) -> T?
}

[[name=DynamicArray]]
extern struct Array<T> {
    fn is_empty(this) -> bool
    fn contains(this, anon value: T) -> bool
    fn size(this) -> usize
    fn capacity(this) -> usize
    fn ensure_capacity(this, anon capacity: usize) throws
    fn add_capacity(this, anon capacity: usize) throws
    fn resize(mut this, anon size: usize) throws
    fn shrink(mut this, anon size: usize) -> void
    fn push(mut this, anon value: T) throws
    fn push_values(mut this, anon other: &Array<T>) throws
    fn pop(mut this) -> T?
    fn iterator(this) -> ArrayIterator<T>
    fn first(this) -> T?
    fn last(this) -> T?
    fn insert(mut this, before_index: usize, value: T) throws
}

extern struct ArraySlice<T> {
    fn is_empty(this) -> bool
    fn contains(this, anon value: T) -> bool
    fn size(this) -> usize
    fn iterator(this) -> ArrayIterator<T>
    fn to_array(this) throws -> Array<T>
    fn first(this) -> T?
    fn last(this) -> T?
}

[[name=DeprecatedStringCodePointIterator]]
extern struct CodePointIterator {
    fn next(mut this) -> u32?
    fn peek(this) -> u32?
    fn byte_offset(this) -> usize
}

[[name=DeprecatedString]]
extern struct String {
    fn code_points(this) -> CodePointIterator
    fn from_utf8(anon bytes: [u8]) throws -> String
    fn number(anon number: i64) -> String
    fn split(this, anon c: c_char) -> [String]
    [[name=characters]]
    fn c_string(this) -> raw c_char
    fn to_int(this) -> i32?
    fn to_uint(this) -> u32?
    fn is_whitespace(this) -> bool
    fn hash(this) -> u32
    fn substring(this, start: usize, length: usize) -> String
    fn repeated(character: c_char, count: usize) -> String
    fn is_empty(this) -> bool
    fn length(this) -> usize
    fn byte_at(this, anon index: usize) -> u8
    fn contains(this, anon needle: String) -> bool
    fn replace(this, replace: String, with: String) -> String
    fn starts_with(this, anon needle: String) -> bool
    fn ends_with(this, anon needle: String) -> bool
}

[[name=DeprecatedStringBuilder]]
extern struct StringBuilder {
    fn append(mut this, anon b: u8) throws
    fn append(mut this, anon s: String) throws
    fn append(mut this, anon s: raw c_char) throws
    [[name=append_code_point]]
    fn append(mut this, anon code_point: u32) throws
    fn append_escaped_for_json(mut this, anon s: String) throws
    fn to_string(this) throws -> String
    fn is_empty(this) -> bool
    fn length(this) -> usize
    fn clear(mut this)
    fn create() throws -> StringBuilder

    // Deprecated API
    fn append_string(mut this, anon s: String) throws
    fn append_c_string(mut this, anon s: raw c_char) throws
    fn append_code_point(mut this, anon code_point: u32) throws
}

extern struct WeakPtr<T> {
    fn has_value(this) -> bool
    fn clear(mut this)
}

extern struct Tuple {}

extern struct DictionaryIterator<K, V> {
    fn next(mut this) -> (K, V)?
}

extern struct Dictionary<K, V> {
    fn is_empty(this) -> bool
    fn get(this, anon key: K) -> V?
    fn contains(this, anon key: K) -> bool
    fn set(mut this, anon key: K, anon value: V) throws
    fn remove(mut this, anon key: K) -> bool
    fn ensure_capacity(mut this, anon capacity: usize) throws
    fn clear(mut this)
    fn size(this) -> usize
    fn capacity(this) -> usize
    fn keys(this) throws -> [K]
    fn hash(this) -> u32
    fn Dictionary<A, B>() -> Dictionary<A, B>
    fn iterator(this) -> DictionaryIterator<K, V>
}

extern struct SetIterator<T> {
    fn next(mut this) -> T?
}

extern struct Set<V> {
    fn is_empty(this) -> bool
    fn contains(this, anon value: V) -> bool
    fn add(mut this, anon value: V) throws
    fn remove(mut this, anon value: V) -> bool
    fn ensure_capacity(mut this, anon capacity: usize) throws
    fn clear(mut this)
    fn size(this) -> usize
    fn capacity(this) -> usize
    fn hash(this) -> u32
    fn Set<A>() -> Set<A>
    fn iterator(this) -> SetIterator<V>
}

extern struct Range<T> {
    fn Range<U>(anon start: U, anon end: U) -> Range<U>
    fn next(mut this) -> T?
    fn inclusive(this) -> Range<T>
    fn exclusive(this) -> Range<T>
}

extern struct StringView {
    fn to_string(this) throws -> String
    fn length(this) -> usize
    [[name="operator[]"]]
    fn byte_at(this, anon index: usize) -> u8
}

extern struct Error {
    fn code(this) -> i32
    [[name=string_literal]]
    fn string(this) -> StringView

    fn from_errno(anon errno: i32) -> Error

    [[name="__jakt_from_string_literal"]]
    fn from_string_literal(anon string: StringView) -> Error
}

extern class File {
    public fn open_for_reading(anon path: String) throws -> File
    public fn open_for_writing(anon path: String) throws -> File

    public fn read(mut this, anon buffer: [u8]) throws -> usize
    public fn write(mut this, anon data: [u8]) throws -> usize

    public fn read_all(mut this) throws -> [u8]

    public fn exists(anon path: String) -> bool
    public fn current_executable_path() throws -> String
}

extern fn ___jakt_get_target_triple_string() throws -> String

extern fn abort() -> never
extern fn as_saturated<U, T>(anon input: T) -> U
extern fn as_truncated<U, T>(anon input: T) -> U
extern fn unchecked_add<T>(anon a: T, anon b: T) -> T
extern fn unchecked_mul<T>(anon a: T, anon b: T) -> T
