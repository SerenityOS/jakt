extern struct Optional<T> {
    function has_value(this) -> bool
    function value(this) -> T
    function value_or(this, anon x: T) -> T
    function Optional<S>(anon x: S) -> Optional<S>
}

extern struct ArrayIterator<T> {
    function next(mut this) -> T?
}

extern struct Array<T> {
    function is_empty(this) -> bool
    function contains(this, anon value: T) -> bool
    function size(this) -> usize
    function capacity(this) -> usize
    function ensure_capacity(this, anon capacity: usize) throws
    function add_capacity(this, anon capacity: usize) throws
    function resize(mut this, anon size: usize) throws
    function push(mut this, anon value: T) throws
    function pop(mut this) -> T?
    function iterator(this) -> ArrayIterator<T>
    function first(this) -> T?
    function last(this) -> T?
}

extern struct ArraySlice<T> {
    function is_empty(this) -> bool
    function contains(this, anon value: T) -> bool
    function size(this) -> usize
    function iterator(this) -> ArrayIterator<T>
    function to_array(this) throws -> Array<T>
    function first(this) -> T?
    function last(this) -> T?
}

extern struct String {
    function number(anon number: i64) throws -> String
    function split(this, anon c: c_char) throws -> [String]
    function c_string(this) -> raw c_char
    function to_int(this) -> i32?
    function to_uint(this) -> u32?
    function is_whitespace(this) -> bool
    function hash(this) -> u32
    function substring(this, start: usize, length: usize) throws -> String
    function repeated(character: c_char, count: usize) throws -> String
    function is_empty(this) -> bool
    function length(this) -> usize
    function byte_at(this, anon index: usize) -> u8
    function contains(this, anon needle: String) -> bool
    function replace(this, replace: String, with: String) throws -> String
}

extern struct StringBuilder {
    function append(mut this, anon b: u8) throws
    function append_string(mut this, anon s: String) throws
    function append_c_string(mut this, anon s: raw c_char) throws
    function append_code_point(mut this, anon code_point: u32) throws
    function append_escaped_for_json(mut this, anon s: String) throws
    function to_string(this) throws -> String
    function is_empty(this) -> bool
    function length(this) -> usize
    function clear(mut this)
    function create() throws -> StringBuilder
}

extern struct WeakPtr<T> {
    function has_value(this) -> bool
    function clear(mut this)
}

extern struct Tuple {}

extern struct DictionaryIterator<K, V> {
    function next(mut this) -> (K, V)?
}

extern struct Dictionary<K, V> {
    function is_empty(this) -> bool
    function get(this, anon key: K) -> V?
    function contains(this, anon key: K) -> bool
    function set(mut this, anon key: K, anon value: V) throws
    function remove(mut this, anon key: K) -> bool
    function ensure_capacity(mut this, anon capacity: usize) throws
    function clear(mut this)
    function size(this) -> usize
    function capacity(this) -> usize
    function keys(this) throws -> [K]
    function hash(this) -> u32
    function Dictionary<A, B>() -> Dictionary<A, B>
    function iterator(this) -> DictionaryIterator<K, V>
}

extern struct SetIterator<T> {
    function next(mut this) -> T?
}

extern struct Set<V> {
    function is_empty(this) -> bool
    function contains(this, anon value: V) -> bool
    function add(mut this, anon value: V) throws
    function remove(mut this, anon value: V) -> bool
    function ensure_capacity(mut this, anon capacity: usize) throws
    function clear(mut this)
    function size(this) -> usize
    function capacity(this) -> usize
    function hash(this) -> u32
    function Set<A>() -> Set<A>
    function iterator(this) -> SetIterator<V>
}

extern struct Range<T> {
    function Range<U>(anon start: U, anon end: U) -> Range<U>
    function next(mut this) -> T?
    function inclusive(this) -> Range<T>
    function exclusive(this) -> Range<T>
}

extern struct Error {
    function code(this) -> i32
    function from_errno(anon errno: i32) -> Error
}

extern class File {
    public function open_for_reading(anon path: String) throws -> File
    public function open_for_writing(anon path: String) throws -> File

    public function read(mut this, anon buffer: [u8]) throws -> usize
    public function write(mut this, anon data: [u8]) throws -> usize

    public function read_all(mut this) throws -> [u8]

    public function exists(anon path: String) -> bool
}

extern function abort() -> never
extern function as_saturated<U, T>(anon input: T) -> U
extern function as_truncated<U, T>(anon input: T) -> U
extern function unchecked_add<T>(anon a: T, anon b: T) -> T
extern function unchecked_mul<T>(anon a: T, anon b: T) -> T

// FIXME: Remove from prelude once extern C functions are working again
extern struct FILE {}

extern function fopen(anon str: raw c_char, anon mode: raw c_char) -> raw FILE
extern function fgetc(anon mut file: raw FILE) -> c_int
extern function fclose(anon mut file: raw FILE) -> c_int
extern function feof(anon mut file: raw FILE) -> c_int
extern function putchar(anon ch: c_int) -> c_int
extern function system(anon command: raw c_char) -> c_int

// implemented in JaktValue.h
boxed enum JaktValue {
    Void
    Bool(value:bool)
    U8(value: u8)
    U16(value: u16)
    U32(value: u32)
    U64(value: u64)
    I8(value: i8)
    I16(value: i16)
    I32(value: i32)
    I64(value: i64)
    F32(value: f32)
    F64(value: f64)
    USize(value: usize)
    JaktString(value: String)
    CChar(value: c_char)
    CInt(value: c_int)
    JaktArray(value: Array<JaktValue>)
    JaktDictionary(value: Dictionary<JaktValue, JaktValue>)
    JaktSet(value: Set<JaktValue>)
    JaktOptional(value: JaktValue)
    JaktRawPtr(value: usize, type: JaktValue)
    JaktNone

    function to_representation(this) throws -> String => match this {
        Void => "Void"
        Bool(value) => format("{}", value)
        U8(value) => format("{}u8", value)
        U16(value) => format("{}u16", value)
        U32(value) => format("{}u32", value)
        U64(value) => format("{}u64", value)
        I8(value) => format("{}i8", value)
        I16(value) => format("{}i16", value)
        I32(value) => format("{}i32", value)
        I64(value) => format("{}i64", value)
        F32(value) => format("{}f32", value)
        F64(value) => format("{}f64", value)
        USize(value) => format("{}uz", value)
        JaktString(value) => format("\"{}\"", value)
        JaktRawPtr(value) => format("{{Raw Pointer @{:p}}}", value)
        else => this.to_string()
    }

    function to_string(this) throws -> String => match this {
        Void => ""
        Bool(value) => format("{}", value)
        U8(value) => format("{}", value)
        U16(value) => format("{}", value)
        U32(value) => format("{}", value)
        U64(value) => format("{}", value)
        I8(value) => format("{}", value)
        I16(value) => format("{}", value)
        I32(value) => format("{}", value)
        I64(value) => format("{}", value)
        F32(value) => format("{}", value)
        F64(value) => format("{}", value)
        USize(value) => format("{}", value)
        CChar(value) => format("{}", value)
        CInt(value) => format("{}", value)
        JaktString(value) => format("{}", value)
        JaktArray(value) => {
            mut array_representation = "["
            mut first = true
            for entry in value.iterator() {
                if not first {
                    array_representation += ", "
                } else {
                    first = false
                }
                array_representation += format("{}", entry.to_representation())
            }
            array_representation += "]"
            return array_representation
		}
        JaktDictionary(value) => {
            mut dict_representation = "["
            mut first = true
            for (key, entry) in value.iterator() {
                if not first {
                    dict_representation += ", "
                } else {
                    first = false
                }
                dict_representation += format("{}: {}", key.to_representation(), entry.to_representation())
            }
            dict_representation += "]"
            return dict_representation
        }
        JaktSet(value) => {
            mut set_representation = "{{"
            mut first = true
            for entry in value.iterator() {
                if not first {
                    set_representation += ", "
                } else {
                    first = false
                }
                set_representation += format("{}", entry.to_representation())
            }
            set_representation += "}}"
            return set_representation
        }
        JaktOptional(value) => format("{}", value)
        JaktRawPtr(value) => format("{:p}", value)
        JaktNone => ""
    }
}

comptime interpolate_string(anon quotes: [String]) throws -> function(expressions) -> String {
	return function[quotes](anon expressions: [JaktValue]) throws -> String {
		mut formatted_string_builder = StringBuilder::create()


		for part_index in 0..expressions.size() {
			formatted_string_builder.append_string(quotes[part_index])
			formatted_string_builder.append_string(value: expressions[part_index].to_string())
		}
		formatted_string_builder.append_string(quotes[expressions.size()])

		return formatted_string_builder.to_string()
	}
}
