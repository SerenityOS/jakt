// Copyright (c) 2022, JT <jt@serenityos.org>
// Copyright (c) 2022, Andreas Kling <kling@serenityos.org>
//
// SPDX-License-Identifier: BSD-2-Clause

struct ArgsParser {
    args: [String]
    removed_indices: [usize]
    definitely_positional_args: [String]

    fn flag(mut this, anon names: [String]) throws -> bool {
        for i in 0...args.size() {
            for name in names {
                if .args[i] == name {
                    .removed_indices.push(i)
                    return true
                }
            }
        }

        return false
    }

    fn option(mut this, anon names: [String]) throws -> String? {
        for i in 1...args.size() {
            for name in names {
                if .args[i] == name {
                    if .args.size() <= i + 1 {
                        eprintln("The option '{}' requires a value, but none was supplied", name)
                        throw Error::from_errno(200)
                    }

                    .removed_indices.push(i)
                    .removed_indices.push(i + 1)

                    return .args[i + 1]
                }
                if .args[i].starts_with(name) {
                    .removed_indices.push(i)
                    return .args[i].substring(start: name.length(), length: .args[i].length() - name.length())
                }
            }
        }

        return None
    }

    fn option_multiple(mut this, anon names: [String]) throws -> [String] {
        mut result: [String] = []
        for i in 1...args.size() {
            for name in names {
                if .args[i] == name {
                    if .args.size() <= i + 1 {
                        eprintln("The option '{}' requires a value, but none was supplied", name)
                        throw Error::from_errno(200)
                    }

                    .removed_indices.push(i)
                    .removed_indices.push(i + 1)
                    result.push(.args[i + 1])
                    continue
                }
                if .args[i].starts_with(name) {
                    .removed_indices.push(i)
                    result.push(.args[i].substring(start: name.length(), length: .args[i].length() - name.length()))
                }
            }
        }
        return result
    }

    fn from_args(anon args: [String]) throws -> ArgsParser {
        mut parser = ArgsParser(args, removed_indices: [], definitely_positional_args: [])
        mut i = 0uz
        for arg in parser.args {
            if arg == "--" {
                parser.definitely_positional_args = parser.args[(i + 1)..parser.args.size()].to_array()
                parser.args = parser.args[0..i].to_array()
                break
            }
            i += 1
        }

        return parser
    }

    fn remaining_arguments(this) throws -> [String] {
        mut remaining: [String] = []

        for i in 0...args.size() {
            if not .removed_indices.contains(i) {
                remaining.push(.args[i])
            }
        }

        for arg in .definitely_positional_args {
            remaining.push(arg)
        }

        return remaining
    }
}
