fn null<T>() -> raw T {
    unsafe {
        cpp {
            "return nullptr;"
        }
    }

    abort()
}

fn allocate<T>(count: usize) -> raw T {
    let alloc_impl = fn[count](anon ptr: &mut raw T) -> void {
        unsafe {
            cpp {
                "ptr = static_cast<RemoveReference<decltype(ptr)>>(calloc(count, sizeof(*ptr)));"
            }
        }
    }

    mut ptr = null<T>()
    alloc_impl(&mut ptr)
    return ptr
}

fn join(anon strings: [String], separator: String) -> String {
    mut output = ""

    mut i = 0uz
    for s in strings {
        output += s
        if i < strings.size() - 1 {
            output += separator
        }
        i++
    }

    return output
}
