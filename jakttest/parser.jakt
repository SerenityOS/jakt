//
// Copyright (c) 2022, Jes√∫s Lapastora <cyber.gsuscode@gmail.com>
//
// SPDX-License-Identifier: BSD-2-Clause
import error { JaktError }
import utility { Span, panic, todo }

enum ParsedTest {
    cppexports: String = ""

    SuccessTest(related_cpp_files: [String], output: String, cppincludes: String)
    CompileErrorTest(related_cpp_files: [String], output: String, cppincludes: String)
    RuntimeErrorTest(related_cpp_files: [String], output: String, cppincludes: String)
    OnHoverTest(output: String, line: i32, column: i32)
    SkipTest
    NoExpectOrSkip
}

fn is_whitespace(anon cp: u32) -> bool => cp == ' ' or cp == '\t' or cp == '\r'

struct Parser {
    source: String
    iterator: CodePointIterator
    test_base_dir: String

    fn is_eof(this) -> bool => .iterator.peek().has_value() == false

    fn current(this) -> u32 => .iterator.peek().value()

    fn lex_literal(mut this, anon literal: String) -> bool {
        mut it = .iterator
        for lcp in literal.code_points() {
            let cp = it.next()
            guard cp.has_value() and cp! == lcp else {
                return false
            }
        }
        .iterator = it
        return true
    }

    fn skip_whitespace(mut this) {
        while not .is_eof() and is_whitespace(.current()) {
            .iterator.next()
        }
    }

    fn parse_int_or_zero(mut this) -> i32 {
        mut result = 0i32

        while .iterator.peek() is Some(cp) {
            if cp >= '0' and cp <= '9' {
                result *= 10
                result += (cp - '0') as! i32
                .iterator.next()
            } else {
                break
            }

        }

        return result

    }

    fn lex_raw_quoted_string(mut this) -> String? {
        if .is_eof() or .current() != '"' as! u32 {
            return None
        }
        .iterator.next()
        let start = .iterator.byte_offset()
        mut end = start
        while not .is_eof() {
            let cp = .iterator.next()!
            guard cp != '"' else {
                return .source.substring(start, length: end - start)
            }
            end = .iterator.byte_offset()
            if cp == '\\' as! u32 {
                // skip over.
                guard .iterator.next().has_value() else {
                    return None
                }
            }
        }
        return None
    }

    fn lex_quoted_string(mut this) throws -> String? {
        if .is_eof() or .current() != '"' as! u32 {
            return None
        }
        .iterator.next()
        mut builder = StringBuilder::create()
        while not .is_eof() {
            let cp = .iterator.next()!
            guard cp != '"' else {

                return builder.to_string()
            }
            builder.append(cp)
            if cp == '\\' as! u32 {
                let cp = .iterator.next()
                guard cp.has_value() else {
                    return None
                }
                builder.append(cp!)
            }
        }
        return None
    }

    fn parse_test(mut this) throws -> ParsedTest {
        if not .lex_literal("///") {
            .iterator.next()
            return ParsedTest::NoExpectOrSkip
        }
        .skip_whitespace()
        if not .lex_literal("Expect:") {
            return ParsedTest::NoExpectOrSkip
        }

        .skip_whitespace()

        if .lex_literal("Skip") {
            return ParsedTest::SkipTest
        }

        if .lex_literal("selfhost-only") {
            .skip_whitespace()
        }
        if .is_eof() or .current() != '\n' as! u32 {
            return ParsedTest::NoExpectOrSkip
        }
        .iterator.next()
        return .parse_test_information()
    }

    fn parse_onhover(mut this) -> ParsedTest {
        .skip_whitespace()

        // TODO: better errors!
        guard .lex_literal(":") else {
            return ParsedTest::NoExpectOrSkip
        }

        // line:column
        .skip_whitespace()

        guard not .is_eof() and .current() >= '1' and .current() <= '9' else {
            return ParsedTest::NoExpectOrSkip
        }

        let line = .parse_int_or_zero()


        guard .lex_literal(":") else {
            return ParsedTest::NoExpectOrSkip
        }

        let column = .parse_int_or_zero()

        .skip_whitespace()

        guard .lex_raw_quoted_string() is Some(output) else {
            return ParsedTest::NoExpectOrSkip
        }

        return ParsedTest::OnHoverTest(output, line, column)
    }


    fn parse_test_information(mut this) throws -> ParsedTest {
        mut success_test = false
        mut runtime_error = false
        mut compile_error = false
        mut has_cppincludes = false
        mut has_cppexports = false
        mut output = ""
        mut cppincludes = ""
        mut cppexports = ""
        mut related_cpp_files: [String] = []

        while not .is_eof() {
            if not .lex_literal("///") {
                break
            }
            .skip_whitespace()
            guard .current() == '-' and not .is_eof() else {
                break
            }
            .iterator.next()
            .skip_whitespace()


            if .lex_literal("onHover") {
                return .parse_onhover()
            }

            let is_related_cpp_file = .lex_literal("link")

            if not success_test {
                success_test = .lex_literal("output")
            }
            if not compile_error {
                compile_error = .lex_literal("error")
            }
            if not runtime_error {
                runtime_error = .lex_literal("stderr")
            }

            if (success_test as! u8 + compile_error as! u8 + runtime_error as! u8) > 1 {
                eprintln("Too many test directives")
                return ParsedTest::NoExpectOrSkip
            }
            let expect_output = success_test or compile_error or runtime_error

            if not has_cppincludes {
                has_cppincludes = .lex_literal("cppincludes")
            }

            if not has_cppexports {
                has_cppexports = .lex_literal("cppexports")
            }

            guard success_test or compile_error or runtime_error or has_cppincludes or has_cppexports else {
                return ParsedTest::NoExpectOrSkip
            }

            .skip_whitespace()
            if .is_eof() or .current() != ':' {
                continue
            }
            .iterator.next()
            .skip_whitespace()
            let quoted_string = .lex_quoted_string()
            guard quoted_string.has_value() else {
                return ParsedTest::NoExpectOrSkip
            }

            // create the string
            let string = quoted_string!

            let parsed_string = parse_quoted_string(string)
            .skip_whitespace()
            .iterator.next()

            if output.is_empty() and expect_output {
                output = parsed_string
                continue
            } else if is_related_cpp_file {
                related_cpp_files.push(parsed_string)
            } else if has_cppincludes {
                cppincludes = parsed_string
            } else {
                guard has_cppexports else {
                    panic("Unexpected token state in parse_test_information")
                }
                cppexports = parsed_string
            }
        }
        if success_test {
            return ParsedTest::SuccessTest(cppexports, related_cpp_files, output, cppincludes)
        }
        if compile_error {
            return ParsedTest::CompileErrorTest(cppexports, related_cpp_files, output, cppincludes)
        }
        if runtime_error {
            return ParsedTest::RuntimeErrorTest(cppexports, related_cpp_files, output, cppincludes)
        }
        return ParsedTest::NoExpectOrSkip
    }

    fn parse(input: String, test_base_dir: String) throws -> ParsedTest {
        mut parser = Parser(source: input, iterator: input.code_points(), test_base_dir)
        return parser.parse_test()
    }
}

fn parse_quoted_string(anon quote: String) throws -> String {
    mut builder = StringBuilder::create()
    mut i = 0uz
    while i < quote.length() {
        let ch = quote.byte_at(i)
        if ch == b'\\' and i + 1 < quote.length() {
            i += 1
            let ch = quote.byte_at(i)
            let escape = match ch {
                b'"' => "\""
                b'\\' => "\\"
                b'a' => "\0x07"
                b'b' => "\x08"
                b'f' => "\x0c"
                b'n' => "\n"
                b'r' => "\r"
                b't' => "\t"
                b'v' => "\x0b"
                else => {
                    panic(format("Unknown escape character: '{}'", ch))
                }
            }
            builder.append(escape)
        } else {
            builder.append(ch)
        }
        i += 1
    }
    return builder.to_string()
}
