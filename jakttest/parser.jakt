import error { JaktError }
import lexer { Token, NumericConstant }
import utility { panic, todo, Span }

enum ParsedTest {
    SuccessTest(String),
    FailureTest(String),
    SkipTest
}

struct Parser {
    index: usize
    tokens: [Token]
    errors: [JaktError]
    ignore_errors: bool

    function parse(tokens: [Token], errors: [JaktError]) throws -> ParsedTest {
        mut parser = Parser(index: 0, tokens, errors, ignore_errors: false)
        return parser.parse_test()
    }

    function parse_test(mut this) throws -> ParsedTest {
        loop {
            match .tokens[.index] {
                ForwardSlash(span) => {
                    // We have a test
                    .index += 2

                    match .tokens[.index] {
                        Identifier(name, span) => {
                            if name == "output" {
                                // skip colon and find the expected value
                                .index += 2
                                match .tokens[.index] {
                                    QuotedString(quote) => {
                                        return ParsedTest::SuccessTest(parse_quoted_string(quote))
                                    }
                                    else => {
                                        return ParsedTest::SkipTest
                                    }
                                }
                            } else if name == "error" {
                                // skip colon and find the expected value
                                .index += 2
                                match .tokens[.index] {
                                    QuotedString(quote) => {
                                        return ParsedTest::FailureTest(parse_quoted_string(quote))
                                    }
                                    else => {
                                        return ParsedTest::SkipTest
                                    }
                                }
                            }
                        }
                        else => {}
                    }
                }
                Eof => {
                    break
                }
                else => {
                    loop {
                        if .tokens[.index] is Eol {
                            .index++
                            break
                        } else if .tokens[.index] is Eof {
                            break
                        } else {
                            .index++
                        }
                    }
                }
            }
        }
        return ParsedTest::SkipTest
    }
}

function parse_quoted_string(anon quote: String) throws -> String {
    mut builder = StringBuilder::create()
    mut i = 0uz
    while i < quote.length() {
        let ch = quote.byte_at(i)
        if ch == b'\\' and i + 1 < quote.length() {
            i += 1
            let ch = quote.byte_at(i)
            let escape = match ch {
                b'"' => ""
                b'\\' => "\\"
                b'a' => "\0x07"
                b'b' => "\x08"
                b'f' => "\x0c"
                b'n' => "\n"
                b'r' => "\r"
                b't' => "\t"
                b'v' => "\x0b"
                else => {
                    panic(format("Unknown escape character: '{}'", ch))
                    yield ""
                }
            }
            builder.append_string(escape)
        } else {
            builder.append(ch)
        }
        i += 1
    }
    return builder.to_string()
}
