import utility { Span }

enum JaktError {
    Message(message: String, span: Span)
    MessageWithHint(message: String, span: Span, hint: String, hint_span: Span)
}

fn print_error(file_name: String, file_contents: [u8], error: JaktError) throws {
    match error {
        Message(message, span) => {
            display_message_with_span(MessageSeverity::Error, file_name, file_contents, message, span)
        }
        MessageWithHint(message, span, hint, hint_span) => {
            display_message_with_span(MessageSeverity::Error, file_name, file_contents, message, span)
            display_message_with_span(MessageSeverity::Hint, file_name, file_contents, message: hint, span: hint_span)
        }
    }
}

enum MessageSeverity {
    Hint
    Error
    public fn name(this) throws => match this {
        Hint => "Hint"
        Error => "Error"
    }
    public fn ansi_color_code(this) throws => match this {
        Hint => "94"  // Bright Blue
        Error => "31" // Red
    }
}

fn display_message_with_span(anon severity: MessageSeverity, file_name: String, file_contents: [u8], message: String, span: Span) throws {
    println("{}: {}", severity.name(), message)

    let line_spans = gather_line_spans(file_contents)

    mut line_index = 1uz
    let largest_line_number = line_spans.size()

    let width = format("{}", largest_line_number).length()

    while line_index < line_spans.size() {
        if span.start >= line_spans[line_index].0 and span.start <= line_spans[line_index].1 {
            let column_index = span.start - line_spans[line_index].0

            println("----- \u001b[33m{}:{}:{}\u001b[0m", file_name, line_index + 1, column_index + 1)

            if line_index > 0 {
                print_source_line(severity, file_contents, file_span: line_spans[line_index - 1], error_span: span, line_number: line_index, largest_line_number)
            }

            print_source_line(severity, file_contents, file_span: line_spans[line_index], error_span: span, line_number: line_index + 1, largest_line_number)

            for x in 0..(span.start - line_spans[line_index].0 + width + 4) {
                print(" ")
            }

            println("\u001b[{}m^- {}\u001b[0m", severity.ansi_color_code(), message)

            while line_index < line_spans.size() and span.end > line_spans[line_index].0 {
                ++line_index
                if line_index >= line_spans.size() {
                    break
                }

                print_source_line(severity, file_contents, file_span: line_spans[line_index], error_span: span, line_number: line_index + 1, largest_line_number)

                break
            }
        } else {
            ++line_index
        }

    }
    println("\u001b[0m-----")
}

fn print_source_line(severity: MessageSeverity, file_contents: [u8], file_span: (usize, usize), error_span: Span, line_number: usize, largest_line_number: usize) throws {
    mut index = file_span.0

    let width = format("{}", largest_line_number).length()

    print(" {} | ", line_number)

    while index <= file_span.1 {
        mut c = b' '
        if index < file_span.1 {
            c = file_contents[index]
        } else if error_span.start == error_span.end and index == error_span.start {
            c = b'_'
        }

        if (index >= error_span.start and index < error_span.end) or (error_span.start == error_span.end and index == error_span.start) {
            print("\u001b[{}m{:c}", severity.ansi_color_code(), c)
        } else {
            print("\u001b[0m{:c}", c)
        }

        ++index
    }
    println("")
}

fn gather_line_spans(file_contents: [u8]) throws -> [(usize, usize)] {
    mut idx = 0uz
    mut output: [(usize, usize)] = []

    mut start = idx
    while idx < file_contents.size() {
        if file_contents[idx] == b'\n' {
            output.push((start, idx))
            start = idx + 1
        }
        idx += 1
    }
    if start < idx {
        output.push((start, idx))
    }

    return output
}
