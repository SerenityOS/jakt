//
// Copyright (c) 2022, Jes√∫s Lapastora <cyber.gsuscode@gmail.com>
//
// SPDX-License-Identifier: BSD-2-Clause

import error { JaktError, print_error }
import parser { Parser }
import lexer { Lexer }
import utility { panic }

namespace fs {

    // subset of `struct stat` from <sys/stat.h> that contains
    // just what is used.
    extern struct StatResults {
        function modified_time(this) -> usize
        // Whether the file is executable by the current user
        function is_executable(this) -> bool
        function is_regular_file(this) -> bool
        function is_directory(this) -> bool
    }

    extern class DirectoryIterator {
        // Get next listing name. Note that the full path is not given,
        // just the base name.
        public function next(mut this) throws -> String?
    }
    // Get a listing of a directory, using readdir().
    extern function list_directory(path: String) throws -> DirectoryIterator
    // Returns whether the given path is a directory

    // Create a directory
    extern function mkdir(path: String) throws
    
    // Remove a directory
    extern function rmdir(path: String) throws

    // Remove a file
    extern function unlink(path: String) throws

    // Calls `stat` on a file. Silences `ENOENT` error by setting
    // StatResults.exists to false.
    extern function stat_silencing_enoent(path: String) throws -> StatResults?


    function is_directory(path: String) throws -> bool {
        let stat = stat_silencing_enoent(path)
        return stat.has_value() and stat!.is_directory()
    }

    function mkdir_if_not_present(path: String) throws {
        let stat = stat_silencing_enoent(path)
        if not stat.has_value() or not stat!.is_directory() {
            fs::mkdir(path)
        }
    }


    function has_jakt_extension(name: String) throws -> bool {
        if name.length() < 5 {
            return false
        }
        let extension = name.substring(start: name.length() - 5, length: 5)
        return extension == ".jakt"
    }

    // Traverse directory in a DFS manner ta find files with the .jakt extension
    // and store results into the given array
    function get_jakt_files_under(directory: String, mut results: [String]) throws -> [String] {
        mut path_stack: [String] = [directory]

        while not path_stack.is_empty() {
            let current = path_stack.pop()!
            for child_name in list_directory(path: current) {
                // avoid going back or re-visiting the same dir
                if child_name == ".." or child_name == "." {
                    continue
                }
                let full_child_path = current + "/" + child_name
                if is_directory(path: full_child_path) {
                    // add it to the stack so we traverse it
                    path_stack.push(full_child_path)
                } else if has_jakt_extension(name: child_name) {
                    results.push(full_child_path)
                }
            }
        }

        return results
    }
}


namespace process {
    /// Starts a background job by means of fork() and exec(). Returns
    /// the PID of the launched process.
    extern function start_background_process(args: [String]) throws -> i32
    /// Checks whether a process has finished executing. Returns its
    /// exit code if it has.
    extern function poll_process_exit(pid: i32) throws -> i32?
    /// Kills a process by sending SIGKILL to it
    extern function forcefully_kill_process(pid: i32) throws

    /// Calls execvp() with the given argument array.
    extern function exec(args: [String]) throws
}

namespace os {
    /// Calls sysconf(_SC_NPROCESSORS_ONLN) to get the number of CPUs available
    extern function get_num_cpus() throws -> usize

    /// Returns %TEMP% in Windows and $TMP_DIR or /tmp in macOS/linux
    extern function get_system_temporary_directory() throws -> String
}

function print_usage()  {
    eprintln("usage: jakttest [OPTIONS...] <temp-dir> [<path> ...]")
    eprintln("OPTIONS:")
    eprintln("\t-h\t\tShow this message and exit.")
    eprintln("\t--show-reasons\t\tShow the reasons why tests that fail do so.")
    eprintln("\t-j,--jobs <JOBS>\t\tUse JOBS processes. Defaults to the number of available CPUs.")
    eprintln("\t--temp-dir <DIR>\t\tUse DIR as the temporary directory.")
    eprintln("\t\t\tWill try to use $TMP_DIR or /tmp in UNIX-based systems, or %TEMP% in Windows")
    eprintln("\t--assume-updated-selfhost\t\tAssume selfhost is up to date, i.e don't check it.")
    eprintln("\t--assume-updated\t\tAssume jakttest is up to date, i.e don't check it.")
}

function compare_test(bytes: [u8], expected: String) throws -> bool {
    // first, build up the content to compare to
    mut builder = StringBuilder::create()
    for b in bytes.iterator() {
        builder.append(b)
    }

    let builder_output = builder.to_string()

    if builder_output != expected {
        // TODO: return more information about expected/parsed
        // for --show-reason flag
        return false
    }
    return true
}

function compare_error(bytes: [u8], expected: String) throws -> bool {
    // first, build up the content to compare to
    mut builder = StringBuilder::create()

    for b in bytes.iterator() {
        if b == 0xd {
            // skip
        } else if b == 0xa {
            builder.append(b'\\')
            builder.append(b'n')
        } else {
            builder.append(b)
        }
    }

    let builder_output = builder.to_string()
    let stripped_expected = strip_line_breaks(expected)

    // println("builder output: {}", builder_output)
    // println("stripped_expected: {}", stripped_expected)

    if not builder_output.contains(stripped_expected) {
        // TODO: return more information about expected/parsed
        // for --show-reason flag
        return false
    }
    return true
}

function strip_line_breaks(anon input: String) throws -> String {
    mut builder = StringBuilder::create();
    for i in 0..input.length() {
        let b = input.byte_at(i)
        if b == b'\n' {
            builder.append(b'\\')
            builder.append(b'n')
            continue
        }
        if b == b'\r' {
            continue
        }
        builder.append(b)
    }
    return builder.to_string()
}

function usize_from_ascii_digit(anon byte: u8) -> usize? {
    if byte >= b'0' and byte <= b'9' {
        return (byte - b'0') as! usize
    }
    return None
}

function usize_from_ascii_digits(anon digits: String) -> usize? {
    mut value = 0uz

    for index in 0..digits.length() {
        let byte = digits.byte_at(index)
        let digit = usize_from_ascii_digit(byte)
        if not digit.has_value() {
            return None
        }
        // FIXME: overflow check
        value = value * 10 + digit!
    }


    return value
}

struct Options {
    files: [String]
    temp_dir: String
    errors: [String]
    show_reasons: bool
    job_count: usize
    help_wanted: bool
    assume_selfhost_updated: bool
    assume_updated: bool

    function from_args(args: [String]) throws -> Options {
        let files: [String] = []
        let errors: [String] = []
        mut options = Options(files
                              temp_dir: ""
                              errors
                              show_reasons: false
                              job_count: 0
                              help_wanted: false
                              assume_selfhost_updated: false
                              assume_updated: false)

        mut index = 1uz
        while index != args.size() {
            if args[index] == "-h" {
                // end processing here since the user wants some help
                options.help_wanted = true
                return options
            }

            if args[index] == "-j" or args[index] == "--jobs" {
                index++
                if index == args.size() {
                    options.errors.push("Used --jobs/-j without an argument")
                    break // we reached end of arguments
                }
                let jobs = usize_from_ascii_digits(args[index])
                if not jobs.has_value() or jobs! == 0 {
                    options.errors.push("--jobs/-j needs a positive integer as its argument")
                } else {
                    options.job_count = jobs!
                }
                index++
                continue
            }

            if args[index] == "--show-reasons" {
                index++
                options.show_reasons = true
                continue
            }

            if args[index] == "--temp-dir" {
                index++
                if index == args.size() {
                    options.errors.push("Used --temp-dir without an argument")
                    break
                }
                options.temp_dir = args[index]
                index++
                continue
            }

            if args[index] == "--assume-updated-selfhost" {
                options.assume_selfhost_updated = true
                index++
                continue
            }

            if args[index] == "--assume-updated" {
                options.assume_updated = true
                index++
                continue
            }
            
            if args[index].length() > 0 and args[index].byte_at(0) == b'-' {
                options.errors.push(format("Unknown argument: {}", args[index]))
            }

            // positional argument: file path
            options.files.push(args[index])

            index++
        }

        if options.temp_dir.is_empty() {
            options.temp_dir = os::get_system_temporary_directory() + "/jakttest"
        }

        if options.files.is_empty() {
            // find files under samples/ and tests/
            fs::get_jakt_files_under(directory: "samples", results: options.files)
            fs::get_jakt_files_under(directory: "tests",   results: options.files)
        }

        if options.job_count == 0 {
            options.job_count = os::get_num_cpus()
        }

        return options
    }
}

enum TestStage {
    TranspileJakt
    CompileCpp
    TestRun

    function equals(this, anon other: TestStage) => match this {
        TranspileJakt => other is TranspileJakt
        CompileCpp => other is CompileCpp
        TestRun => other is TestRun
    }

    function to_string(this) => match this {
        TranspileJakt => "Jakt transpilation to C++"
        CompileCpp => "Clang++ compilation of generated C++ source"
        TestRun => "Test binary run"
    }

    function from_exit_code(exit_code: i32) => match exit_code {
        0i32 => Some(TestStage::TestRun)
        1i32 => Some(TestStage::TestRun)
        2i32 => Some(TestStage::CompileCpp)
        3i32 => Some(TestStage::TranspileJakt)
        else => {
            let nothing: TestStage? = None
            yield nothing
        }
    }
}

enum ResultKind {
    Okay
    CompileError
    RuntimeError

    function output_filename(this) => match this {
        Okay => "runtest.out"
        RuntimeError => "runtest.err"
        CompileError => "compile_jakt.err"
    }

    function to_stage(this) => match this {
        Okay | RuntimeError => TestStage::TestRun
        CompileError => TestStage::TranspileJakt
    }
}

struct ExpectedResult {
    kind: ResultKind
    output: String
}


struct Test {
    result: ExpectedResult
    file_name: String
    directory_index: usize
}

struct TestsRunResult {
    passed_count: usize
    failed_count: usize
    failed_reasons: [String:TestFailedReason]?
}

enum TestFailedReason {
    CompilerErrorUnmatched(had: String, expected: String)
    ClangError(String)
    StderrUnmatched(had: String, expected: String)
    StdoutUnmatched(had: String, expected: String)
    ErroredAtEarlierStage(failed_stage: String, error: String)
    AbruptExit(i32)
}

// A test scheduler that has its process rate limited by
// the number of directories it has available.
struct TestScheduler {
    running_tests: [i32:Test]
    free_directories: [usize]
    directories: [String]
    passed_count: usize
    failed_count: usize
    failed_reasons: [String:TestFailedReason]?
    // TODO: timeout

    function poll_running_tests(mut this) throws {
        // TODO: switch back to using dict iterator
        // to debug weird String not having pointer
        // (see https://discord.com/channels/830522505605283862/977605897964617771/995699296685011004)
        for pid in .running_tests.keys().iterator() {
            let poll_result = process::poll_process_exit(pid)
            if poll_result.has_value() {
                let exit_code = poll_result!
                let test = .running_tests[pid]
                .free_directories.push(test.directory_index)
                .running_tests.remove(pid)

                let maybe_stage = TestStage::from_exit_code(exit_code)

                // unknown exit code. Assume that the job exited abruptly.
                if not maybe_stage.has_value() {
                    eprintln("\r\x1b[2K[ \x1b[31;1mFAIL\x1b[m ] {}", test.file_name)
                    if .failed_reasons.has_value() {
                        .failed_reasons![test.file_name] = TestFailedReason::AbruptExit(exit_code)
                    }
                    .failed_count++
                    continue
                }
                let stage = maybe_stage!

                if stage is CompileCpp {
                    eprintln("\r\x1b[2K[ \x1b[31;1mFAIL\x1b[m ] {}", test.file_name)
                    if .failed_reasons.has_value() {
                        let path = format("{}/compile_cpp.err",
                            .directories[test.directory_index])
                        mut file = File::open_for_reading(path)
                        let had = bytes_to_string(file.read_all())
                        .failed_reasons![test.file_name] = TestFailedReason::ClangError(had)
                    }
                    .failed_count++
                    continue
                }

                // check the exit code before anything
                let expected_stage = test.result.kind.to_stage()


                if not stage.equals(expected_stage) {
                    eprintln("\r\x1b[2K[ \x1b[31;1mFAIL\x1b[m ] {}", test.file_name)
                    if .failed_reasons.has_value() {

                        if not (stage is TranspileJakt) {
                            panic("unreachable: Since clang++ errors and other codes get handled otherwise, only thing that could fail before its expected stage is Jakt to C++.")
                        }

                        let file_to_check = format("{}/compile_jakt.err"
                                                   .directories[test.directory_index])

                        mut file = File::open_for_reading(file_to_check)
                        let error = bytes_to_string(file.read_all())

                        .failed_reasons![test.file_name] = 
                            TestFailedReason::ErroredAtEarlierStage(
                                failed_stage: stage.to_string()
                                error)

                    }
                    .failed_count++
                    continue
                }

                // check the test result
                let file_to_check = format("{}/{}"
                                    .directories[test.directory_index]
                                    test.result.kind.output_filename())


                mut file = File::open_for_reading(file_to_check)
                let output = file.read_all()
                let expected = test.result.output


                let passed_test = match test.result.kind {
                    Okay => compare_test(bytes: output, expected)
                    RuntimeError | CompileError => compare_error(bytes: output, expected)
                }
                if passed_test {
                    .passed_count++
                } else {
                    eprintln("\r\x1b[2K[ \x1b[31;1mFAIL\x1b[m ] {}", test.file_name)
                    if .failed_reasons.has_value() {
                        .failed_reasons![test.file_name] = match test.result.kind {
                            Okay => TestFailedReason::StdoutUnmatched(had: bytes_to_string(output)
                                                                      expected)
                            RuntimeError => TestFailedReason::StderrUnmatched(had: bytes_to_string(output)
                                                                      expected)
                            CompileError => TestFailedReason::CompilerErrorUnmatched(had: bytes_to_string(output)
                                                                             expected)
                        }
                    }
                    .failed_count++
                }
            }
        }
    }

    function get_free_directory(mut this) -> usize? => .free_directories.pop()

    function create(directories: [String], collect_reasons: bool) throws -> TestScheduler {
        mut running_tests: [i32:Test] = [:]
        running_tests.ensure_capacity(directories.size())
        mut free_directories: [usize] = []
        free_directories.ensure_capacity(directories.size())
        for i in 0..directories.size() {
            free_directories.push(i)
        }

        mut failed_reasons: [String:TestFailedReason]? = None
        if collect_reasons {
            let dict: [String:TestFailedReason] = [:]
            failed_reasons = dict
        }

        return TestScheduler(running_tests
                            free_directories
                            directories
                            passed_count: 0
                            failed_count: 0
                            failed_reasons)
    }

    public function run_tests(mut tests: [Test], directories: [String], collect_reasons: bool) throws -> TestsRunResult {
        let total_test_count = tests.size()
        mut scheduler = TestScheduler::create(directories, collect_reasons)
        // pre-allocate the command buffer to avoid allocating inside a loop
        mut command_buffer: [String] = ["./jakttest/run-one.sh" "" ""]
        while not tests.is_empty() {
            let dir_index = scheduler.get_free_directory()
            if dir_index.has_value() {
                // we got a free directory! Let's launch a new test job!
                mut test = tests.pop()!
                test.directory_index = dir_index!
                let directory = scheduler.directories[test.directory_index]
                command_buffer[1] = directory
                command_buffer[2] = test.file_name
                let pid = process::start_background_process(args: command_buffer)
                scheduler.running_tests[pid] = test
                eprint("\r\x1b[2K[ \x1b[1;31m{}\x1b[m/\x1b[1;32m{}\x1b[m/{} ] Testing {}"
                        scheduler.failed_count
                        scheduler.passed_count
                        total_test_count
                        test.file_name)
                unsafe { cpp { "fflush(stderr);" }}
                continue
            }

            scheduler.poll_running_tests()
        }

        while not scheduler.running_tests.is_empty() {
            scheduler.poll_running_tests()
        }
        eprint("\r\x1b[2K")
        unsafe { cpp { "fflush(stderr);" }}

        return TestsRunResult(passed_count: scheduler.passed_count
                              failed_count: scheduler.failed_count
                              failed_reasons: scheduler.failed_reasons)
    }
}

function does_selfhost_need_update() throws -> bool {
    let maybe_binary_stat = fs::stat_silencing_enoent(path: "build/main")
    if not maybe_binary_stat.has_value() {
        return true
    }
    let binary_stat = maybe_binary_stat!
    if binary_stat.is_executable() and binary_stat.is_regular_file() {
        // Looks like we've got the binary. Let's check the sources.
        mut latest_mtime: usize = 0
        mut selfhost_files: [String] = []
        fs::get_jakt_files_under(directory: "selfhost", results: selfhost_files)
        for file in selfhost_files.iterator() {
            let stat = fs::stat_silencing_enoent(path: file)!
            let mtime = stat.modified_time()
            if mtime > latest_mtime {
                latest_mtime = mtime
            }
        }

        return latest_mtime > binary_stat.modified_time()
    }
    return true
}


function main(args: [String]) {
    let parsed_options = Options::from_args(args)

    if parsed_options.help_wanted {
        print_usage()
        return 0
    }

    if not parsed_options.errors.is_empty() {
        for error in parsed_options.errors.iterator() {
            eprintln("Error: {}.", error)
        }
        print_usage()
        return 1
    }

    if not parsed_options.assume_selfhost_updated and does_selfhost_need_update() {
        eprintln("[ \x1b[1;94mINFO\x1b[m ] Compiling selfhost to match source...")
        system("cargo run --color=always selfhost/main.jakt".c_string())
    }

    if not parsed_options.assume_updated {
        eprintln("[ \x1b[1;94mINFO\x1b[m ] Running incremental build on Jakttest")
        let current_binary_stat = fs::stat_silencing_enoent(path: args[0])
        system("ninja -C jakttest".c_string())
        let latest_binary_stat = fs::stat_silencing_enoent(path: args[0])!

        if not current_binary_stat.has_value() or
            current_binary_stat!.modified_time() < latest_binary_stat.modified_time() {
            eprintln("[ \x1b[1;94mINFO\x1b[m ] Jakttest updated; restarting")
            mut forwarded_args: [String] = args
            forwarded_args.add_capacity(2)
            // we know at this point that we have selfhost updated and that we
            // have updated jakttest, so don't re-check any of them.
            forwarded_args.push("--assume-updated")
            forwarded_args.push("--assume-updated-selfhost")
            process::exec(args: forwarded_args)
        }
    }


    mut skipped_count = 0uz

    mut tests: [Test] = []
    tests.ensure_capacity(parsed_options.files.size())

    // parse all files to collect the actual work we have to do
    for file_name in parsed_options.files.iterator() {
        mut file = File::open_for_reading(file_name)
        let contents = file.read_all()
        let result = Parser::parse(input: contents)
        match result {
            SuccessTest(output) => {
                tests.push(Test(result: ExpectedResult(kind: ResultKind::Okay, output)
                                file_name
                                directory_index: 0))
            }
            CompileErrorTest(output) => {
                tests.push(Test(result: ExpectedResult(kind: ResultKind::CompileError, output)
                                file_name
                                directory_index: 0))
            }
            RuntimeErrorTest(output) => {
                tests.push(Test(result: ExpectedResult(kind: ResultKind::RuntimeError, output)
                                file_name
                                directory_index: 0))
            }
            SkipTest => {
                eprintln("[ \x1b[33;1mSKIP\x1b[m ] {}", file_name)
                skipped_count += 1
            }
        }
    }

    // TODO: wrap logic in a TestScheduler class

    mut directories: [String] = []
    directories.ensure_capacity(parsed_options.job_count as! usize)
    fs::mkdir_if_not_present(path: parsed_options.temp_dir)
    for i in 0..parsed_options.job_count {
        let path = format("{}/jakttest-tmp-{}",  parsed_options.temp_dir, i)
        fs::mkdir_if_not_present(path)
        directories.push(path)
    }

    let run_result = TestScheduler::run_tests(tests, directories, collect_reasons: parsed_options.show_reasons)

    // delete directories
    for dir in directories.iterator() {
        for file in fs::list_directory(path: dir) {
            if file == "." or file == ".." {
                continue
            }
            fs::unlink(path: dir + "/" + file)
        }
        fs::rmdir(path: dir)
    }
    fs::rmdir(path: parsed_options.temp_dir)

    println("==============================")
    println("{} passed" , run_result.passed_count)
    println("{} failed" run_result.failed_count)
    println("{} skipped", skipped_count)
    println("==============================")

    if run_result.failed_reasons.has_value() and run_result.failed_count > 0 {
        eprintln("Showing why tests failed:")
        let reasons = run_result.failed_reasons!
        mut is_first = true
        for file in reasons.keys().iterator() {
            if not is_first {
                eprintln("----------------------------------------")
            }
            eprintln("\x1b[1m{}\x1b[m:", file)
            mut output = ""
            match reasons[file] {
                CompilerErrorUnmatched(had, expected) => {
                    output += format("Could not find error \"{}\" in error output:\n", expected)
                    output += had
                }
                ClangError(error) => {
                    output += "Could not compile generated C++ code into a binary:\n"
                    output += error
                }
                StdoutUnmatched(had, expected) => {
                    output += "Could not match test stdout:\n"
                    output += "Expected:\n"
                    output += expected
                    output += "\nGot:\n"
                    output += had
                }
                StderrUnmatched(had, expected) => {
                    output += "Could not match test stderr:\n"
                    output += "Expected:\n"
                    output += expected
                    output += "\nGot:"
                    output += had
                }
                ErroredAtEarlierStage(failed_stage, error) => {
                    output += "Test failed at an earlier stage than expected:\n"
                    output +=  failed_stage + " failed with output:\n"
                    output += error
                }
                AbruptExit(exit_code) => {
                    output += "Test job exited with an unexpected code.\n"
                    output += format("Exit code: {}", exit_code)
                }
            }

            for line in output.split('\n').iterator() {
                eprintln("\x1b[1;0m|\x1b[m\t{}", line)
            }
        }
        eprintln("==============================")
    }

    if run_result.failed_count > 0 {
        return 1
    }
}

function write_to_file(file_contents: [u8], output_filename: String) throws {
    mut outfile = File::open_for_writing(output_filename)
    outfile.write(file_contents)
}

function bytes_to_string(anon bytes: [u8]) throws -> String {
    mut builder = StringBuilder::create()

    for byte in bytes.iterator() {
        builder.append(byte)
    }

    return builder.to_string()
}
