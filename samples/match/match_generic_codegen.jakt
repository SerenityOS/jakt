/// Expect:
/// - output: "1\n2\n3\n2\n2\n4\n2\n"

function generic_value_match<T>(anonymous x: T) -> i64 {
    return match x {
        (3) => 1
        (2) => 2
        (1) => 3
        else => 0
    }
}

function generic_enum_match<T>(anonymous x: T) -> i64 {
    return match x {
        A(y) => y
        B => 2
        C => 3
    }
}

enum X {
    A(i64)
    B
    C
}

boxed enum Y {
    A(i64)
    B
    C
}


function main() {
    println("{}", generic_value_match(3));
    println("{}", generic_value_match(2));
    println("{}", generic_value_match(1));

    println("{}", generic_enum_match(X::A(2)));
    println("{}", generic_enum_match(X::B()));

    println("{}", generic_enum_match(Y::A(4)));
    println("{}", generic_enum_match(Y::B()));
}
