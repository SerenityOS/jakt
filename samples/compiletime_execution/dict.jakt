/// Expect:
/// - output: "PASS\n"

comptime is_empty() -> bool {
    let dict: Dictionary<String, u8> = [:]
    return dict.is_empty()
}
comptime get() throws => ["a":'a'].get("a")! == 'a'
comptime set() throws -> bool {
    mut dict: Dictionary<String, u32> = [:]
    dict.set("b", 'b')
    return dict.contains("b") and dict.get("b")! == 'b'
}
comptime remove() throws -> bool {
    mut dict = ["c":'c']
    dict.remove("c")
    return not dict.contains("c")
}
comptime capacity() throws -> bool {
    mut dict: Dictionary<String, c_char> = [:]
    dict.ensure_capacity(5)
    return dict.capacity() == 5
}
comptime clear() throws -> bool {
    mut dict = ["d":'d',"e":'e',"f":'f']
    dict.clear()
    return dict.is_empty()
}
comptime size() throws -> bool {
    mut dict = ["g":'g',"h":'h',"i":'i']
    return dict.size() == 3
}
comptime keys() throws -> bool {
    mut dict = ["j":'j',"k":'k',"l":'l']
    let keys = dict.keys()
    return keys[0] == "j" and keys[1] == "k" and keys[2] == "l"
}
comptime iterator() throws -> bool {
    mut dict = ["m":'m',"n":'n',"o":'o']
    mut output = ""
    for (key, val) in dict {
        output += format("{}=>{:c}\n", key, val)
    }
    return output == "m=>m\nn=>n\no=>o\n"
}
comptime dictionary_constructor() -> bool => Dictionary<String, c_char>().is_empty()

fn main() {
    mut success = is_empty()
    success &= get()
    success &= set()
    success &= remove()
    success &= capacity()
    success &= clear()
    success &= size()
    success &= keys()
    success &= iterator()
    success &= dictionary_constructor()

    if success {
        println("PASS")
    } else {
        println("FAIL")
    }
}
