// Copyright (c) 2022, JT <jt@serenityos.org>
// Copyright (c) 2022, Andreas Kling <kling@serenityos.org>
//
// SPDX-License-Identifier: BSD-2-Clause

import parser { BinaryOperator, FunctionLinkage }
import typechecker { BuiltinType, CheckedBlock, CheckedCall, CheckedExpression, CheckedFunction, CheckedProgram, CheckedStatement, ModuleId, ScopeId, StructId, Type, TypeId }
import utility { panic, todo }

enum AllowedControlExits {
    /// No control exit statements allowed
    Nothing
    /// Only `return` allowed
    JustReturn
    /// `continue`/`break` allowed: `return` is also allowed in this context
    AtLoop

    function allow_return(this) => match this {
        Nothing | JustReturn => AllowedControlExits::JustReturn
        AtLoop => AllowedControlExits::AtLoop
    }
}

function are_loop_exits_allowed(anon allowed_control_exits: AllowedControlExits) -> bool => allowed_control_exits is AtLoop
function is_return_allowed(anon allowed_control_exits: AllowedControlExits) -> bool => not allowed_control_exits is Nothing

struct ControlFlowState {
    allowed_exits: AllowedControlExits
    /// Whether `break` and `continue` should use `return ExplicitValueOrControlFlow` instead of
    /// C++'s `break`/`continue`.
    passes_through_match: bool
    match_nest_level: usize

    function no_control_flow() -> ControlFlowState {
        return ControlFlowState(
            allowed_exits: AllowedControlExits::Nothing
            passes_through_match: false
            match_nest_level: 0
        )
    }
    function enter_function(this) -> ControlFlowState {
        return ControlFlowState(
            allowed_exits: AllowedControlExits::JustReturn
            passes_through_match: false
            match_nest_level: .match_nest_level
        )
    }
    function enter_loop(this) -> ControlFlowState {
        return ControlFlowState(
            allowed_exits: AllowedControlExits::AtLoop
            passes_through_match: false
            match_nest_level: 0
        )
    }
    function enter_match(this) -> ControlFlowState {
        mut level = .match_nest_level
        if .passes_through_match {
            level = .match_nest_level + 1
        }
        return ControlFlowState(
            allowed_exits: .allowed_exits.allow_return()
            passes_through_match: true
            match_nest_level: level
        )
    }
    function is_match_nested(this) => .match_nest_level != 0
    function choose_control_flow_macro(this) -> String {
        if are_loop_exits_allowed(.allowed_exits) {
            if .is_match_nested() {
                return "JAKT_RESOLVE_EXPLICIT_VALUE_OR_CONTROL_FLOW_AT_LOOP_NESTED_MATCH"
            }
            return "JAKT_RESOLVE_EXPLICIT_VALUE_OR_CONTROL_FLOW_AT_LOOP"
        }
        return "JAKT_RESOLVE_EXPLICIT_VALUE_OR_CONTROL_FLOW_RETURN_ONLY"
    }
}

struct CodeGenerator {

    program: CheckedProgram
    control_flow_state: ControlFlowState
    entered_yieldable_blocks: [(String, String)] // label, variable name

    function generate(anon program: CheckedProgram) throws -> String {
        mut generator = CodeGenerator(
            program
            control_flow_state: ControlFlowState(
                allowed_exits: AllowedControlExits::Nothing
                passes_through_match: false
                match_nest_level: 0
            )
            entered_yieldable_blocks: []
        )

        mut output = ""

        output += "#include <lib.h>\n"
        output += "namespace Jakt {\n"

        for module in generator.program.modules.iterator() {
            for function_ in module.functions.iterator() {
                output += generator.codegen_function(function_)
            }
        }

        output += "}\n"

        return output
    }

    function codegen_expression(mut this, anon expression: CheckedExpression) throws -> String => match expression {
        Range(from, to, type_id) => {
            mut output = ""
            let type = .program.get_type(type_id)
            let index_type = match type {
                GenericInstance(id, args) => args[0]
                else => {
                    panic("Internal error: range expression doesn't have Range type")
                    // FIXME: panic() should be "noreturn" and this can be removed
                    yield TypeId(module: ModuleId(id: 0), id: 0)
                }
            }
            output += "("
            output += .codegen_type(type_id)
            output += "{"
            output += "static_cast<"
            output += .codegen_type(index_type)
            output += ">("
            output += .codegen_expression(from)
            output += "),static_cast<"
            output += .codegen_type(index_type)
            output += ">("
            output += .codegen_expression(to)
            output += ")})"
            yield output
        }
        OptionalNone => "JaktInternal::OptionalNone()"
        OptionalSome(expr, type_id) => "(" + .codegen_expression(expr) + ")"
        ForcedUnwrap(expr, type_id) => "(" + .codegen_expression(expr) + ".value())"
        QuotedString(val) => "String(\"" + val + "\")"
        ByteConstant(val) => "'" + val + "'"
        CharacterConstant(val) => "'" + val + "'"
        Var(var) => var.name
        IndexedExpression(expr, index) => "((" + .codegen_expression(expr) + ")[" + .codegen_expression(index) + "])"
        IndexedDictionary(expr, index) => "((" + .codegen_expression(expr) + ")[" + .codegen_expression(index) + "])"
        IndexedTuple(expr, index) => format("(({}).get<{}>())", .codegen_expression(expr), index)
        Block(block) => .codegen_block(block)
        Call(call) => .codegen_call(call)
        Boolean(val) => match val {
            true => "true"
            else => "false"
        }
        UnaryOp(expr, op, type_id) => {
            mut output = "("
            output += match op {
                PreIncrement => "++"
                PreDecrement => "--"
                Negate => "-"
                Dereference => "*"
                RawAddress => "&"
                LogicalNot => "!"
                BitwiseNot => "~"
                Is | TypeCast => {
                    todo("codegen Is and TypeCast")
                    yield ""
                }
                else => ""
            }
            output += .codegen_expression(expr)
            output += match op {
                PostIncrement => "++"
                PostDecrement => "--"
                TypeCast | Is => ")"
                IsEnumVariant => {
                    todo("codegen IsEnumVariant")
                    yield ""
                }
                else => ""
            }
            output += ")"
            yield output
        }
        BinaryOp(lhs, rhs, op, type_id) => .codegen_binary_expression(expression, type_id, lhs, rhs, op)
        else => {
            todo("codegen_expression else")
            yield ""
        }
    }

    function codegen_binary_expression(mut this, expression: CheckedExpression, type_id: TypeId, lhs: CheckedExpression, rhs: CheckedExpression, op: BinaryOperator) throws -> String {
        if op is NoneCoalescing {
            todo(format("codegen {}", op))
            return ""
        }

        if op is NoneCoalescingAssign {
            mut output = .codegen_expression(lhs)
            output += ".lazy_emplace([&] { return "
            output += .codegen_expression(rhs)
            output += "; })"
            return output
        }

        if op is ArithmeticRightShift {
            mut output = "(JaktInternal::arithmetic_shift_right("
            output += .codegen_expression(lhs)
            output += ","
            output += .codegen_expression(rhs)
            output += ")"
            return output
        }

        if op is Assign and lhs is IndexedDictionary {
            match lhs {
                IndexedDictionary(expr, index) => {
                    mut output = .codegen_expression(expr)
                    output += ".set("
                    output += .codegen_expression(index)
                    output += ", "
                    output += .codegen_expression(rhs)
                    output += "))"
                }
                else => {
                    // FIXME: unreachable
                }
            }
        }

        if .program.is_integer(type_id) {
            // Integer arithmetic is checked by default.
            match op {
                Add | Subtract | Multiply | Divide | Modulo => {
                    return "(" + .codegen_checked_binary_op(lhs, rhs, op, type_id) + ")"
                }
                AddAssign | SubtractAssign | MultiplyAssign | DivideAssign | ModuloAssign => {
                    return "(" + .codegen_checked_binary_op_assignment(lhs, rhs, op, type_id) + ")"
                }
                else => { }
            }
        }

        mut output = "("

        output += .codegen_expression(lhs)
        output += match op {
            Add => " + "
            Subtract => " - "
            Multiply => " * "
            Modulo => " % "
            Divide => " / "
            Assign => " = "
            AddAssign => " += "
            SubtractAssign => " -= "
            MultiplyAssign => " *= "
            ModuloAssign => " %= "
            DivideAssign => " /= "
            BitwiseAndAssign => " &= "
            BitwiseOrAssign => " |= "
            BitwiseXorAssign => " ^= "
            BitwiseLeftShiftAssign => " <<= "
            BitwiseRightShiftAssign => " >>= "
            Equal => " == "
            NotEqual => " != "
            LessThan => " < "
            LessThanOrEqual => " <= "
            GreaterThan => " > "
            GreaterThanOrEqual => " >= "
            LogicalAnd => " && "
            LogicalOr => " || "
            BitwiseAnd => " & "
            BitwiseOr => " | "
            BitwiseXor => " ^ "
            ArithmeticLeftShift => " << "
            BitwiseLeftShift => " << "
            BitwiseRightShift => " >> "
            else => {
                todo(format("codegen_binary_expression {}", op))
                yield ""
            }
        }
        output += .codegen_expression(rhs)

        output += ")"
        return output
    }

    function codegen_checked_binary_op(mut this, lhs: CheckedExpression, rhs: CheckedExpression, op: BinaryOperator, type_id: TypeId) throws -> String {
        mut output = ""
        output += "JaktInternal::"

        output += match op {
            Add => "checked_add"
            Subtract => "checked_sub"
            Multiply => "checked_mul"
            Divide => "checked_div"
            Modulo => "checked_mod"
            else => {
                panic(format("Checked binary operation codegen is not supported for BinaryOperator::{}", op))
                yield ""
            }
        }

        output += "<"
        output += .codegen_type(type_id)
        output += ">("
        output += .codegen_expression(lhs)
        output += ","
        output += .codegen_expression(rhs)
        output += ")"

        return output
    }

    function codegen_checked_binary_op_assignment(mut this, lhs: CheckedExpression, rhs: CheckedExpression, op: BinaryOperator, type_id: TypeId) throws -> String {
        mut output = ""

        output += "{"
        output += "auto& _jakt_ref = "
        output += .codegen_expression(lhs)
        output += ";"
        output += "_jakt_ref = JaktInternal::"
        output += match op {
            AddAssign => "checked_add"
            SubtractAssign => "checked_sub"
            MultiplyAssign => "checked_mul"
            DivideAssign => "checked_div"
            ModuloAssign => "checked_mod"
            else => {
                panic(format("Checked binary operation assignment codegen is not supported for BinaryOperator::{}", op))
                yield ""
            }
        }
        output += "<"
        output += .codegen_type(type_id)
        output += ">(_jakt_ref, "
        output += .codegen_expression(rhs)
        output += ");"
        output += "}"
        return ""
    }

    function codegen_call(mut this, call: CheckedCall) throws -> String {
        mut output = ""

        if call.callee_throws {
            output += "TRY("
        }
        match call.name {
            "print" | "println" | "eprintln" | "format" => {
                let helper = match call.name {
                    "print" => "out"
                    "println" => "outln"
                    "eprintln" => "warnln"
                    "format" => "String::formatted"
                    else => ""
                }
                output += helper
                output += "("
                for i in 0..call.args.size() {
                    let expr = call.args[i].1
                    output += .codegen_expression(expr)
                    if i != call.args.size() - 1 {
                        output += ","
                    }
                }
                output += ")"
            }
            else => {
                if call.function_id.has_value() {
                    let type_module = .program.get_module(call.function_id!.module)
                    if type_module.is_root or type_module.id.id == 0 or .program.get_function(call.function_id!).linkage is External or (not call.namespace_.is_empty() and call.namespace_[0].name == type_module.name)
                    {
                        output += type_module.name
                        output += "::"
                    }
                }

                output += .codegen_namespace_path(call)
                output += call.name
            }
        }

        if call.callee_throws {
            output += ")"
        }

        return output
    }

    function codegen_namespace_path(this, call: CheckedCall) throws -> String {
        // FIXME: Implement
        return ""
    }

    function codegen_block(mut this, block: CheckedBlock) throws -> String {
        mut output = ""

        // FIXME: yielded_type

        output += "{"

        for statement in block.statements.iterator() {
            output += .codegen_statement(statement)
        }

        output += "}"

        // FIXME: yielded_type

        return output
    }

    function codegen_statement(mut this, statement: CheckedStatement) throws -> String {
        match statement {
            Throw(expression) => {
                return "return " + .codegen_expression(expression) + ";"
            }   
            Continue => {
                if .control_flow_state.passes_through_match {
                    return "return JaktInternal::LoopContinue{};"
                }
                return "continue;"
            }
            Break => {
                if .control_flow_state.passes_through_match {
                    return "return JaktInternal::LoopBreak{};"
                }
                return "break;"
            }
            Expression(expression) => {
                return .codegen_expression(expression) + ";\n"
            }
            Defer(statement) => {
                // NOTE: We let the preprocessor generate a unique name for the RAII helper.
                mut output = ""
                output += "#define __SCOPE_GUARD_NAME __scope_guard_ ## __COUNTER__\n"
                output += "ScopeGuard __SCOPE_GUARD_NAME ([&] \n"
                output += "#undef __SCOPE_GUARD_NAME\n{"
                {
                    let last_control_flow = .control_flow_state
                    .control_flow_state.passes_through_match = false
                    output += .codegen_statement(statement)
                    output += "});\n"
                    .control_flow_state = last_control_flow
                }
            }
            Return(expression) => {
                if expression.has_value() {
                    return "return (" + .codegen_expression(expression!) + ");\n"
                } else {
                    return "return;\n"
                }
            }
            Loop(block) => {
                mut output = ""
                output += "for (;;) {"
                let last_control_flow = .control_flow_state
                .control_flow_state = last_control_flow.enter_loop()
                let block_str = .codegen_block(block)
                .control_flow_state = last_control_flow
                output += block_str
                output += "}"
            }
            While(guard, block) => {
                mut output = ""
                output += "while ("
                output += .codegen_expression(expression: guard)
                output += ") "
                {
                    let last_control_flow = .control_flow_state
                    .control_flow_state = last_control_flow.enter_loop()
                    let code = .codegen_block(block)
                    .control_flow_state = last_control_flow
                    output += code
                }
            }
            Block(block) => {
                return "{" + .codegen_block(block) + "}"
            }
            Garbage => {
                panic("Garbage statement in codegen")
            }
            else => {
                eprintln("Missing statement codegen for {}", statement)
                todo("codegen_statement")
            }
        }
        return ""
    }

    function codegen_type(this, anon type_id: TypeId) throws -> String {
        return .codegen_type_possibly_as_namespace(type_id, as_namespace: false)
    }

    function codegen_type_possibly_as_namespace(this, type_id: TypeId, as_namespace: bool) throws -> String => match .program.get_type(type_id) {
        Void => "void"
        Bool => "bool"
        U8 => "u8"
        U16 => "u16"
        U32 => "u32"
        U64 => "u64"
        I8 => "i8"
        I16 => "i16"
        I32 => "i32"
        I64 => "i64"
        F32 => "f32"
        F64 => "f64"
        Usize => "size_t"
        JaktString => "String"
        CChar => "char"
        CInt => "int"
        CString => "char const*"
        RawPtr(type_id) => .codegen_type(type_id) + "*"
        GenericInstance(id, args) => .codegen_generic_type_instance(id, args, as_namespace)
        else => {
            todo("codegen_type else")
            yield ""
        }
    }

    function codegen_generic_type_instance(this, id: StructId, args: [TypeId], as_namespace: bool) throws -> String {
        // FIXME: Handle WeakPtr
        mut output = ""
        let type_module = .program.get_module(id.module)
        if not (type_module.is_root or type_module.id.id == 0) {
            output += type_module.name
            output += "::"
        }
        let struct_ = .program.get_struct(id)
        let acquired_by_ref = not as_namespace and struct_.record_type is Class
        if acquired_by_ref {
            output += "NonnullRefPtr<"
        }
        output += .codegen_namespace_qualifier(scope_id: struct_.scope_id)
        output += struct_.name
        output += "<"
        mut first = true
        for type_id in args.iterator() {
            if not first {
                output += ","
            } else {
                first = false
            }
            output += .codegen_type(type_id)
        }
        output += ">"
        if acquired_by_ref {
            output += ">"
        }
        return output
    }

    function codegen_namespace_qualifier(this, scope_id: ScopeId) throws -> String {
        mut output = ""
        mut current_scope_id = .program.get_scope(scope_id).parent

        while current_scope_id.has_value() {
            if .program.get_scope(current_scope_id!).namespace_name.has_value() {
                let namespace_name = .program.get_scope(current_scope_id!).namespace_name!
                output = format("{}::{}", namespace_name, output)
            }
            current_scope_id = .program.get_scope(current_scope_id!).parent
        }
        return output
    }

    function codegen_function(mut this, anon function_: CheckedFunction) throws -> String {
        let none: TypeId? = None
        return .codegen_function_in_namespace(function_, containing_struct: none)
    }

    function codegen_function_in_namespace(mut this, function_: CheckedFunction, containing_struct: TypeId?) throws -> String {
        mut output = ""

        let is_main = function_.name == "main" and not containing_struct.has_value()

        if is_main {
            output += "ErrorOr<int>"
        } else {
            if function_.is_static() and not containing_struct.has_value() {
                output += "static "
            }
            output += match function_.can_throw {
                true => format("ErrorOr<{}>", .codegen_type(function_.return_type_id))
                else => .codegen_type(function_.return_type_id)
            }
        }

        output += " "

        if is_main {
            output += "main"
        } else {
            let qualifier = match containing_struct.has_value() {
                true => .codegen_type_possibly_as_namespace(type_id: containing_struct!, as_namespace: true)
                else => ""
            }
            if not qualifier.is_empty() {
                output += qualifier
                output += "::"
            }
            output += function_.name
        }

        output += "("

        if is_main and function_.params.is_empty() {
            output += "Array<String>"
        }

        mut first = true
        for param in function_.params.iterator() {
            let variable = param.variable
            if variable.name == "this" {
                continue
            }
            if not first {
                output += ","
            } else {
                first = false
            }
            if not variable.is_mutable {
                output += "const "
            }
            output += .codegen_type(variable.type_id)
            output += " "
            output += variable.name
        }

        output += ")"

        if not function_.is_static() and not function_.is_mutating() {
            output += " const"
        }

        output += "{"

        if is_main {
            output += "using _JaktCurrentFunctionReturnType = ErrorOr<int>;"
        } else {
            if function_.can_throw {
                output += format("using _JaktCurrentFunctionReturnType = ErrorOr<{}>;", .codegen_type(function_.return_type_id))
            } else {
                output += format("using _JaktCurrentFunctionReturnType = {};", .codegen_type(function_.return_type_id))
            }
        }

        let last_control_flow = .control_flow_state
        .control_flow_state = last_control_flow.enter_function()
        let block = .codegen_block(block: function_.block)
        .control_flow_state = last_control_flow
        output += block

        if is_main {
            output += "return 0;"
        } else {
            // FIXME: This should check if the id is BuiltinType::Void, but the baseline compiler chokes on that.
            if function_.can_throw and function_.return_type_id.id == 0 {
                output += "return {};"
            }
        }

        output += "}"

        return output
    }
}
