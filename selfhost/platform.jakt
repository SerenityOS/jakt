import jakt::platform { platform_module, Target }
import jakt::prelude::configuration { UserConfiguration }

comptime platform_compiler() throws -> [String] => platform_module("platform::compiler")

fn library_name_for_target(anon name: String, anon target: Target) throws -> String {
    let target_name = target.name()
    return format("{}/{}"
        target_name
        match target.os {
            "windows" => format("jakt_{}_{}.lib", name, target_name)
            else => format("libjakt_{}_{}.a", name, target_name)
        }
    )
}

comptime library_name(anon name: String) throws -> String => library_name_for_target(name, target: Target::active())

comptime repl_backend() throws -> String => match UserConfiguration::value_of("jakt.repl_backend") ?? "default" {
    "default" => "repl_backend::default"
    "libline" => "repl_backend::libline"
    else => {
        throw Error::from_string_literal("Invalid value for jakt.repl_backend")
    }
}
