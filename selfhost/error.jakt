// Copyright (c) 2022, JT <jt@serenityos.org>
// Copyright (c) 2022, Andreas Kling <kling@serenityos.org>
//
// SPDX-License-Identifier: BSD-2-Clause

import utility { Span }

enum JaktError {
    Message(message: String, span: Span)
    MessageWithHint(message: String, span: Span, hint: String, hint_span: Span)

    function span(this) -> Span => match this {
        Message(span) => span
        MessageWithHint(span) => span
    }
}


function print_error_json(file_name: String, error: JaktError) throws {
    match error {
        Message(message, span) => {
            display_message_with_span_json(MessageSeverity::Error, file_name, message, span)
        }
        MessageWithHint(message, span, hint, hint_span) => {
            display_message_with_span_json(MessageSeverity::Error, file_name, message, span)
            display_message_with_span_json(MessageSeverity::Hint, file_name, message: hint, span: hint_span)
        }
    }
}

function print_error(file_name: String, file_contents: [u8]?, error: JaktError) throws {
    match error {
        Message(message, span) => {
            display_message_with_span(MessageSeverity::Error, file_name, contents: file_contents, message, span)
        }
        MessageWithHint(message, span, hint, hint_span) => {
            display_message_with_span(MessageSeverity::Error, file_name, contents: file_contents, message, span)
            display_message_with_span(MessageSeverity::Hint, file_name, contents: file_contents, message: hint, span: hint_span)
        }
    }
}

enum MessageSeverity {
    Hint
    Error
    public function name(this) throws => match this {
        Hint => "Hint"
        Error => "Error"
    }
    public function ansi_color_code(this) throws => match this {
        Hint => "94"  // Bright Blue
        Error => "31" // Red
    }
}


function display_message_with_span_json(anon severity: MessageSeverity, file_name: String, message: String, span: Span) throws
{
    println("{{\"type\":\"diagnostic\",\"message\":\"{}\",\"severity\":\"{}\",\"file_id\":{},\"span\":{{\"start\":{},\"end\":{}}}}}"
        message, severity.name(), span.file_id.id, span.start, span.end)
}

function display_message_with_span(anon severity: MessageSeverity, file_name: String, contents: [u8]?, message: String, span: Span) throws {
    eprintln("{}: {}", severity.name(), message)

    if not contents.has_value() {
        return
    }

    let file_contents = contents!
    let line_spans = gather_line_spans(file_contents)

    mut line_index = 1uz

    mut largest_line_number = 0uz
    while line_index < line_spans.size() {
        if span.start >= line_spans[line_index].0 and span.start <= line_spans[line_index].1 {
            largest_line_number = line_index + 2 // 1 (row number) + 1 (extra source line)
        }
        ++line_index
    }
    
    let width = format("{}", largest_line_number).length()

    line_index = 1uz
    while line_index < line_spans.size() {
        if span.start >= line_spans[line_index].0 and span.start <= line_spans[line_index].1 {
            let column_index = span.start - line_spans[line_index].0

            for x in 0..(width + 2) {
                eprint("─")
            }

            eprintln("┬─ \u001b[33m{}:{}:{}\u001b[0m", file_name, line_index + 1, column_index + 1)

            if line_index > 0 {
                print_source_line(severity, file_contents, file_span: line_spans[line_index - 1], error_span: span, line_number: line_index, largest_line_number)
            }

            // Print the lines that include the error

            while line_index < line_spans.size() and span.end > line_spans[line_index].0 {
                print_source_line(severity, file_contents, file_span: line_spans[line_index], error_span: span, line_number: line_index + 1, largest_line_number)
                if span.end <= line_spans[line_index].1 {
                    break
                }
                ++line_index
            }

            // Print the error label
            for x in 0..(width + 2) {
                eprint(" ")
            }
            eprint("│")
            for x in 0..(span.end - line_spans[line_index].0) {
                eprint(" ")
            }
            eprintln("\u001b[{}m╰─ {}\u001b[0m", severity.ansi_color_code(), message)

            ++line_index

            // Print one last line for context
            if line_index < line_spans.size() {
                print_source_line(severity, file_contents, file_span: line_spans[line_index], error_span: span, line_number: line_index + 1, largest_line_number)
            }
        } else {
            ++line_index
        }

    }
    eprint("\u001b[0m")
    for x in 0..(width + 2) {
        eprint("─")
    }

    eprintln("┴─")
}

function print_source_line(severity: MessageSeverity, file_contents: [u8], file_span: (usize, usize), error_span: Span, line_number: usize, largest_line_number: usize) throws {
    mut index = file_span.0

    let largest_width = format("{}", largest_line_number).length()
    let current_width = format("{}", line_number).length()

    eprint(" {}", line_number)
    for _ in 0..(largest_width - current_width) {
        eprint(" ")
    }
    eprint(" │ ")

    while index <= file_span.1 {
        mut c = b' '
        if index < file_span.1 {
            c = file_contents[index]
        } else if error_span.start == error_span.end and index == error_span.start {
            c = b'_'
        }

        if (index == error_span.start) {
            eprint("\u001b[{}m", severity.ansi_color_code())
        }
        if (index == error_span.end) {
            eprint("\u001b[0m")
        }

        eprint("{:c}", c)

        ++index
    }
    eprintln("")
}

function gather_line_spans(file_contents: [u8]) throws -> [(usize, usize)] {
    mut idx = 0uz
    mut output: [(usize, usize)] = []

    mut start = idx
    while idx < file_contents.size() {
        if file_contents[idx] == b'\n' {
            output.push((start, idx))
            start = idx + 1
        }
        idx += 1
    }
    if start < idx {
        output.push((start, idx))
    }

    return output
}
