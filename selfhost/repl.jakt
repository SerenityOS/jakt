import typechecker { Typechecker, Interpreter, LoadedModule, ModuleId, ScopeId, TypeId, CheckedProgram, SafetyMode, InterpreterScope }
import compiler { Compiler, FilePath }
import lexer { Lexer }
import parser { Parser }
import utility { Span }
import error { JaktError }
import codegen { CodeGenerator, CodegenDebugInfo, ControlFlowState, AllowedControlExits }

import extern "LibLine/Editor.h" {
    namespace AK {
        extern struct String {
            function characters(this) -> raw c_char
            function length(this) -> usize
        }
        extern struct Error {
            function code(this) -> i32
            function string_literal(this) -> String
        }
        extern struct ErrorOr<T> {
            function is_error(this) -> bool
            function release_value(mut this) -> T
            function error(this) -> Error
        }
        extern struct Result<T> {
            function is_error(this) -> bool
            function release_value(mut this) -> T
        }
        extern struct NonnullRefPtr<T> {
            function ptr(this) -> raw T
        }
    }
    namespace Line {
        extern struct Editor {
            function try_create() -> AK::ErrorOr<AK::NonnullRefPtr<Editor> >
            function get_line(mut this, anon prompt: raw c_char) -> AK::Result<AK::String>
        }
    }
}

function get_line(editor: &mut Line::Editor) throws {
    let input_string = editor.get_line("> ".c_string()).release_value()

    mut builder = StringBuilder::create()
    builder.append_c_string(input_string.characters())
    return builder.to_string()
}

function handle_possible_error(compiler: &mut Compiler) throws -> bool {
    compiler.print_errors()
    let has_error = compiler.errors.size() > 0
    let arr: [JaktError] = []
    compiler.errors = arr
    return has_error
}

function actual_main(anon editor: &mut Line::Editor) throws {
    mut compiler = Compiler(
        files: []
        file_ids: [:]
        errors: []
        current_file: None
        current_file_contents: []
        dump_lexer: false
        dump_parser: false
        ignore_parser_errors: false
        debug_print: false
        include_paths: []
        json_errors: false
        dump_type_hints: false
        dump_try_hints: false
    )

    compiler.load_prelude()
    let file_id = compiler.get_file_id_or_register(file: FilePath::make("<repl>"))

    let placeholder_module_id = ModuleId(id: 0)

    mut typechecker = Typechecker(
        compiler
        program: CheckedProgram(compiler, modules: [], loaded_modules: [:]),
        current_module_id: placeholder_module_id,
        current_struct_type_id: TypeId::none()
        current_function_id: None
        inside_defer: false
        checkidx: 0uz
        ignore_errors: false
        dump_type_hints: compiler.dump_type_hints
        dump_try_hints: compiler.dump_try_hints
        lambda_count: 0
    )

    compiler.current_file = file_id
    typechecker.include_prelude()

    let root_module_name = "<repl>"
    let root_module_id = typechecker.create_module(name: root_module_name, is_root: true)
    typechecker.current_module_id = root_module_id
    typechecker.program.set_loaded_module(
        module_name: root_module_name
        loaded_module: LoadedModule(
            module_id: root_module_id
            file_id: file_id
        )
    )

    let PRELUDE_SCOPE_ID: ScopeId = typechecker.prelude_scope_id()
    let root_scope_id = typechecker.create_scope(parent_scope_id: PRELUDE_SCOPE_ID, can_throw: true,  debug_name: "root")

    let root_interpreter_scope = InterpreterScope(
        bindings: [:]
        parent: None
    )

    mut generator = CodeGenerator(
        compiler
        program: typechecker.program
        control_flow_state: ControlFlowState(
            allowed_exits: AllowedControlExits::Nothing
            passes_through_match: false
            passes_through_try: false
            match_nest_level: 0
        )
        entered_yieldable_blocks: []
        deferred_output: ""
        current_function: None
        debug_info: CodegenDebugInfo(
            compiler
            line_spans: [:]
            statement_span_comments: false
        )
        namespace_stack: []
        fresh_var_counter: 0
        fresh_label_counter: 0
    )

    loop {
        if not compiler.errors.is_empty() {
            compiler.print_errors()
            let arr: [JaktError] = []
            compiler.errors = arr
        }

        let line = get_line(&mut editor)

        if line == ".exit" {
            break
        }

        mut pos: usize = 0
        mut bytes_: [u8] = []
        bytes_.ensure_capacity(line.length())
        while pos < line.length() {
            bytes_.push(line.byte_at(pos)) 
            ++pos
        }

        compiler.current_file = file_id
        compiler.current_file_contents = bytes_

        let tokens = try Lexer::lex(compiler) catch {
            continue
        }

        mut parser = Parser(index: 0, tokens, compiler)
        let parsed_statement = try parser.parse_statement(inside_block: true) catch {
            handle_possible_error(&mut compiler)
            continue
        }

        if handle_possible_error(&mut compiler) {
            continue
        }

        let checked_statement = try typechecker.typecheck_statement(statement: parsed_statement, scope_id: root_scope_id, safety_mode: SafetyMode::Safe) catch {
            handle_possible_error(&mut compiler)
            continue
        }

        if handle_possible_error(&mut compiler) {
            continue
        }

        mut interpreter = Interpreter(
            compiler,
            program: typechecker.program,
            spans: []
        )

        let result = try interpreter.execute_statement(
            statement: checked_statement
            scope: root_interpreter_scope
            call_span: Span(
                file_id
                start: 0
                end: line.length()
            )
        ) catch {
            handle_possible_error(&mut compiler)
            continue
        }

        if handle_possible_error(&mut compiler) {
            continue
        }

        match result {
            Return(value) | JustValue(value) | Throw(value) => {
                if value.impl is Void {
                    continue
                }
            }
            Break | Continue => {}
        }

        let output = match result {
            Return(value) | JustValue(value) => generator.codegen_expression(expr: value.to_checked_expression(interpreter))
            Throw(value) => "throw " + generator.codegen_expression(expr: value.to_checked_expression(interpreter))
            Break | Continue => {
                continue
            }
        }
        println("= {}", output)
    }
}

function main() {
    mut editor_or_error = Line::Editor::try_create()
    if editor_or_error.is_error() {
        println("Failed lol")
        return 1
    }

    mut editor_nnrp = editor_or_error.release_value()
    unsafe {
        mut editor_ptr = editor_nnrp.ptr()
        actual_main(&mut *editor_ptr)
    }
}