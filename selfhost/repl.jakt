import typechecker {
    BuiltinType, CheckedExpression, CheckedProgram, CheckedUnaryOperator, GenericInferences, Interpreter
    InterpreterScope, LoadedModule, ModuleId, SafetyMode, ScopeId, TypeId, Typechecker, builtin
}
import compiler { Compiler, FileId }
import lexer { Lexer }
import parser { Parser }
import utility { Span, allocate, null }
import error { JaktError }
import interpreter { value_to_checked_expression }
import jakt::path { Path }

import jakt::libc::io { fopen, fclose, fgets, FILE }

enum LineResult {
    Line(String)
    Eof
}

struct Editor {
    standard_input_file: raw FILE
    line_pointer: raw c_char
    prompt: String

    function create(prompt: String) throws -> Editor {
        mut std_in = fopen(pathname: "/dev/stdin".c_string(), mode: "r".c_string())
        if std_in == null<FILE>() {
            eprintln("Could not open /dev/stdin for reading")
            throw Error::from_errno(42)
        }

        let editor = Editor(
            standard_input_file: std_in
            line_pointer: allocate<c_char>(count: 4096)
            prompt
        )
        return editor
    }

    function get_line(mut this) throws -> LineResult {
        eprint("{}", .prompt)

        mut builder = StringBuilder::create()
        unsafe {
            let c_string = fgets(
                s: .line_pointer
                n: 4096
                stream: .standard_input_file)

            if c_string == null<c_char>() {
                return LineResult::Eof
            }

            builder.append_c_string(c_string)
        }

        return LineResult::Line(builder.to_string())
    }

    function destroy(mut this) {
        fclose(stream: .standard_input_file)
        unsafe {
            cpp {
                "free(line_pointer);"
            }
        }
    }
}

function serialize_unary_operation(anon op: CheckedUnaryOperator, anon expr: String) -> String => match op {
    PreIncrement => "++" + expr
    PostIncrement => expr + "++"
    PreDecrement => "--" + expr
    PostDecrement => expr + "--"
    Negate => "-" + expr
    Dereference => "*" + expr
    RawAddress => "&raw " + expr
    Reference => "&" + expr
    MutableReference => "&mut " + expr
    LogicalNot => "not " + expr
    BitwiseNot => "~" + expr
    else => "(<Unimplemented unary operator> " + expr + ")"
}

function serialize_ast_node(anon node: CheckedExpression) throws -> String => match node {
    Boolean(val) => format("{}", val)
    NumericConstant(val) => match val {
        I8(value) => format("{}i8", value)
        I16(value) => format("{}i16", value)
        I32(value) => format("{}i32", value)
        I64(value) => format("{}i64", value)
        U8(value) => format("{}u8", value)
        U16(value) => format("{}u16", value)
        U32(value) => format("{}u32", value)
        U64(value) => format("{}u64", value)
        F32(value) => format("{}f32", value)
        F64(value) => format("{}f64", value)
        USize(value) => format("{}uz", value)
    }
    QuotedString(val) => match val.type_id.equals(builtin(BuiltinType::JaktString)) {
        true => format("\"{}\"", val.to_string())
        else => format("(overloaded) \"{}\"", val.to_string())
    }
    ByteConstant(val) => format("b'{}'", val)
    CharacterConstant(val) => format("'{}'", val)
    UnaryOp(expr, op) => serialize_unary_operation(op, serialize_ast_node(expr))
    JaktTuple(vals) => {
        mut builder = StringBuilder::create()
        builder.append_string("(")
        for i in 0..vals.size() {
            if i != 0 {
                builder.append_string(", ")
            }
            builder.append_string(serialize_ast_node(vals[i]))
        }
        builder.append_string(")")
        yield builder.to_string()
    }
    Range(from, to) => {
        mut from_output = ""
        if from.has_value() {
            from_output = serialize_ast_node(from!)
        }

        mut to_output = ""
        if to.has_value() {
            to_output = serialize_ast_node(to!)
        }

        yield format("{}..{}", from_output, to_output)
    }
    JaktArray(vals) => {
        mut builder = StringBuilder::create()
        builder.append_string("[")
        for i in 0..vals.size() {
            if i != 0 {
                builder.append_string(", ")
            }
            builder.append_string(serialize_ast_node(vals[i]))
        }
        builder.append_string("]")
        yield builder.to_string()
    }
    JaktSet(vals) => {
        mut builder = StringBuilder::create()
        builder.append_string("{")
        for i in 0..vals.size() {
            if i != 0 {
                builder.append_string(", ")
            }
            builder.append_string(serialize_ast_node(vals[i]))
        }
        builder.append_string("}")
        yield builder.to_string()
    }
    JaktDictionary(vals) => {
        mut builder = StringBuilder::create()
        builder.append_string("[")
        for i in 0..vals.size() {
            if i != 0 {
                builder.append_string(", ")
            }
            let val = vals[i]
            builder.append_string(serialize_ast_node(val.0))
            builder.append_string(": ")
            builder.append_string(serialize_ast_node(val.1))
        }
        builder.append_string("]")
        yield builder.to_string()
    }
    IndexedExpression(expr, index) => format("{}[{}]", serialize_ast_node(expr), serialize_ast_node(index))
    IndexedDictionary(expr, index) => format("{}[{}]", serialize_ast_node(expr), serialize_ast_node(index))
    IndexedTuple(expr, index) 
    | IndexedStruct(expr, index) => format("{}.{}", serialize_ast_node(expr), index)
    NamespacedVar(namespaces, var) => {
        mut builder = StringBuilder::create()
        for namespace_ in namespaces {
            builder.append_string(namespace_.name)
            builder.append_string("::")
        }
        builder.append_string(var.name)
        yield builder.to_string()
    }
    Var(var) => var.name
    OptionalNone => "None"
    OptionalSome(expr) => format("Some({})", serialize_ast_node(expr))
    ForcedUnwrap(expr) => format("{}!", serialize_ast_node(expr))
    Call(call) => {
        mut builder = StringBuilder::create()

        for namespace_ in call.namespace_ {
            builder.append_string(namespace_.name)
            builder.append_string("::")
        }
        builder.append_string(call.name)
        builder.append_string("(")
        for i in 0..call.args.size() {
            if i != 0 {
                builder.append_string(", ")
            }
            let arg = call.args[i]
            if not arg.0.is_empty() {
                builder.append_string(arg.0)
                builder.append_string(": ")
            }
            builder.append_string(serialize_ast_node(arg.1))
        }
        builder.append_string(")")
        yield builder.to_string()
    }
    Garbage => "<Garbage>"
    else => "<Unimplemented>"
}

struct REPL {
    compiler: Compiler
    typechecker: Typechecker
    root_scope_id: ScopeId
    root_interpreter_scope: InterpreterScope
    file_id: FileId

    function create(runtime_path: Path, target_triple: String? = None) throws -> REPL {
        mut compiler = Compiler(
            files: []
            file_ids: [:]
            errors: []
            current_file: None
            current_file_contents: []
            dump_lexer: false
            dump_parser: false
            ignore_parser_errors: false
            debug_print: false
            std_include_path: runtime_path
            include_paths: []
            json_errors: false
            dump_type_hints: false
            dump_try_hints: false
            optimize: false
            target_triple
        )

        compiler.load_prelude()
        let file_id = compiler.get_file_id_or_register(file: Path::from_string("<repl>"))

        let placeholder_module_id = ModuleId(id: 0)

        mut typechecker = Typechecker(
            compiler
            program: CheckedProgram(compiler, modules: [], loaded_modules: [:]),
            current_module_id: placeholder_module_id,
            current_struct_type_id: TypeId::none()
            current_function_id: None
            inside_defer: false
            checkidx: 0uz
            ignore_errors: false
            dump_type_hints: compiler.dump_type_hints
            dump_try_hints: compiler.dump_try_hints
            lambda_count: 0
            generic_inferences: GenericInferences(values: [:])
        )

        compiler.current_file = file_id
        typechecker.include_prelude()

        let root_module_name = "<repl>"
        let root_module_id = typechecker.create_module(name: root_module_name, is_root: true)
        typechecker.current_module_id = root_module_id
        typechecker.program.set_loaded_module(
            module_name: root_module_name
            loaded_module: LoadedModule(
                module_id: root_module_id
                file_id: file_id
            )
        )

        let PRELUDE_SCOPE_ID: ScopeId = typechecker.prelude_scope_id()
        let root_scope_id = typechecker.create_scope(parent_scope_id: PRELUDE_SCOPE_ID, can_throw: true,  debug_name: "root")

        let root_interpreter_scope = InterpreterScope::create()

        return REPL(
            compiler
            typechecker
            root_scope_id
            root_interpreter_scope
            file_id
        )
    }

    function handle_possible_error(mut this) throws -> bool {
        .compiler.print_errors()
        let has_error = .compiler.errors.size() > 0
        let arr: [JaktError] = []
        .compiler.errors = arr
        return has_error
    }

    function run(mut this) throws {
        mut editor = Editor::create(prompt: "> ")
        defer editor.destroy()

        loop {
            if not .compiler.errors.is_empty() {
                .compiler.print_errors()
                let arr: [JaktError] = []
                .compiler.errors = arr
            }

            let line_result = try editor.get_line() catch error {
                return
            }

            guard line_result is Line(line) else {
                break
            }

            if line == ".exit\n" {
                break
            }

            mut pos: usize = 0
            mut bytes_: [u8] = []
            bytes_.ensure_capacity(line.length())
            while pos < line.length() {
                bytes_.push(line.byte_at(pos)) 
                ++pos
            }

            .compiler.current_file = .file_id
            .compiler.current_file_contents = bytes_

            let tokens = try Lexer::lex(compiler: .compiler) catch {
                continue
            }

            if tokens.is_empty() {
                continue
            }

            mut parser = Parser(index: 0, tokens, compiler: .compiler)

            let first_token = tokens.first()!
            if first_token is Function
                or first_token is Comptime
                or first_token is Struct
                or first_token is Class
                or first_token is Enum
                or first_token is Boxed
                or first_token is Namespace
                or first_token is Import
                or first_token is Trait {

                let parsed_namespace = try parser.parse_namespace() catch {
                    .handle_possible_error()
                    continue
                }

                if .handle_possible_error() {
                    continue
                }

                try .typechecker.typecheck_module(parsed_namespace, scope_id: .root_scope_id) catch {
                    .handle_possible_error()
                    continue
                }

                .handle_possible_error()

                continue
            }

            let parsed_statement = try parser.parse_statement(inside_block: true) catch {
                .handle_possible_error()
                continue
            }

            if .handle_possible_error() {
                continue
            }

            let checked_statement = try .typechecker.typecheck_statement(statement: parsed_statement, scope_id: .root_scope_id, safety_mode: SafetyMode::Safe) catch {
                .handle_possible_error()
                continue
            }

            if .handle_possible_error() {
                continue
            }

            mut interpreter = Interpreter::create(
                compiler: .compiler,
                program: .typechecker.program,
                spans: []
            )

            let result = try interpreter.execute_statement(
                statement: checked_statement
                scope: .root_interpreter_scope
                call_span: Span(
                    file_id: .file_id
                    start: 0
                    end: line.length()
                )
            ) catch {
                .handle_possible_error()
                continue
            }

            if .handle_possible_error() {
                continue
            }

            match result {
                Return(value) | JustValue(value) | Throw(value) => {
                    if value.impl is Void {
                        continue
                    }
                }
                Break | Continue | Yield => {}
            }

            let output = match result {
                Return(value) | JustValue(value) => serialize_ast_node(value_to_checked_expression(value, interpreter)),
                Throw(value) => "throw " + serialize_ast_node(value_to_checked_expression(value, interpreter))
                Break | Continue | Yield => {
                    continue
                }
            }
            println("= {}", output)
        }
    }
}
