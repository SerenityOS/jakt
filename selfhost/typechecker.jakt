import lexer { JaktError, Span }
import parser { BinaryOperator, DefinitionLinkage, DefinitionType, ParsedExpression, ParsedCall }
import utility { panic, todo }

struct ModuleId {
    id: usize
}

struct VarId {
    module: ModuleId
    id: usize
}

struct FunctionId {
    module: ModuleId
    id: usize
}

struct StructId {
    module: ModuleId
    id: usize
}

struct EnumId {
    module: ModuleId
    id: usize
}

struct TypeId {
    module: ModuleId
    id: usize

    function equal(this, anon rhs: TypeId) -> bool {
        return this.module.id == rhs.module.id and this.id == rhs.id
    }
}

struct InferenceId {
    module: ModuleId
    id: usize
}

struct ScopeId {
    module: ModuleId
    id: usize
}

enum BuiltinType: usize {
    Void = 0
    Bool = 1
    U8 = 2
    U16 = 3
    U32 = 4
    U64 = 5
    I8 = 6
    I16 = 7
    I32 = 8
    I64 = 9
    F32 = 10
    F64 = 11
    Usize = 12
    String = 13
    CChar = 14
    CString = 15
    CInt = 16
}

boxed enum Type {
    Void
    Bool
    U8
    U16
    U32
    U64
    I8
    I16
    I32
    I64
    F32
    F64
    Usize
    JaktString
    CChar
    CInt
    CString
    TypeVariable(String)
    GenericInstance(id: StructId, args: [TypeId])
    GenericEnumInstance(id: EnumId, args: [TypeId])
    Struct(StructId)
    Enum(EnumId)
    Inference(InferenceId)
    RawPtr(TypeId)
}

struct Scope {
    namespace_name: String?
    vars: [String: VarId]
    structs: [String: StructId]
    functions: [String: FunctionId]
    enums: [String: EnumId]
    types: [String: TypeId]
    parent: ScopeId
    children: [ScopeId]
    throws: bool
}

struct Module {
    id: ModuleId
    name: String
    functions: [CheckedFunction]
    structures: [CheckedStruct]
    enums: [CheckedEnum]
    scopes: [Scope]
    types: [Type]
    variables: [CheckedVarDecl]
    imports: [ModuleId]

    is_root: bool
}

struct CheckedNamespace {
    name: String
    scope: ScopeId
}

struct CheckedFunction {
    name: String
    return_type_id: TypeId
    params: [CheckedParameter]
    block: CheckedBlock
}

struct CheckedParameter {
    requires_label: bool
    variable: CheckedVariable
}

struct CheckedVariable {
    var_id: VarId
    definition_span: Span
}

struct CheckedVarDecl {
    name: String
    var_type_id: TypeId
    is_mutable: bool
    span: Span
}

struct CheckedBlock {
    statements: [CheckedStatement]
    definitely_returns: bool
}

struct CheckedStruct {
    name: String
    name_span: Span
    generic_parameters: [TypeId]
    fields: [VarId]
    scope_id: ScopeId
    definition_linkage: DefinitionLinkage
    definition_type: DefinitionType
    type_id: TypeId
}

struct CheckedEnum {
    name: String
    name_span: Span
    generic_parameters: [TypeId]
    variants: [CheckedEnumVariant]
    scope_id: ScopeId
    definition_linkage: DefinitionLinkage
    definition_type: DefinitionType
    underlying_type_id: TypeId
    type_id: TypeId
}

enum CheckedEnumVariant {
    Untyped(name: String, span: Span)
    Typed(name: String, type_id: TypeId, span: Span)
    WithValue(name: String, expr: CheckedExpression, span: Span)
    StructLike(name: String, fields: [VarId], span: Span)
}

boxed enum CheckedStatement {
    Expression(CheckedExpression)
    Defer(CheckedStatement)
    VarDecl(var_id: VarId, init: CheckedExpression)
    If(guard: CheckedExpression, then_block: CheckedBlock, else_block: CheckedBlock?)
    Block(CheckedBlock)
    Loop(CheckedBlock)
    While(guard: CheckedExpression, block: CheckedBlock)
    Return(CheckedExpression)
    Break
    Continue
    Throw(CheckedExpression)
    Garbage
}

enum CheckedNumericConstant {
    I8(i8)
    I16(i16)
    I32(i32)
    I64(i64)
    U8(u8)
    U16(u16)
    U32(u32)
    U64(u64)
    USize(u64)
    F32(f32)
    F64(f64)
}

enum CheckedTypeCast {
    Fallible(TypeId)
    Infallible(TypeId)
}

enum CheckedUnaryOperator {
    PreIncrement
    PostIncrement
    PreDecrement
    PostDecrement
    Negate
    Dereference
    RawAddress
    LogicalNot
    BitwiseNot
    TypeCast(CheckedTypeCast)
    Is(TypeId)
    IsEnumVariant(String)
}

boxed enum CheckedExpression {
    Boolean(val: bool, span: Span)
    NumericConstant(val: CheckedNumericConstant, span: Span, type_id: TypeId)
    QuotedString(val: String, span: Span)
    ByteConstant(val: String, span: Span)
    CharacterConstant(val: String, span: Span)
    UnaryOp(expr: CheckedExpression, op: CheckedUnaryOperator, span: Span, type_id: TypeId)
    BinaryOp(lhs: CheckedExpression, op: BinaryOperator, rhs: CheckedExpression, span: Span, type_id: TypeId)
    JaktTuple(vals: [CheckedExpression], span: Span, type_id: TypeId)
    Range(from: CheckedExpression, to: CheckedExpression, span: Span, type_id: TypeId)
    JaktArray(vals: [CheckedExpression], repeat: CheckedExpression?, span: Span, type_id: TypeId)
    JaktDictionary(vals: [(CheckedExpression, CheckedExpression)], span: Span, type_id: TypeId)
    JaktSet(vals: [CheckedExpression], span: Span, type_id: TypeId)
    IndexedExpression(expr: CheckedExpression, index: CheckedExpression, span: Span, type_id: TypeId)
    IndexedDictionary(expr: CheckedExpression, index: CheckedExpression, span: Span, type_id: TypeId)
    IndexedTuple(expr: CheckedExpression, index: usize, span: Span, type_id: TypeId)
    IndexedStruct(expr: CheckedExpression, index: String, span: Span, type_id: TypeId)
    Call(call: CheckedCall, span: Span, type_id: TypeId)
}

// FIXME: not a method because of https://github.com/SerenityOS/jakt/issues/527
function expression_type(anon expr: CheckedExpression) -> TypeId => match expr {
    Boolean(val, span) => builtin(BuiltinType::Bool)
    NumericConstant(val, span, type_id) => type_id
    QuotedString(val, span) => builtin(BuiltinType::String)
    ByteConstant(val, span) => builtin(BuiltinType::U8)
    CharacterConstant(val, span) => builtin(BuiltinType::CChar)
    UnaryOp(expr, op, span, type_id) => type_id
    BinaryOp(lhs, op, rhs, span, type_id) => type_id
    JaktTuple(vals, span, type_id) => type_id
    Range(from, to, span, type_id) => type_id
    JaktArray(vals, repeat, span, type_id) => type_id
    JaktDictionary(vals, span, type_id) => type_id
    JaktSet(vals, span, type_id) => type_id
    IndexedExpression(expr, index, span, type_id) => type_id
    IndexedDictionary(expr, index, span, type_id) => type_id
    IndexedTuple(expr, index, span, type_id) => type_id
    IndexedStruct(expr, index, span, type_id) => type_id
    Call(call, span, type_id) => type_id
}

// FIXME: not a method because of https://github.com/SerenityOS/jakt/issues/527
function expression_span(anon expr: CheckedExpression) -> Span => match expr {
    Boolean(val, span) => span
    NumericConstant(val, span, type_id) => span
    QuotedString(val, span) => span
    ByteConstant(val, span) => span
    CharacterConstant(val, span) => span
    UnaryOp(expr, op, span, type_id) => span
    BinaryOp(lhs, op, rhs, span, type_id) => span
    JaktTuple(vals, span, type_id) => span
    Range(from, to, span, type_id) => span
    JaktArray(vals, repeat, span, type_id) => span
    JaktDictionary(vals, span, type_id) => span
    JaktSet(vals, span, type_id) => span
    IndexedExpression(expr, index, span, type_id) => span
    IndexedDictionary(expr, index, span, type_id) => span
    IndexedTuple(expr, index, span, type_id) => span
    IndexedStruct(expr, index, span, type_id) => span
    Call(call, span, type_id) => span
}

struct CheckedCall {
    name: String,
    args: [(String, CheckedExpression)]
    return_type: TypeId
}


function builtin(anon builtin: BuiltinType) -> TypeId {
    return TypeId(module: ModuleId(id: 0), id: builtin as! usize)
}

struct Typechecker {
    modules: [Module]
    inferences: [TypeId]
    current_module: ModuleId
    errors: [JaktError]

    function get_function(this, anon id: FunctionId) -> CheckedFunction => .modules[id.module.id].functions[id.id]
    function get_variable(this, anon id: VarId) -> CheckedVarDecl => .modules[id.module.id].variables[id.id]
    function get_type(this, anon id: TypeId) -> Type => .modules[id.module.id].types[id.id]
    function get_enum(this, anon id: EnumId) -> CheckedEnum => .modules[id.module.id].enums[id.id]
    function get_struct(this, anon id: EnumId) -> CheckedStruct => .modules[id.module.id].structures[id.id]

    function error(mut this, anon message: String, anon span: Span) throws {
        .errors.push(JaktError::Message(message, span))
    }

    function error_with_hint(mut this, anon message: String, anon span: Span, anon hint: String, anon hint_span: Span) throws {
        .errors.push(JaktError::MessageWithHint(message, span, hint, hint_span))
    }

    function is_integer(this, anon type_id: TypeId) -> bool {
        let type = .get_type(type_id)

        return match type {
            I8 | I16 | I32 | I64 | U8 | U16 | U32 | U64 | Usize | CInt | CChar => true
            else => false
        }
    }

    function try_to_promote_constant_expr_to_type(mut this, lhs_type: TypeId, checked_rhs: mut CheckedExpression, span: Span) throws {
        if not .is_integer(lhs_type) {
            // TODO
        }
    }

    function typename(this, anon type_id: TypeId) throws -> String {
        let type = .get_type(type_id)

        return match type {
            Void => "void"
            I8 => "i8"
            I16 => "i16"
            I32 => "i32"
            I64 => "i64"
            U8 => "u8"
            U16 => "u16"
            U32 => "u32"
            U64 => "u64"
            F32 => "f32"
            F64 => "f64"
            Usize => "usize"
            CChar => "c_char"
            CInt => "c_int"
            Bool => "bool"
            else => match type {
                Enum(id) => .get_enum(id).name
                Struct(id) => .get_struct(id).name
                GenericEnumInstance(id, args) => {
                    mut output = format("enum {}", .get_enum(id).name)

                    output += "<"
                    mut first = true
                    for arg in args.iterator() {
                        if not first {
                            output += ", "
                        } else {
                            first = false
                        }

                        output += .typename(arg)
                    }

                    output += ">"

                    yield output
                }
                else => "TODO"
            }
        }
    }

    function unify(mut this, lhs: TypeId, lhs_span: Span, rhs: TypeId, rhs_span: Span) throws {
        // FIXME: Add more unification logic
        if lhs.id != rhs.id {
            .error("types incompatible ", rhs_span)
        }
    }

    function typecheck_binary_operation(mut this, checked_lhs: CheckedExpression, op: BinaryOperator, checked_rhs: CheckedExpression, scope_id: ScopeId, span: Span) throws -> TypeId {
        let lhs_type_id = expression_type(checked_lhs)
        let rhs_type_id = expression_type(checked_rhs)

        let lhs_span = expression_span(checked_lhs)
        let rhs_span = expression_span(checked_rhs)

        mut type_id = expression_type(checked_lhs)

        match op {
            LessThan | LessThanOrEqual | GreaterThan | GreaterThanOrEqual | Equal | NotEqual => {
                if not lhs_type_id.equal(rhs_type_id) {
                    .error(format("Binary comparison between incompatible types ({} vs {})", .typename(lhs_type_id), .typename(rhs_type_id)), span)
                }

                type_id = builtin(BuiltinType::Bool)
            }
            LogicalAnd | LogicalOr => {
                if not lhs_type_id.equal(builtin(BuiltinType::Bool)) {
                    .error("left side of logical binary operation is not a boolean", lhs_span)
                }

                if not rhs_type_id.equal(builtin(BuiltinType::Bool)) {
                    .error("right side of logical binary operation is not a boolean", rhs_span)
                }

                type_id = builtin(BuiltinType::Bool)
            }
            else => {}
        }

        return type_id
    }

    function typecheck_expression(mut this, anon expr: ParsedExpression, scope_id: ScopeId) throws -> CheckedExpression => match expr {
        Boolean(val, span) => CheckedExpression::Boolean(val, span)
        NumericConstant(val, span) => {
            // FIXME: better constant support
            yield CheckedExpression::NumericConstant(val: CheckedNumericConstant::I64(val), span, type_id: builtin(BuiltinType::I64))
        }
        QuotedString(val, span) => CheckedExpression::QuotedString(val, span)
        Call(call, span) => .typecheck_call(call, scope_id, span)
        Range(from, to, span) => {
            let checked_from = .typecheck_expression(from, scope_id)
            let checked_to = .typecheck_expression(to, scope_id)

            let from_type = expression_type(checked_from)
            let to_type = expression_type(checked_to)

            let from_span = expression_span(checked_from)
            let to_span = expression_span(checked_to)

            .unify(lhs: from_type, lhs_span: from_span, rhs: to_type, rhs_span: from_span)

            yield CheckedExpression::Range(from: checked_from, to: checked_to, span, type_id: from_type)
        }
        BinaryOp(lhs, op, rhs, span) => {
            let checked_lhs = .typecheck_expression(lhs, scope_id)
            mut checked_rhs = .typecheck_expression(rhs, scope_id)

            let lhs_type = expression_type(checked_lhs)

            .try_to_promote_constant_expr_to_type(lhs_type, checked_rhs, span)

            let output_type = .typecheck_binary_operation(checked_lhs, op, checked_rhs, scope_id, span)

            yield CheckedExpression::BinaryOp(lhs: checked_lhs, op, rhs: checked_rhs, span, type_id: output_type)
        }
        else => {
            panic("not complete")

            yield CheckedExpression::Boolean(val: false, span: Span(start: 0, end: 0))
        }
    }

    function typecheck_call(mut this, call: ParsedCall, scope_id: ScopeId, span: Span) throws -> CheckedExpression {
        mut args: [(String, CheckedExpression)] = []
        mut return_type = builtin(BuiltinType::Void)

        match call.name {
            "print" | "println" | "eprintln" | "format" => {
                for arg in call.args.iterator() {
                    let checked_arg = .typecheck_expression(expr: arg.1, scope_id)

                    args.push((call.name, checked_arg))
                }
            }
            else => {

            }
        }

        return CheckedExpression::Call(call: CheckedCall(name: call.name, args, return_type), span, type_id: return_type)
    }
}
