import error { JaktError }
import parser { BinaryOperator, DefinitionLinkage, FunctionLinkage,
                DefinitionType, ParsedExpression, ParsedCall,
                ParsedType, ParsedNamespace, RecordType }
import utility { panic, todo, Span }

struct ModuleId {
    id: usize
}

struct VarId {
    module: ModuleId
    id: usize
}

struct FunctionId {
    module: ModuleId
    id: usize
}

struct StructId {
    module: ModuleId
    id: usize

    function equals(this, anon rhs: StructId) -> bool {
        return this.module.id == rhs.module.id and this.id == rhs.id
    }
}

struct EnumId {
    module: ModuleId
    id: usize
}

struct TypeId {
    module: ModuleId
    id: usize

    function equals(this, anon rhs: TypeId) -> bool {
        return this.module.id == rhs.module.id and this.id == rhs.id
    }
}

struct InferenceId {
    id: usize
}

struct ScopeId {
    module: ModuleId
    id: usize
}

enum BuiltinType: usize {
    Void = 0
    Bool = 1
    U8 = 2
    U16 = 3
    U32 = 4
    U64 = 5
    I8 = 6
    I16 = 7
    I32 = 8
    I64 = 9
    F32 = 10
    F64 = 11
    Usize = 12
    String = 13
    CChar = 14
    CString = 15
    CInt = 16
}

boxed enum Type {
    Void
    Bool
    U8
    U16
    U32
    U64
    I8
    I16
    I32
    I64
    F32
    F64
    Usize
    JaktString
    CChar
    CInt
    CString
    TypeVariable(String)
    GenericInstance(id: StructId, args: [TypeId])
    GenericEnumInstance(id: EnumId, args: [TypeId])
    Struct(StructId)
    Enum(EnumId)
    Inference(InferenceId)
    RawPtr(TypeId)

    function equals(this, anon rhs: Type) -> bool {
        if this is Void and rhs is Void {
            return true
        } else if this is Bool and rhs is Bool {
            return true
        } else {
            return false
        }
    }
}

struct Scope {
    namespace_name: String?
    vars: [String: VarId]
    structs: [String: StructId]
    functions: [String: FunctionId]
    enums: [String: EnumId]
    types: [String: TypeId]
    imports: [String: (ModuleId, Span)]
    parent: ScopeId?
    children: [ScopeId]
    can_throw: bool
}

struct Module {
    id: ModuleId
    name: String
    functions: [CheckedFunction]
    structures: [CheckedStruct]
    enums: [CheckedEnum]
    scopes: [Scope]
    types: [Type]
    variables: [CheckedVarDecl]
    imports: [ModuleId]

    is_root: bool

    function new_type_variable(mut this) throws -> TypeId {
        let new_id = .types.size()

        .types.push(Type::TypeVariable(format("T{}", new_id)))

        return TypeId(module: .id, id: new_id)
    }
}

struct CheckedNamespace {
    name: String
    scope: ScopeId
}

struct CheckedFunction {
    name: String
    return_type_id: TypeId
    params: [CheckedParameter]
    block: CheckedBlock
    can_throw: bool
    linkage: FunctionLinkage

    // FIXME: This should return false if the first parameter is "this" or "mut this"
    function is_static(this) => true

    // FIXME: This should return true if the first parameter is "mut this"
    function is_mutating(this) => true
}

struct CheckedParameter {
    requires_label: bool
    variable: CheckedVariable
}

struct CheckedVariable {
    id: VarId
    definition_span: Span
}

struct CheckedVarDecl {
    name: String
    is_mutable: bool
    span: Span
    type_id: TypeId
}

struct CheckedBlock {
    statements: [CheckedStatement]
    definitely_returns: bool
}

struct CheckedStruct {
    name: String
    name_span: Span
    generic_parameters: [TypeId]
    fields: [VarId]
    scope_id: ScopeId
    definition_linkage: DefinitionLinkage
    record_type: RecordType
    type_id: TypeId
}

struct CheckedEnum {
    name: String
    name_span: Span
    generic_parameters: [TypeId]
    variants: [CheckedEnumVariant]
    scope_id: ScopeId
    definition_linkage: DefinitionLinkage
    record_type: RecordType
    underlying_type_id: TypeId
    type_id: TypeId
}

enum CheckedEnumVariant {
    Untyped(name: String, span: Span)
    Typed(name: String, type_id: TypeId, span: Span)
    WithValue(name: String, expr: CheckedExpression, span: Span)
    StructLike(name: String, fields: [VarId], span: Span)
}

boxed enum CheckedStatement {
    Expression(CheckedExpression)
    Defer(CheckedStatement)
    VarDecl(var_id: VarId, init: CheckedExpression)
    If(guard: CheckedExpression, then_block: CheckedBlock, else_block: CheckedBlock?)
    Block(CheckedBlock)
    Loop(CheckedBlock)
    While(guard: CheckedExpression, block: CheckedBlock)
    Return(CheckedExpression)
    Break
    Continue
    Throw(CheckedExpression)
    Garbage
}

enum CheckedNumericConstant {
    I8(i8)
    I16(i16)
    I32(i32)
    I64(i64)
    U8(u8)
    U16(u16)
    U32(u32)
    U64(u64)
    USize(u64)
    F32(f32)
    F64(f64)
}

enum CheckedTypeCast {
    Fallible(TypeId)
    Infallible(TypeId)
}

enum CheckedUnaryOperator {
    PreIncrement
    PostIncrement
    PreDecrement
    PostDecrement
    Negate
    Dereference
    RawAddress
    LogicalNot
    BitwiseNot
    TypeCast(CheckedTypeCast)
    Is(TypeId)
    IsEnumVariant(String)
}

boxed enum CheckedExpression {
    Boolean(val: bool, span: Span)
    NumericConstant(val: CheckedNumericConstant, span: Span, type_id: TypeId)
    QuotedString(val: String, span: Span)
    ByteConstant(val: String, span: Span)
    CharacterConstant(val: String, span: Span)
    UnaryOp(expr: CheckedExpression, op: CheckedUnaryOperator, span: Span, type_id: TypeId)
    BinaryOp(lhs: CheckedExpression, op: BinaryOperator, rhs: CheckedExpression, span: Span, type_id: TypeId)
    JaktTuple(vals: [CheckedExpression], span: Span, type_id: TypeId)
    Range(from: CheckedExpression, to: CheckedExpression, span: Span, type_id: TypeId)
    JaktArray(vals: [CheckedExpression], repeat: CheckedExpression?, span: Span, type_id: TypeId)
    JaktDictionary(vals: [(CheckedExpression, CheckedExpression)], span: Span, type_id: TypeId)
    JaktSet(vals: [CheckedExpression], span: Span, type_id: TypeId)
    IndexedExpression(expr: CheckedExpression, index: CheckedExpression, span: Span, type_id: TypeId)
    IndexedDictionary(expr: CheckedExpression, index: CheckedExpression, span: Span, type_id: TypeId)
    IndexedTuple(expr: CheckedExpression, index: usize, span: Span, type_id: TypeId)
    IndexedStruct(expr: CheckedExpression, index: String, span: Span, type_id: TypeId)
    Call(call: CheckedCall, span: Span, type_id: TypeId)
    MethodCall(expr: CheckedExpression, call: CheckedCall, span: Span, type_id: TypeId)
    NamespacedVar(namespaces: [CheckedNamespace], var: CheckedVariable, span: Span)
    Var(var: CheckedVariable, span: Span)
    OptionalNone(span: Span, type_id: TypeId)
    OptionalSome(expr: CheckedExpression, span: Span, type_id: TypeId)
    ForcedUnwrap(expr: CheckedExpression, span: Span, type_id: TypeId)
    Block(block: CheckedBlock, span: Span, type_id: TypeId)
    Garbage(Span)
}

struct ResolvedNamespace {
    name: String
    generic_parameters: [TypeId]?
}

struct CheckedCall {
    namespace_: [ResolvedNamespace]
    name: String,
    args: [(String, CheckedExpression)]
    function_id: FunctionId?
    return_type: TypeId
    callee_throws: bool
}


function builtin(anon builtin: BuiltinType) -> TypeId {
    return TypeId(module: ModuleId(id: 0), id: builtin as! usize)
}

// This is the "result" object produced by type-checking.
class CheckedProgram {
    public modules: [Module]

    public function get_module(this, anon id: ModuleId) -> Module => .modules[id.id]
    public function get_function(this, anon id: FunctionId) -> CheckedFunction => .modules[id.module.id].functions[id.id]
    public function get_variable(this, anon id: VarId) -> CheckedVarDecl => .modules[id.module.id].variables[id.id]
    public function get_type(this, anon id: TypeId) -> Type => .modules[id.module.id].types[id.id]
    public function get_enum(this, anon id: EnumId) -> CheckedEnum => .modules[id.module.id].enums[id.id]
    public function get_struct(this, anon id: StructId) -> CheckedStruct => .modules[id.module.id].structures[id.id]
    public function get_scope(this, anon id: ScopeId) -> Scope => .modules[id.module.id].scopes[id.id]

    public function is_integer(this, anon type_id: TypeId) -> bool {
        let type = .get_type(type_id)

        return match type {
            I8 | I16 | I32 | I64 | U8 | U16 | U32 | U64 | Usize | CInt | CChar => true
            else => false
        }
    }
}

struct Typechecker {
    program: CheckedProgram
    inferences: [TypeId]
    current_module: ModuleId
    errors: [JaktError]

    function get_function(this, anon id: FunctionId) => .program.get_function(id)
    function get_variable(this, anon id: VarId) => .program.get_variable(id)
    function get_type(this, anon id: TypeId) => .program.get_type(id)
    function get_enum(this, anon id: EnumId) => .program.get_enum(id)
    function get_struct(this, anon id: StructId) => .program.get_struct(id)
    function get_scope(this, anon id: ScopeId) => .program.get_scope(id)

    function error(mut this, anon message: String, anon span: Span) throws {
        .errors.push(JaktError::Message(message, span))
    }

    function error_with_hint(mut this, anon message: String, anon span: Span, anon hint: String, anon hint_span: Span) throws {
        .errors.push(JaktError::MessageWithHint(message, span, hint, hint_span))
    }

    function is_integer(this, anon type_id: TypeId) => .program.is_integer(type_id)

    function create_scope(mut this, parent_id: ScopeId, can_throw: bool) throws -> ScopeId {
        let scope = Scope(
            namespace_name: ""
            vars: [:]
            structs: [:]
            functions: [:]
            enums: [:]
            types: [:]
            imports: [:]
            parent: parent_id
            children: []
            can_throw
        )

        .program.modules[.current_module.id].scopes.push(scope)

        return ScopeId(module: .current_module, id: .program.modules[.current_module.id].scopes.size() - 1)
    }

    function new_inference(mut this) throws -> TypeId {
        let new_type_var = .program.modules[.current_module.id].new_type_variable()

        .inferences.push(new_type_var)

        let inference_id = .inferences.size() - 1

        .program.modules[.current_module.id].types.push(Type::Inference(InferenceId(id: inference_id)))

        let new_type_id = .program.modules[.current_module.id].types.size() - 1

        return TypeId(module: .current_module, id: new_type_id)
    }

    function find_struct_in_prelude(this, anon name: String) throws -> StructId {
        // start at the prelude scope id
        for entry in .get_scope(ScopeId(module: ModuleId(id: 0), id: 0)).structs.iterator() {
            if entry.0 == name {
                return entry.1
            }
        }
        panic(format("internal error: {} builtin definition not found" name))
        return StructId(module: ModuleId(id: 0), id: 0)
    }

    function try_to_promote_constant_expr_to_type(mut this, lhs_type: TypeId, mut checked_rhs: CheckedExpression, span: Span) throws {
        if not .is_integer(lhs_type) {
            // TODO
        }
    }

    function type_name(this, anon type_id: TypeId) throws -> String {
        let type = .get_type(type_id)

        return match type {
            Void => "void"
            I8 => "i8"
            I16 => "i16"
            I32 => "i32"
            I64 => "i64"
            U8 => "u8"
            U16 => "u16"
            U32 => "u32"
            U64 => "u64"
            F32 => "f32"
            F64 => "f64"
            Usize => "usize"
            CChar => "c_char"
            CInt => "c_int"
            Bool => "bool"
            else => match type {
                Enum(id) => .get_enum(id).name
                Struct(id) => .get_struct(id).name
                GenericEnumInstance(id, args) => {
                    mut output = format("enum {}", .get_enum(id).name)

                    output += "<"
                    mut first = true
                    for arg in args.iterator() {
                        if not first {
                            output += ", "
                        } else {
                            first = false
                        }

                        output += .type_name(arg)
                    }

                    output += ">"

                    yield output
                }
                else => "TODO"
            }
        }
    }

    function expression_type(this, anon expr: CheckedExpression) -> TypeId => match expr {
        Boolean => builtin(BuiltinType::Bool)
        NumericConstant(type_id) => type_id
        QuotedString => builtin(BuiltinType::String)
        ByteConstant => builtin(BuiltinType::U8)
        CharacterConstant => builtin(BuiltinType::CChar)
        UnaryOp(type_id) => type_id
        BinaryOp(type_id) => type_id
        JaktTuple(type_id) => type_id
        Range(type_id) => type_id
        JaktArray(type_id) => type_id
        JaktDictionary(type_id) => type_id
        JaktSet(type_id) => type_id
        IndexedExpression(type_id) => type_id
        IndexedDictionary(type_id) => type_id
        IndexedTuple(type_id) => type_id
        IndexedStruct(type_id) => type_id
        Call(type_id) => type_id
        MethodCall(type_id) => type_id
        NamespacedVar(var) => .get_variable(var.id).type_id
        Var(var) => .get_variable(var.id).type_id
        OptionalNone(type_id) => type_id
        OptionalSome(type_id) => type_id
        ForcedUnwrap(type_id) => type_id
        Block(type_id) => type_id
        Garbage => builtin(BuiltinType::Void)
    }

    // FIXME: not a method of expression because of https://github.com/SerenityOS/jakt/issues/527
    function expression_span(this, anon expr: CheckedExpression) -> Span => match expr {
        Boolean(span) => span
        NumericConstant(span) => span
        QuotedString(span) => span
        ByteConstant(span) => span
        CharacterConstant(span) => span
        UnaryOp(span) => span
        BinaryOp(span) => span
        JaktTuple(span) => span
        Range(span) => span
        JaktArray(span) => span
        JaktDictionary(span) => span
        JaktSet(span) => span
        IndexedExpression(span) => span
        IndexedDictionary(span) => span
        IndexedTuple(span) => span
        IndexedStruct(span) => span
        Call(span) => span
        MethodCall(span) => span
        NamespacedVar(span) => span
        Var(span) => span
        OptionalNone(span) => span
        OptionalSome(span) => span
        ForcedUnwrap(span) => span
        Block(span) => span
        Garbage(span) => span
    }

    function expression_is_mutable(this, anon expr: CheckedExpression) -> bool => match expr {
        Var(var) => .get_variable(var.id).is_mutable
        IndexedStruct(expr) => .expression_is_mutable(expr)
        IndexedExpression(expr) => .expression_is_mutable(expr)
        IndexedTuple(expr) => .expression_is_mutable(expr)
        IndexedDictionary(expr) => .expression_is_mutable(expr)
        ForcedUnwrap(expr) => .expression_is_mutable(expr)
        else => false
    }

    function unify(mut this, lhs: TypeId, lhs_span: Span, rhs: TypeId, rhs_span: Span) throws -> (TypeId, bool) {
        // FIXME: Add more unification logic
        if lhs.id != rhs.id {
            .error("types incompatible ", rhs_span)
            return (lhs, true)
        } else {
            return (lhs, false)
        }
    }

    function find_or_add_type_id(mut this, anon type: Type) throws -> TypeId {
        let module = .program.modules[.current_module.id]
        let module_id = module.id

        mut idx = 0uz
        for item in module.types.iterator() {
            if item.equals(type) {
                return TypeId(module: module_id, id: idx)
            }
            ++idx
        }

        idx = 0uz
        for item in .program.modules[0].types.iterator() {
            if item.equals(type) {
                return TypeId(module: .program.modules[0].id, id: idx)
            }
            ++idx
        }

        .program.modules[.current_module.id].types.push(type)

        return TypeId(module: module_id, id: .program.modules[.current_module.id].types.size() - 1)
    }

    function find_type_in_scope(this, scope_id: ScopeId, name: String) -> TypeId? {
        mut current = scope_id

        loop {
            let scope = .get_scope(current)

            for type in scope.types.iterator() {
                if type.0 == name {
                    return type.1
                }
            }

            if scope.parent.has_value() {
                current = scope.parent.value()
            } else {
                break
            }
        }

        return None
    }

    function find_namespace_in_scope(this, scope_id: ScopeId, name: String) -> ScopeId? {
        mut current = scope_id;

        loop {
            let scope = .get_scope(current)

            for child in scope.children.iterator() {
                let child_scope = .get_scope(child)
                if child_scope.namespace_name.has_value() {
                    if name == child_scope.namespace_name.value() {
                        return current
                    }
                }
            }

            if scope.parent.has_value() {
                current = scope.parent.value()
            } else {
                break
            }
        }

        // if we do not find it then check imports
        let module_id = current.module

        for imp in .get_scope(ScopeId(module: module_id, id: 0)).imports.iterator() {
            if name == imp.0 {
                let value = imp.1
                return ScopeId(module: value.0, id: 0)
            }
        }

        return None
    }

    function typecheck_module(mut this, parsed_namespace: ParsedNamespace, scope_id: ScopeId) throws {
        .typecheck_namespace_predecl(parsed_namespace, scope_id)
        .typecheck_namespace_declarations(parsed_namespace, scope_id)
    }

    function typecheck_namespace_predecl(mut this, parsed_namespace: ParsedNamespace, scope_id: ScopeId) throws {
        for fun in parsed_namespace.functions.iterator() {
            //.typecheck_function_predecl(fun, parent_scope_id: scope_id)
        }
    }

    function typecheck_namespace_declarations(mut this, parsed_namespace: ParsedNamespace, scope_id: ScopeId) throws {
        for fun in parsed_namespace.functions.iterator() {
            //.typecheck_function(fun, parent_scope_id: scope_id)
        }
    }

    function typecheck_typename(mut this, parsed_type: ParsedType, scope_id: ScopeId) throws -> TypeId { 
        match parsed_type {
            NamespacedName(name, namespaces, params, span) => {
                mut current_namespace_scope_id = scope_id

                for ns in namespaces.iterator() {
                    let result = .find_namespace_in_scope(scope_id: current_namespace_scope_id, name: ns)

                    if result.has_value() {
                        current_namespace_scope_id = result.value()
                    } else {
                        .error(format("Unknown namespace: '{}'", ns), span)
                        return .new_inference()
                    }
                }

                mut generic_args: [TypeId] = []

                for param in params.iterator() {
                    let checked_arg = .typecheck_typename(parsed_type: param, scope_id)

                    generic_args.push(checked_arg)
                }

                // TODO: add synthetic type_name and generic support

                return .typecheck_typename(parsed_type, scope_id)
            }
            Name(name, span) => {
                return match name {
                    "i8" => builtin(BuiltinType::I8)
                    "i16" => builtin(BuiltinType::I16)
                    "i32" => builtin(BuiltinType::I32)
                    "i64" => builtin(BuiltinType::I64)
                    "u8" => builtin(BuiltinType::U8)
                    "u16" => builtin(BuiltinType::U16)
                    "u32" => builtin(BuiltinType::U32)
                    "u64" => builtin(BuiltinType::U64)
                    "f32" => builtin(BuiltinType::F32)
                    "f64" => builtin(BuiltinType::F64)
                    "c_char" => builtin(BuiltinType::CChar)
                    "c_int" => builtin(BuiltinType::CInt)
                    "usize" => builtin(BuiltinType::Usize)
                    "String" => builtin(BuiltinType::String)
                    "bool" => builtin(BuiltinType::Bool)
                    "void" => builtin(BuiltinType::Void)
                    else => {
                        let type_id = .find_type_in_scope(scope_id, name)

                        if type_id.has_value() {
                            return type_id.value()
                        } else {
                            .error(format("Unknown type ‘{}’", name), span)
                            return .new_inference()
                        }
                    }
                }
            }
            Empty => {
                return .new_inference()
            }
            JaktTuple(types, span) => {
                mut checked_types: [TypeId] = []
                for parsed_type in types.iterator() {
                    checked_types.push(.typecheck_typename(parsed_type, scope_id))
                }
                let tuple_struct_id = .find_struct_in_prelude("Tuple")

                let type_id = .find_or_add_type_id(Type::GenericInstance(id: tuple_struct_id, args: checked_types))

                return type_id
            }
            JaktArray(inner, span) => {
                let inner_type_id = .typecheck_typename(parsed_type: inner, scope_id)

                let array_struct_id = .find_struct_in_prelude("Array")

                let type_id = .find_or_add_type_id(Type::GenericInstance(id: array_struct_id, args: [inner_type_id]))

                return type_id
            }
            Dictionary(key, value, span) => {
                let key_type_id = .typecheck_typename(parsed_type: key, scope_id)
                let value_type_id = .typecheck_typename(parsed_type: value, scope_id)

                let dict_struct_id = .find_struct_in_prelude("Dictionary")

                let type_id = .find_or_add_type_id(Type::GenericInstance(id: dict_struct_id, args: [key_type_id, value_type_id]))

                return type_id
            }
            Set(inner, span) => {
                let inner_type_id = .typecheck_typename(parsed_type: inner, scope_id)

                let set_struct_id = .find_struct_in_prelude("Set")

                let type_id = .find_or_add_type_id(Type::GenericInstance(id: set_struct_id, args: [inner_type_id]))

                return type_id
            }
            Optional(inner, span) => {
                let inner_type_id = .typecheck_typename(parsed_type: inner, scope_id)

                let optional_struct_id = .find_struct_in_prelude("Optional")

                let type_id = .find_or_add_type_id(Type::GenericInstance(id: optional_struct_id, args: [inner_type_id]))

                return type_id
            }
            WeakPtr(inner, span) => {
                let inner_type_id = .typecheck_typename(parsed_type: inner, scope_id)

                let weakptr_struct_id = .find_struct_in_prelude("WeakPtr")

                let type_id = .find_or_add_type_id(Type::GenericInstance(id: weakptr_struct_id, args: [inner_type_id]))

                return type_id
            }
            RawPtr(inner, span) => {
                let inner_type_id = .typecheck_typename(parsed_type: inner, scope_id)

                let type_id = .find_or_add_type_id(Type::RawPtr(id: inner_type_id))

                return type_id
            }
            GenericType(name, generic_parameters, span) => {
                mut checked_inner_types: [TypeId] = []

                for inner_type in generic_parameters.iterator() {
                    let inner_type_id = .typecheck_typename(parsed_type, scope_id)
                    checked_inner_types.push(inner_type_id)
                }
                // FIXME: add support for "GenericResolvedType", though the Rust version
                // puts this in the parser even though it should be in the typechecker
                // as the parser doesn't have a concept of type ids
                return .new_inference()
            }
        }
        // FIXME: This is unreachable but the generated C++ causes a warning.
        panic("should be unreachable")
        return .new_inference()
    }

    function typecheck_binary_operation(mut this, checked_lhs: CheckedExpression, op: BinaryOperator, checked_rhs: CheckedExpression, scope_id: ScopeId, span: Span) throws -> TypeId {
        let lhs_type_id = .expression_type(checked_lhs)
        let rhs_type_id = .expression_type(checked_rhs)

        let lhs_span = .expression_span(checked_lhs)
        let rhs_span = .expression_span(checked_rhs)

        mut type_id = .expression_type(checked_lhs)

        match op {
            NoneCoalescing | NoneCoalescingAssign => {
                // 1. LHS must be Optional<T>.
                // 2. RHS must be Optional<T> or T.
                // 3. Resulting type is Optional<T> or T, respectively.

                // if an assignment, the LHS must be a mutable variable.
                if op is NoneCoalescingAssign {
                    match checked_lhs {
                        Var(var, span) => {
                            if not .get_variable(id: var.id).is_mutable {
                                .error_with_hint(message: "left-hand side of ??= must be a mutable variable", span, hint: "This variable isn't marked as mutable", hint_span: var.definition_span)
                                return .new_inference()
                            }
                        }
                        else => {
                            .error(message: "left-hand side of ??= must be a mutable variable", span)
                            return .new_inference()
                        }
                    }
                }

                match .get_type(lhs_type_id) {
                    GenericInstance(id, args) => {
                        let optional_struct_id = .find_struct_in_prelude("Optional")

                        if id.equals(optional_struct_id) {
                            // Success: LHS is T? and RHS is T?.
                            if lhs_type_id.equals(rhs_type_id) {
                                return lhs_type_id
                            }

                            // Extract T from Optional<T>.
                            let inner_type_id = args[0]

                            if inner_type_id.equals(rhs_type_id) {
                                // Success: LHS is T? and RHS is T.
                                return inner_type_id
                            }
                        } else {
                            .error_with_hint(format(
                                "None coalescing (??) with incompatible types (‘{}’ and ‘{}’)",
                                .type_name(lhs_type_id),
                                .type_name(rhs_type_id),
                            ), span,
                            "Left side of ?? must be an Optional but isn't",
                            lhs_span)
                        }
                    }
                    else => {
                        .error_with_hint(format(
                            "None coalescing (??) with incompatible types (‘{}’ and ‘{}’)",
                            .type_name(lhs_type_id),
                            .type_name(rhs_type_id),
                        ), span,
                        "Left side of ?? must be an Optional but isn't",
                        lhs_span)
                    }
                }

                .error(format(
                    "None coalescing (??) with incompatible types (‘{}’ and ‘{}’)",
                    .type_name(lhs_type_id),
                    .type_name(rhs_type_id),
                ), span)

                return lhs_type_id
            }
            LessThan | LessThanOrEqual | GreaterThan | GreaterThanOrEqual | Equal | NotEqual => {
                if not lhs_type_id.equals(rhs_type_id) {
                    .error(format("Binary comparison between incompatible types ({} vs {})", .type_name(lhs_type_id), .type_name(rhs_type_id)), span)
                }

                type_id = builtin(BuiltinType::Bool)
            }
            LogicalAnd | LogicalOr => {
                if not lhs_type_id.equals(builtin(BuiltinType::Bool)) {
                    .error("left side of logical binary operation is not a boolean", lhs_span)
                }

                if not rhs_type_id.equals(builtin(BuiltinType::Bool)) {
                    .error("right side of logical binary operation is not a boolean", rhs_span)
                }

                type_id = builtin(BuiltinType::Bool)
            }
            Assign => {
                if not .expression_is_mutable(checked_lhs) {
                    .error("assignment to immutable variable", span)
                    return lhs_type_id
                }
                match checked_rhs {
                    OptionalNone(span, type_id) => {
                        let lhs_type = .get_type(lhs_type_id)
                        let optional_struct_id = .find_struct_in_prelude("Optional")

                        match lhs_type {
                            GenericInstance(id, args) => {
                                if id.equals(optional_struct_id) {
                                    return lhs_type_id
                                }
                            }
                            else => {}
                        }
                    }
                    else => {}
                }

                let result = .unify(lhs: rhs_type_id, lhs_span: rhs_span, rhs: lhs_type_id, rhs_span: lhs_span)
                if result.1 {
                    .error(format("Assignment between incompatible types (‘{}’ and ‘{}’)", .type_name(lhs_type_id), .type_name(rhs_type_id)), span)
                }
                return result.0
            }
            AddAssign | SubtractAssign | MultiplyAssign | DivideAssign | ModuloAssign | BitwiseAndAssign | BitwiseOrAssign | BitwiseXorAssign | BitwiseLeftShiftAssign | BitwiseRightShiftAssign => {
                let weak_ptr_struct_id = .find_struct_in_prelude("WeakPtr")

                match .get_type(lhs_type_id) {
                    GenericInstance(id, args) => {
                        if id.equals(weak_ptr_struct_id) {
                            let inner_type_id = args[0]
                            match .get_type(inner_type_id) {
                                Type::Struct(struct_id: lhs_struct_id) => {
                                    match .get_type(rhs_type_id) {
                                        Type::Struct(struct_id: rhs_struct_id) => {
                                            if lhs_struct_id.equals(rhs_struct_id) {
                                                return lhs_type_id
                                            }
                                        }
                                        else => {}
                                    }
                                }
                                else => {}
                            }
                        }

                        if not lhs_type_id.equals(rhs_type_id) {
                            .error(format(
                                "Assignment between incompatible types (‘{}’ and ‘{}’)",
                                .type_name(lhs_type_id),
                                .type_name(rhs_type_id),
                            ), span)
                        }

                        if not .expression_is_mutable(checked_lhs) {
                            .error("Assignment to immutbale variable", span)
                        }
                    }
                    else => {}
                }
            }
            Add | Subtract | Multiply | Divide | Modulo => {
                if not lhs_type_id.equals(rhs_type_id) {
                    .error(format(
                        "Binary arithmetic operation between incompatible types (‘{}’ and ‘{}’)",
                        .type_name(lhs_type_id),
                        .type_name(rhs_type_id),
                    ),
                    span)
                }

                type_id = lhs_type_id
            }
            else => {}
        }

        return type_id
    }

    function typecheck_expression(mut this, anon expr: ParsedExpression, scope_id: ScopeId) throws -> CheckedExpression => match expr {
        Boolean(val, span) => CheckedExpression::Boolean(val, span)
        NumericConstant(val, span) => {
            // FIXME: better constant support
            yield match val {
                I8(val) => CheckedExpression::NumericConstant(val: CheckedNumericConstant::I8(val), span, type_id: builtin(BuiltinType::I8))
                I16(val) => CheckedExpression::NumericConstant(val: CheckedNumericConstant::I16(val), span, type_id: builtin(BuiltinType::I16))
                I32(val) => CheckedExpression::NumericConstant(val: CheckedNumericConstant::I32(val), span, type_id: builtin(BuiltinType::I32))
                I64(val) => CheckedExpression::NumericConstant(val: CheckedNumericConstant::I64(val), span, type_id: builtin(BuiltinType::I64))
                U8(val) => CheckedExpression::NumericConstant(val: CheckedNumericConstant::U8(val), span, type_id: builtin(BuiltinType::U8))
                U16(val) => CheckedExpression::NumericConstant(val: CheckedNumericConstant::U16(val), span, type_id: builtin(BuiltinType::U16))
                U32(val) => CheckedExpression::NumericConstant(val: CheckedNumericConstant::U32(val), span, type_id: builtin(BuiltinType::U32))
                U64(val) => CheckedExpression::NumericConstant(val: CheckedNumericConstant::U64(val), span, type_id: builtin(BuiltinType::U64))
                USize(val) => CheckedExpression::NumericConstant(val: CheckedNumericConstant::USize(val), span, type_id: builtin(BuiltinType::U64))
            }
        }
        QuotedString(val, span) => CheckedExpression::QuotedString(val, span)
        Call(call, span) => .typecheck_call(call, scope_id, span)
        Range(from, to, span) => {
            let checked_from = .typecheck_expression(from, scope_id)
            let checked_to = .typecheck_expression(to, scope_id)

            let from_type = .expression_type(checked_from)
            let to_type = .expression_type(checked_to)

            let from_span = .expression_span(checked_from)
            let to_span = .expression_span(checked_to)

            .unify(lhs: from_type, lhs_span: from_span, rhs: to_type, rhs_span: from_span)

            yield CheckedExpression::Range(from: checked_from, to: checked_to, span, type_id: from_type)
        }
        BinaryOp(lhs, op, rhs, span) => {
            let checked_lhs = .typecheck_expression(lhs, scope_id)
            mut checked_rhs = .typecheck_expression(rhs, scope_id)

            let lhs_type = .expression_type(checked_lhs)

            .try_to_promote_constant_expr_to_type(lhs_type, checked_rhs, span)

            let output_type = .typecheck_binary_operation(checked_lhs, op, checked_rhs, scope_id, span)

            yield CheckedExpression::BinaryOp(lhs: checked_lhs, op, rhs: checked_rhs, span, type_id: output_type)
        }
        OptionalNone(span) => CheckedExpression::OptionalNone(span, type_id: .new_inference())
        OptionalSome(expr, span) => {
            let checked_expr = .typecheck_expression(expr, scope_id)
            let type_id = .expression_type(checked_expr)
            let optional_struct_id = .find_struct_in_prelude("Optional")
            let optional_type = Type::GenericInstance(id: optional_struct_id, args: [type_id])
            let optional_type_id = .find_or_add_type_id(optional_type)
            yield CheckedExpression::OptionalSome(expr: checked_expr, span, type_id: optional_type_id)
        }
        else => {
            panic("not complete")

            yield CheckedExpression::Boolean(val: false, span: Span(start: 0, end: 0))
        }
    }

    function typecheck_call(mut this, call: ParsedCall, scope_id: ScopeId, span: Span) throws -> CheckedExpression {
        mut args: [(String, CheckedExpression)] = []
        mut return_type = builtin(BuiltinType::Void)
        mut callee_throws = false

        match call.name {
            "print" | "println" | "eprintln" | "format" => {
                for arg in call.args.iterator() {
                    let checked_arg = .typecheck_expression(expr: arg.1, scope_id)

                    args.push((call.name, checked_arg))
                }
            }
            else => {

            }
        }

        let none_function_id: FunctionId? = None
        return CheckedExpression::Call(call: CheckedCall(namespace_: [], name: call.name, args, function_id: none_function_id, return_type, callee_throws), span, type_id: return_type)
    }
}
