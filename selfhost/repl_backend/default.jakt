import utility { Span, allocate, null }
import jakt::libc::io { FILE, fgets, fclose, fopen }
import repl_backend::common { LineResult, Style, Color, XTermColor }

struct Editor {
    standard_input_file: raw FILE
    line_pointer: raw c_char
    prompt: String

    fn create(
        prompt: String
        syntax_highlight_handler: &fn(anon editor: &mut Editor) throws -> void
    ) throws -> Editor {
        mut std_in = fopen(str: "/dev/stdin".c_string(), mode: "r".c_string())
        if std_in == null<FILE>() {
            eprintln("Could not open /dev/stdin for reading")
            throw Error::from_errno(42)
        }

        let editor = Editor(
            standard_input_file: std_in
            line_pointer: allocate<c_char>(count: 4096)
            prompt
        )
        return editor
    }

    fn get_line(mut this) throws -> LineResult {
        eprint("{}", .prompt)

        mut builder = StringBuilder::create()
        unsafe {
            let c_string = fgets(
                s: .line_pointer
                n: 4096
                stream: .standard_input_file)

            if c_string == null<c_char>() {
                return LineResult::Eof
            }

            builder.append_c_string(c_string)
        }

        return LineResult::Line(builder.to_string())
    }

    fn get_active_buffer(mut this) throws -> String {
        throw Error::from_string_literal("Active buffer not supported")
    }

    fn highlight(mut this, anon span: Span, anon style: Style) throws -> void {
        throw Error::from_string_literal("Highlighting not supported")
    }

    fn destroy(mut this) {
        fclose(file: .standard_input_file)
        unsafe {
            cpp {
                "free(line_pointer);"
            }
        }
    }
}

