import error { JaktError, print_error, print_error_json }
import utility
import utility { FileId }
import jakt::path { Path, get_path_separator }
import jakt::platform { platform_module }
import platform_module("jakt::platform::fs")

class Compiler {
    public files: [Path]
    public file_ids: [String: FileId]
    public errors: [JaktError]
    public current_file: FileId?
    public current_file_contents: [u8]
    public dump_lexer: bool
    public dump_parser: bool
    public ignore_parser_errors: bool
    public debug_print: bool
    public std_include_path: Path
    public include_paths: [String]
    public json_errors: bool
    public dump_type_hints: bool
    public dump_try_hints: bool
    public optimize: bool
    public target_triple: String?
    public user_configuration: [String:String]
    public binary_dir: Path
    public exports_dir: Path
    public assume_main_file_path: Path?

    public fn panic(this, anon message: String) -> never {
        .print_errors()
        utility::panic(message)
    }

    public fn print_errors(this) throws {
        // FIXME: This method of enumerating errors might be a problem for really huge code bases.
        //        So at some point we might want to use better data structures here.
        mut idx = 0uz
        for file in .files {
            mut file_contents: [u8]? = None
            let file_name = file.to_string()

            // Only display the errors that belong to this file
            for error in .errors {
                let span = error.span()

                if span.file_id.id == idx {
                    if .json_errors {
                        print_error_json(file_name, error)
                    } else {
                        // Lazily load file contents
                        if not file_contents.has_value() {
                            try {
                                mut file = File::open_for_reading(file_name)
                                file_contents = file.read_all()
                            } catch error {}
                        }
                        print_error(file_name, file_contents, error)
                    }
                }
            }
            idx++
        }
    }

    public fn get_file_path(this, anon file_id: FileId) -> Path? {
        if file_id.id >= .files.size() {
            return None
        }
        return .files[file_id.id]
    }

    public fn current_file_id(this) -> FileId? {
        return .current_file
    }

    public fn current_file_path(this) -> Path? {
        if .current_file.has_value() {
            return .files[.current_file!.id]
        }

        return None
    }

    public fn get_file_id_or_register(mut this, anon file: Path) -> FileId {
        // FIXME: maybe we want to index with the absolute path, just to be sure?
        let path = file.to_string()
        mut file_id = .file_ids.get(path)

        if file_id.has_value() {
            return file_id!
        }

        .files.push(file)
        file_id = FileId(id: .files.size() - 1)

        .file_ids.set(path, file_id!)

        return file_id!
    }

    public fn set_current_file(mut this, anon file_id: FileId) throws -> bool {
        // FIXME: Make use of builtin types in lib.h
        let ErrNOENT = 2i32
        let ErrACCES = 13i32
        let ErrFBIG = 27i32
        let ErrNAMETOOLONG = 36i32

        let old_file_id = .current_file
        .current_file = file_id

        // set file contents
        try {
            mut file = File::open_for_reading(.files[file_id.id].to_string())
            .current_file_contents = file.read_all()
        } catch error {
            match error.code() {
                (ErrNOENT) => eprintln("\u001b[31;1mError\u001b[0m Could not access {}: File not found", .files[file_id.id])
                (ErrACCES) => eprintln("\u001b[31;1mError\u001b[0m Could not access {}: Permission denied", .files[file_id.id])
                (ErrFBIG) => eprintln("\u001b[31;1mError\u001b[0m Could not access {}: File too big", .files[file_id.id])
                (ErrNAMETOOLONG) => eprintln("\u001b[31;1mError\u001b[0m Could not access {}: Name too long", .files[file_id.id])
                else => {
                    utility::panic("Incurred unrecognized error while trying to open file")
                }
            }

            .current_file = old_file_id
            return false
        }

        return true
    }

    public fn current_file_state(this) -> (FileId?, [u8]) => (.current_file, .current_file_contents)
    public fn restore_file_state(mut this, anon state: (FileId?, [u8])) {
        .current_file = state.0
        .current_file_contents = state.1
    }

    public fn dbg_println(this, anon message: String) {
        if .debug_print {
            println("{}", message)
        }
    }

    public fn load_prelude(mut this) throws {
        let module_name = "__prelude__"
        let file_name = Path::from_string(module_name)
        .get_file_id_or_register(file_name)
    }

    public fn search_for_path(this, input_module_name: String, relative_import: bool, parent_path_count: usize) throws -> Path? {
        // FIXME: Need a better way to convert u8 to a String.
        //        https://discord.com/channels/830522505605283862/976984180313452604/1035127640807448616
        mut builder = StringBuilder::create()
        builder.append(get_path_separator())
        let separator = builder.to_string()
        let module_name = input_module_name.replace(replace: "::", with: separator)

        if not relative_import {
            for include_path in .include_paths.iterator() {
                let candidate_path = Path::from_parts([include_path, module_name + ".jakt"])
                if candidate_path.exists() {
                    return candidate_path
                }
            }
        }

        // Note: Checking this after the replacement!
        let standard_module_name = "jakt"

        if module_name.starts_with(standard_module_name) {
            let std_module_name_path = module_name.substring(start: standard_module_name.length() + 1, length: module_name.length() - (standard_module_name.length() + 1))
            let candidate_path = Path::from_parts([.std_include_path.to_string(), std_module_name_path + ".jakt"])
            if candidate_path.exists() {
                return candidate_path
            }
        }

        return .find_in_search_paths(Path::from_string(module_name + ".jakt"), relative_import, parent_path_count)
    }

    public fn find_in_search_paths(this, anon path: Path, relative_import: bool = false, parent_path_count: usize = 0) throws -> Path? {
        for include_path in .include_paths {
            let candidate_path = Path::from_string(include_path).join(path)
            if candidate_path.exists() {
                return candidate_path
            }
        }
        let current_file_path = .assume_main_file_path ?? .current_file_path()
        if current_file_path.has_value() {
            mut candidate_path = current_file_path!.absolute().parent().join(path)
            if relative_import and parent_path_count > 0 {
                mut parent_count = parent_path_count
                mut parent = candidate_path.parent()
                while (parent_count > 0) {
                    parent = parent.parent()
                    parent_count--
                }
                candidate_path = parent.join(path)
            }
            if candidate_path.exists() {
                return candidate_path
            }
        }
        return None
    }
}
