import path { Path }

function run_compiler(
    cxx_compiler_path: String
    cpp_filename: String
    output_filename: String
    runtime_path: String
    extra_include_paths: [String]
    extra_lib_paths: [String]
    extra_link_libs: [String]
    optimize: bool
    extra_compiler_flags: [String]
) throws -> [String] {
    mut file_path = Path::from_string(cxx_compiler_path)

    mut extra_flags: [String] = []
    if file_path.basename() != "clang-cl" {
        eprintln("Can only use clang-cl to compile on windows :(")
        throw Error::from_errno(38)
    }

    extra_flags.push_values(extra_compiler_flags)

    mut compile_args = [
        cxx_compiler_path
        "/std:c++20"
        "/EHsc-"
        "/permissive-"
        "/utf-8"
        "-Wa,-mbig-obj"
        match optimize { true => "/MT", else => "/MTd" }
        "-Wno-unknown-warning-option"
        "-Wno-trigraphs"
        "-Wno-parentheses-equality"
        "-Wno-unqualified-std-cast-call"
        "-Wno-user-defined-literals"
        "-Wno-deprecated-declarations"
    ]

    if optimize {
        compile_args.push("/O3")
    }

    if not extra_flags.is_empty() {
        compile_args.push_values(extra_flags)
    }

    compile_args.push("-I")
    compile_args.push(runtime_path)

    compile_args.push("-o")
    compile_args.push(output_filename)

    compile_args.push(cpp_filename)
    if not extra_include_paths.is_empty() {
        compile_args.add_capacity(extra_include_paths.size() * 2)
        for path in extra_include_paths {
            compile_args.push("-I")
            compile_args.push(path)
        }
    }
    if not extra_lib_paths.is_empty() {
        compile_args.add_capacity(extra_lib_paths.size() * 2)
        for path in extra_lib_paths {
            compile_args.push("-L")
            compile_args.push(path)
        }
    }
    if not extra_link_libs.is_empty() {
        compile_args.add_capacity(extra_link_libs.size())
        for path in extra_link_libs {
            compile_args.push("-l" + path)
        }
    }

    return compile_args
}
