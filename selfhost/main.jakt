/// Expect:
/// - output: ""

import lexer with Span, Token, JaktError, empty_span, merge_spans, Lexer, print_error
import parser with Parser, ParsedCall, ParsedExpression, BinaryOperator, DefinitionLinkage, DefinitionType
import utility with panic, todo

function main(args: [String]) {
    if args.size() <= 1 {
        eprintln("usage: jakt <path>")
        return 1
    }

    mut file = File::open_for_reading(args[1])
    let file_contents = file.read_all()

    mut lexer = Lexer(index: 0, input: file_contents, errors: [])
    mut tokens: [Token] = []

    for token in lexer {
        println("token: {}", token)
        tokens.push(token)
    }

    mut parser = Parser(index: 0, tokens, errors: [])

    let parsed_namespace = parser.parse_namespace()

    for error in lexer.errors.iterator() {
        print_error(file_name: args[1], file_contents, error)
    }

    for error in parser.errors.iterator() {
        print_error(file_name: args[1], file_contents, error)
    }

    if not lexer.errors.is_empty() or not parser.errors.is_empty() {
        return 1
    }

    println("{}", parsed_namespace)
}
