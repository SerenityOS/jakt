/// Expect:
/// - output: ""

// Copyright (c) 2022, JT <jt@serenityos.org>
// Copyright (c) 2022, Andreas Kling <kling@serenityos.org>
//
// SPDX-License-Identifier: BSD-2-Clause

import error { JaktError, print_error }
import lexer { Lexer, Token }
import parser { BinaryOperator, DefinitionLinkage, DefinitionType, ParsedCall, ParsedExpression, ParsedNamespace, Parser }
import typechecker
import utility { panic, todo, Span }

function usage() {
    eprintln("usage: jakt [-l] [-p] <path>")
    return 1
}

function pretty_print_new_line(anon mut string_builder: StringBuilder, anon level: i64) throws {
    string_builder.append(b'\n')
    for indent in 0..level {
        string_builder.append_string("  ")
    }
}

function pretty_print_namespace(anon namespace_: ParsedNamespace) throws {
    let dump_string = format("{}", namespace_)
    mut indent_level = 0
    mut string_builder = StringBuilder::create()

    println("Parsed namespace:\n")

    mut skip_spaces = false

    mut i = 0uz
    while i < dump_string.length() {
        let c = dump_string.byte_at(i)
        match c {
            b'(' => {
                string_builder.append(c)

                // Keep empty `()` on a single line.
                if i + 1 < dump_string.length() and dump_string.byte_at(i + 1) == b')' {
                    i++
                    string_builder.append(dump_string.byte_at(i))
                } else {
                    indent_level++
                    pretty_print_new_line(string_builder, indent_level)
                }
            }
            b'[' => {
                string_builder.append(c)

                // Keep empty `[]` on a single line.
                if i + 1 < dump_string.length() and dump_string.byte_at(i + 1) == b']' {
                    i++
                    string_builder.append(dump_string.byte_at(i))
                } else {
                    indent_level++
                    pretty_print_new_line(string_builder, indent_level)
                }
            }
            b')' | b']' => {
                indent_level--
                pretty_print_new_line(string_builder, indent_level)

                string_builder.append(c)
            }
            b',' => {
                string_builder.append(c)
                pretty_print_new_line(string_builder, indent_level)
                while i + 1 < dump_string.length() and dump_string.byte_at(i + 1) == b' ' {
                    i++
                }
            }
            b'"' => {
                string_builder.append(c)
                i++
                mut ended_string = false
                while i < dump_string.length() and not ended_string {
                    let c = dump_string.byte_at(i)
                    match c {
                        b'\\' => {
                            string_builder.append(c)
                            i++
                            string_builder.append(dump_string.byte_at(i))
                        }
                        b'"' => {
                            string_builder.append(c)
                            break
                        }
                        else => {
                            string_builder.append(c)
                        }
                    }

                    i++
                }
            }
            else => {
                string_builder.append(c)
            }
        }
        i++
    }
    println("{}", string_builder.to_string())
}

function main(args: [String]) {
    if args.size() <= 1 {
        return usage()
    }
    mut lexer_debug = false
    mut parser_debug = false
    mut file_name: String? = None
    mut first_arg = true
    for arg in args.iterator() {
        if first_arg {
            first_arg = false
            continue
        }
        match arg {
            "-l" => {
                if lexer_debug {
                    eprintln("you can only have the -l option once")
                    return usage()
                } else {
                    lexer_debug = true
                }
            }
            "-p" => {
                if parser_debug {
                    eprintln("you can only have the -p option once")
                    return usage()
                } else {
                    parser_debug = true
                }
            }
            else => {
                if file_name.has_value() {
                    eprintln("you can only pass one file")
                    return usage()
                } else {
                    file_name = arg
                }
            }
        }
    }
    if not file_name.has_value() {
        eprintln("you must pass a source file")
        return usage()
    }

    mut file = File::open_for_reading(file_name!)
    let file_contents = file.read_all()

    mut errors: [JaktError] = []

    let tokens = Lexer::lex(input: file_contents, errors)

    if lexer_debug {
        for token in tokens.iterator() {
            println("token: {}", token)
        }
    }

    mut parser = Parser(index: 0, tokens, errors)

    let parsed_namespace = parser.parse_namespace()

    if parser_debug {
        pretty_print_namespace(parsed_namespace)
    }

    for error in errors.iterator() {
        print_error(file_name: args[1], file_contents, error)
    }

    if not errors.is_empty() {
        return 1
    }
}
