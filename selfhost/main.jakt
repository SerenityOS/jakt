/// Expect:
/// - output: ""

// Copyright (c) 2022, JT <jt@serenityos.org>
// Copyright (c) 2022, Andreas Kling <kling@serenityos.org>
//
// SPDX-License-Identifier: BSD-2-Clause

import codegen { CodeGenerator }
import error { JaktError, print_error }
import lexer { Lexer }
import parser { Parser }
import typechecker { Typechecker }

function usage() => "usage: jakt [-h] [OPTIONS] <path>"
function help() -> String{
    mut output = "Flags:\n"
    output += "  -h\t\tPrint this help and exit.\n"
    output += "  -l\t\tPrint debug info for the lexer.\n"
    output += "  -p\t\tPrint debug info for the parser.\n"
    output += "  -b\t\tBuild an executable file.\n"
    output += "  -r\t\tBuild and run an executable file.\n"
    output += "  -d\t\tInsert debug statement spans in generated C++ code."
    return output
} 

function flag(args: [String], anon name: String) => args.contains("-" + name)

function main(args: [String]) {
    if args.size() <= 1 {
        eprintln("{}", usage())
        return 1
    }
    
    if flag(args, "h") {
        println("{}\n", usage())
        println("{}", help())
        return 0
    }

    let lexer_debug = flag(args, "l")
    let parser_debug = flag(args, "p")
    let build_executable = flag(args, "b")
    let run_executable = flag(args, "r")
    let codegen_debug = flag(args, "d")

    mut file_name: String? = None
    mut first_arg = true

    for arg in args.iterator() {
        if first_arg {
            first_arg = false
            continue
        }
        if arg != "-h" and arg != "-l" and arg != "-p" and arg != "-b" and arg != "-r" and arg != "-d" {
            if file_name.has_value() {
                eprintln("you can only pass one source file")
                eprintln("{}", usage())
                return 1
            } else {
                file_name = arg
            }
        }
    }
    if not file_name.has_value() {
        eprintln("you must pass a source file")
        eprintln("{}", usage())
        return 1
    }

    mut file = File::open_for_reading(file_name!)
    let file_contents = file.read_all()

    mut errors: [JaktError] = []

    let tokens = Lexer::lex(input: file_contents, errors)

    if lexer_debug {
        for token in tokens.iterator() {
            println("token: {}", token)
        }
    }

    let parsed_namespace = Parser::parse(tokens, errors)

    if parser_debug {
        println("{:#}", parsed_namespace);
    }

    let checked_program = Typechecker::typecheck(parsed_namespace, errors)

    for error in errors.iterator() {
        print_error(file_name: file_name!, file_contents, error)
    }

    if not errors.is_empty() {
        return 1
    }

    let output = CodeGenerator::generate(checked_program, file_name: file_name!, file_contents, debug_info: codegen_debug)

    if (build_executable or run_executable) {
        let cpp_filename = "build/output.cpp"
        let output_filename = "build/output"
        write_to_file(data: output, output_filename: cpp_filename)
        run_compiler(cpp_filename, output_filename)

        if run_executable {
            system(output_filename.c_string())
        }
    } else {
        println("{}", output)
    }
}

function run_compiler(cpp_filename: String, output_filename: String) throws {
    mut compile_args = [
        "clang++"
        "-fcolor-diagnostics"
        "-std=c++20"
        "-Wno-unknown-warning-option"
        "-Wno-trigraphs"
        "-Wno-parentheses-equality"
        "-Wno-unqualified-std-cast-call"
        "-Wno-user-defined-literals"
        "-Wno-deprecated-declarations"
        "-Iruntime"
        "-o"
        output_filename
    ]
    compile_args.push(cpp_filename)
    mut command = ""
    for compile_arg in compile_args.iterator() {
        command += compile_arg
        command += " "
    }
    system(command.c_string())
}

function write_to_file(data: String, output_filename: String) throws {
    mut outfile = File::open_for_writing(output_filename)
    mut bytes: [u8] = []
    for i in 0..data.length() {
        bytes.push(data.byte_at(i))
    }
    outfile.write(bytes)
}
