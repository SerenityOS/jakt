/// Expect:
/// - output: ""

// Copyright (c) 2022, JT <jt@serenityos.org>
// Copyright (c) 2022, Andreas Kling <kling@serenityos.org>
//
// SPDX-License-Identifier: BSD-2-Clause

import lexer { JaktError, Lexer, Span, Token, empty_span, merge_spans, print_error }
import parser { BinaryOperator, DefinitionLinkage, DefinitionType, ParsedCall, ParsedExpression, Parser }
import utility { panic, todo }

function main(args: [String]) {
    if args.size() <= 1 {
        eprintln("usage: jakt <path>")
        return 1
    }

    mut file = File::open_for_reading(args[1])
    let file_contents = file.read_all()

    mut errors: [JaktError] = []

    let tokens = Lexer::lex(input: file_contents, errors)

    mut parser = Parser(index: 0, tokens, errors)

    let parsed_namespace = parser.parse_namespace()

    for error in errors.iterator() {
        print_error(file_name: args[1], file_contents, error)
    }

    if not errors.is_empty() {
        return 1
    }

    println("{}", parsed_namespace)
}
