/// Expect:
/// - output: ""

// Copyright (c) 2022, JT <jt@serenityos.org>
// Copyright (c) 2022, Andreas Kling <kling@serenityos.org>
//
// SPDX-License-Identifier: BSD-2-Clause

import jakt::libc::io { system }
import jakt::arguments { ArgsParser }
import jakt::file_iterator { RecursiveFileIterator }

import compiler { Compiler, FileId }
import codegen { CodeGenerator }
import error { JaktError, print_error }
import formatter { Formatter }
import utility { Span, escape_for_quotes, join, write_to_file}
import lexer { Lexer, Token }
import parser { Parser }
import interpreter { Interpreter, InterpreterScope, value_to_checked_expression }
import typechecker { Typechecker }
import types { FunctionId, ResolvedNamespace, ScopeId, ModuleId, Value, ValueImpl }
import repl { REPL, serialize_ast_node }
import project { Project }
import ide
import jakt::path { Path, get_path_separator }
import jakt::platform { platform_fs, platform_module, platform_compiler, is_windows, library_name }

import build { Builder }

import platform_fs() {
    make_directory
    DirectoryIterator
}

import platform_compiler() {
    run_compiler
}

fn usage() => "usage: jakt [-h] [OPTIONS] <filename>"
fn help() -> String {
    mut output = "Flags:\n"
    output += "  -h,--help\t\t\t\tPrint this help and exit.\n"
    output += "  -O\t\t\t\t\tBuild an optimized executable.\n"
    output += "  -dl\t\t\t\t\tPrint debug info for the lexer.\n"
    output += "  -dp\t\t\t\t\tPrint debug info for the parser.\n"
    output += "  -dt\t\t\t\t\tPrint debug info for the typechecker.\n"
    output += "  -S,--emit-cpp-source-only\t\tOnly output source (do not build).\n"
    output += "  -T,--target-triple TARGET\t\tSpecify the target triple used for the build, defaults to native.\n"
    output += "  --runtime-library-path PATH\t\tSpecify the path to the runtime library.\n"
    output += "  -J,--jobs NUMBER\t\t\tSpecify the number of jobs to run in parallel, defaults to 2 (1 on windows).\n"
    output += "  -cr, --compile-run\t\t\tBuild and run an executable file.\n"
    output += "  -r, --run\t\t\t\tRun the given file without compiling it (all positional arguments after the file name will be passed to main).\n"
    output += "  -d\t\t\t\t\tInsert debug statement spans in generated C++ code.\n"
    output += "  --debug-print\t\t\t\tOutput debug print.\n"
    output += "  -p --prettify-cpp-source\t\tRun emitted C++ source through clang-format.\n"
    output += "  -c,--check-only\t\t\tOnly check the code for errors.\n"
    output += "  -j,--json-errors\t\t\tEmit machine-readable (JSON) errors.\n"
    output += "  -H,--type-hints\t\t\tEmit machine-readable type hints (for IDE integration).\n"
    output += "  -f,--format\t\t\t\tFormat a file or directory and output the result.\n"
    output += "  -fi,--format-inplace\t\t\t\tFormat a file or directory and save the result inplace.\n"
    output += "  -fd,--format-debug\t\t\tOutput debug info for the formatter.\n"
    output += "  -fr,--format-range\t\t\tEmit part of the document with formatting applied.\n"
    output += "  --try-hints\t\t\t\tEmit machine-readable try hints (for IDE integration).\n"
    output += "  --repl\t\t\t\tStart a Read-Eval-Print loop session.\n"
    output += "  --print-symbols\t\t\tEmit a machine-readable (JSON) symbol tree.\n"

    output += "\nOptions:\n"
    output += "  -F,--clang-format-path PATH\t\tPath to clang-format executable.\n\t\t\t\t\tDefaults to clang-format\n"
    output += "  -D,--dot-clang-format-path PATH\tPath to the .clang-format file to use.\n\t\t\t\t\tDefaults to none, invoking clangs default .clang-format file handling.\n"
    output += "  -R,--runtime-path PATH\t\tPath of the Jakt runtime headers.\n\t\t\t\t\tDefaults to $PWD/runtime.\n"
    output += "  -B,--binary-dir PATH\t\t\tOutput directory for compiled files.\n\t\t\t\t\tDefaults to $PWD/build.\n"
    output += "  -C,--cxx-compiler-path PATH\t\tPath of the C++ compiler to use when compiling the generated sources.\n\t\t\t\t\tDefaults to clang++.\n"
    output += "  -I PATH\t\t\t\tAdd PATH to compiler's include list. Can be specified multiple times.\n"
    output += "  -L PATH\t\t\t\tAdd PATH to linker's search list. Can be specified multiple times.\n"
    output += "  -l,--link-with LIB\t\t\tLink executable with LIB. Can be specified multiple times.\n"
    output += "  -o,--output-filename FILE\t\tName of the output binary.\n\t\t\t\t\tDefaults to the input-filename without the extension.\n"
    output += "  -g,--goto-def INDEX\t\t\tReturn the span for the definition at index.\n"
    output += "  -t,--goto-type-def INDEX\t\tReturn the span for the type definition at index.\n"
    output += "  -e,--hover INDEX\t\t\tReturn the type of element at index.\n"
    output += "  -m,--completions INDEX\t\tReturn dot completions at index.\n"
    output += "  --create NAME\t\tCreate sample project in $PWD/NAME\n"
    output += "  --ak-is-my-only-stdlib\t\tForget about interop, AK is the one and only STL.\n"
    return output
}

fn indent(anon level: usize) throws -> String {
    mut output = ""
    for i in 0uz..level {
        output += "    "
    }
    return output
}

struct FormatRange {
    start: usize
    end: usize
}
fn parse_format_range(anon range: String, anon input_file_length: usize) throws -> FormatRange? {
    // range: <start-offset>:<end-offset>
    // {start,end}-offset: usize

    let parts = range.split(c':')
    if parts.is_empty() {
        return FormatRange(
            start: 0
            end: input_file_length
        )
    }

    let start_input = parts[0].to_uint()
    if not start_input.has_value() {
        return None
    }

    let start = start_input! as! usize
    let end = match parts.size() {
        1 => input_file_length
        2 => {
            let end_input = parts[1].to_uint()
            if not end_input.has_value() {
                return None
            }

            yield end_input! as! usize
        }
        else => {
            return None
        }
    }

    return FormatRange(
        start
        end
    )
}

fn value_or_throw<T>(anon maybe: T?) throws -> T {
    if maybe.has_value() {
        return maybe!
    }

    throw Error::from_errno(1)
}

fn main(args: [String]) {
    if args.size() <= 1 {
        eprintln("{}", usage())
        return 1
    }

    mut args_parser = ArgsParser::from_args(args)

    if args_parser.flag(["-h", "--help"]) {
        println("{}\n", usage())
        println("{}", help())
        return 0
    }

    if args_parser.flag(["-v", "--version"]) {
        println("unreleased")
        return 0
    }

    let current_executable_path = Path::from_string(File::current_executable_path())
    let install_base_path = current_executable_path.parent().parent()
    let default_runtime_path = install_base_path.join("include/runtime")
    let default_runtime_library_path = install_base_path.join("lib")
    let default_compiler_path = match is_windows() { true => "clang-cl", else => "clang++" }

    let optimize = args_parser.flag(["-O"])
    let lexer_debug = args_parser.flag(["-dl"])
    let parser_debug = args_parser.flag(["-dp"])
    let typechecker_debug = args_parser.flag(["-dt"])
    let build_executable = not args_parser.flag(["-S", "--emit-cpp-source-only"])
    let run_executable = args_parser.flag(["-cr", "--compile-run"])
    let codegen_debug = args_parser.flag(["-d"])
    let debug_print = args_parser.flag(["--debug-print"])
    let prettify_cpp_source = args_parser.flag(["-p", "--prettify-cpp-source"])
    let json_errors = args_parser.flag(["-j","--json-errors"])
    let dump_type_hints = args_parser.flag(["-H", "--type-hints"])
    let dump_try_hints = args_parser.flag(["--try-hints"])
    let check_only = args_parser.flag(["-c", "--check-only"])
    let generate_depfile = args_parser.option(["-M", "--dep-file"])
    let target_triple = args_parser.option(["-T", "--target-triple"])
    let runtime_library_path = args_parser.option(["-RLP", "--runtime-library-path"]) ?? default_runtime_library_path.to_string()
    mut compiler_job_count = args_parser.option(["-J", "--jobs"]) ?? "2"

    // FIXME: Remove this when parallel runs on windows work correctly.
    if is_windows() {
        compiler_job_count = "1"
    }

    let clang_format_path = args_parser.option(["-F", "--clang-format-path"]) ?? "clang-format"
    let runtime_path = args_parser.option(["-R", "--runtime-path"]) ?? default_runtime_path.to_string()
    let binary_dir = Path::from_string(args_parser.option(["-B", "--binary-dir"]) ?? "build")
    let dot_clang_format_path = args_parser.option(["-D", "--dot-clang-format-path"])
    let cxx_compiler_path = args_parser.option(["-C", "--cxx-compiler-path"]) ?? default_compiler_path
    let archiver_path = args_parser.option(["-A", "--archiver"])
    let link_archive = args_parser.option(["-a", "--link-archive"])
    let extra_include_paths = args_parser.option_multiple(["-I"])
    let extra_lib_paths = args_parser.option_multiple(["-L"])
    let extra_link_libs = args_parser.option_multiple(["-l"])
    let set_output_filename = args_parser.option(["-o", "--output-filename"])
    let goto_def = args_parser.option(["-g", "--goto-def"])
    let goto_type_def = args_parser.option(["-t", "--goto-type-def"])
    let hover = args_parser.option(["-e", "--hover"])
    let completions = args_parser.option(["-m", "--completions"])
    let print_symbols = args_parser.flag(["--print-symbols"])
    let project_name = args_parser.option(["--create"])

    let interpret_run = args_parser.flag(["-r", "--run"])

    let format = args_parser.flag(["-f", "--format"])
    let format_inplace = args_parser.flag(["-fi", "--format-inplace"])
    let format_debug = args_parser.flag(["-fd", "--format-debug"])
    let input_format_range = args_parser.option(["-fr", "--format-range"]) ?? ""

    let ak_stdlib = args_parser.flag(["--ak-is-my-only-stdlib"])

    let max_concurrent = try value_or_throw(compiler_job_count.to_uint()) catch {
        eprintln("error: invalid value for --jobs: {}", compiler_job_count)
        return 1
    } as! usize

    if args_parser.flag(["--repl"]) {
        mut repl = REPL::create(runtime_path: Path::from_parts([runtime_path, "jaktlib"]), target_triple)
        repl.run()
        return 0
    }

    let positional_arguments = args_parser.remaining_arguments()

    if project_name.has_value() {
        let project = Project(name: project_name!)
        project.populate()
        return 0
    }

    mut file_name: String? = None
    mut first_arg = true
    mut interpreted_main_arguments: [String] = []

    for arg in positional_arguments {
        if first_arg {
            first_arg = false
            continue
        }

        if not file_name.has_value() {
            file_name = arg
            continue
        }

        if not interpret_run {
            eprintln(
                "Extra unknown argument '{}', you can only pass one source file (was '{}')"
                arg
                file_name
            )
            eprintln("{}", usage())
            return 1
        }

        interpreted_main_arguments.push(arg)
    }
    if not file_name.has_value() {
        eprintln("you must pass a source file")
        eprintln("{}", usage())
        return 1
    }

    let file_path = Path::from_string(file_name!)
    // if file_path.ext() != "jakt" {
    //     eprintln("the compiler expects files with file extension .jakt")
    //     eprintln("{}", usage())
    //     return 1
    // }

    let guessed_output_filename = file_path.basename(strip_extension: true)
    let output_filename = binary_dir.join(set_output_filename ?? guessed_output_filename).to_string()

    mut errors: [JaktError] = []

    mut compiler = Compiler(
        files: []
        file_ids: [:]
        errors: []
        current_file: None
        current_file_contents: []
        dump_lexer: lexer_debug
        dump_parser: parser_debug
        ignore_parser_errors: false
        debug_print: debug_print
        // FIXME: Case sensitivity on win/mac requires this path be named different than the jakt cpp lib
        std_include_path: Path::from_parts([runtime_path, "jaktlib"])
        include_paths: extra_include_paths
        json_errors
        dump_type_hints
        dump_try_hints
        optimize
        target_triple
    )

    compiler.load_prelude()

    if format or format_debug or format_inplace {
        let directory_or_file_paths = RecursiveFileIterator::make(directory: file_path, extension: "jakt")
        for directory_or_file_path in directory_or_file_paths {
            let file_id = compiler.get_file_id_or_register(directory_or_file_path)
            let file_is_set = compiler.set_current_file(file_id)
            if not file_is_set {
                return 1
            }

            let format_range = parse_format_range(
                range: input_format_range
                input_file_length: compiler.current_file_contents.size()
            )
            if not format_range.has_value() {
                eprintln("invalid format range '{}', expected <start>(:<end>?)", input_format_range)
                return 1
            }

            let tokens = Lexer::lex(compiler)

            format_output(file_path: directory_or_file_path, tokens, format_range, format_debug, format_inplace)
        }

        return 0
    }

    let main_file_id = compiler.get_file_id_or_register(file_path)
    let file_is_set = compiler.set_current_file(main_file_id)
    if not file_is_set {
        return 1
    }

    let tokens = Lexer::lex(compiler)

    if lexer_debug {
        for token in tokens {
            println("token: {}", token)
        }
    }

    let parsed_namespace = Parser::parse(compiler, tokens)

    if parser_debug {
        println("{:#}", parsed_namespace);
    }

    if print_symbols {
        let symbols = ide::find_symbols_in_namespace(parsed_namespace)

        mut symbol_representations: [String] = []
        for symbol in symbols {
            symbol_representations.push(symbol.to_json())
        }
        println("[{}]", join(symbol_representations, separator: ","))
        return 0
    }

    mut typechecker = Typechecker::typecheck(
        compiler
        parsed_namespace
    )
    let checked_program = typechecker.program

    if interpret_run {
        mut interpreter = typechecker.interpreter()

        // Find the main function
        let prelude_scope_id = ScopeId(module_id: ModuleId(id: 0), id: 0)
        mut main_function_id: FunctionId? = None
        for module in checked_program.modules {
            for scope in module.scopes {
                if not (scope.parent?.equals(prelude_scope_id) ?? false) {
                    continue
                }

                for (function_name, overload_set) in scope.functions {
                    if function_name == "main" {
                        main_function_id = overload_set[0]
                        break
                    }
                }

                if main_function_id.has_value() {
                    break
                }
            }
            if main_function_id.has_value() {
                break
            }
        }

        if not main_function_id.has_value() {
            eprintln("Error: No main function  found in program")
            return 1
        }

        let namespace_: [ResolvedNamespace] = []
        let call_span = Span(file_id: FileId(id: 0), start: 0, end: 0)
        let first_main_param = checked_program.get_function(main_function_id!).params.first()
        let arguments = match first_main_param.has_value() {
            true => {
                mut passed_arguments: [Value] = [Value(impl: ValueImpl::JaktString(file_name!), span: call_span)]
                for argument in interpreted_main_arguments {
                    passed_arguments.push(Value(impl: ValueImpl::JaktString(argument), span: call_span))
                }
                yield [Value(
                    impl: ValueImpl::JaktArray(values: passed_arguments, type_id: first_main_param!.variable.type_id)
                    span: call_span
                )]
            }
            else => []
        }

        let main_result = interpreter.execute(
            function_to_run_id: main_function_id!
            namespace_
            this_argument: None
            arguments
            call_span)

        match main_result {
            Return(x) => match x.impl {
                // FIXME: I64 should not be accepted here, we're just not performing implicit type conversions in the interpreter.
                CInt(ret_val) | I64(ret_val) => {
                    return ret_val
                }
                Void => {
                    return 0
                }
                else => {
                    eprintln("Error: Main function  must return an integer")
                    return 1
                }
            }

            Throw(x) => {
                eprintln("Error: Main function  threw: {}", serialize_ast_node(value_to_checked_expression(x, interpreter)))
                return 1
            }
        }
    }

    if goto_def.has_value() {
        let index = goto_def!.to_uint()! as! usize;

        let result = ide::find_definition_in_program(program: checked_program, span: Span(file_id: FileId(id: 1), start: index, end: index))

        if result.file_id.id == 1 {
            println("{{\"start\": {}, \"end\": {}}}", result.start, result.end);
        } else {
            let file_path = compiler.get_file_path(result.file_id)

            println("{{\"start\": {}, \"end\": {}, \"file\": \"{}\"}}", result.start, result.end, escape_for_quotes(file_path!.to_string()));
        }
        return 0
    }
    if goto_type_def.has_value() {
        let index = goto_type_def!.to_uint()! as! usize;

        let result = ide::find_type_definition_in_program(program: checked_program, span: Span(file_id: FileId(id: 1), start: index, end: index))

        if result.file_id.id == 1 {
            println("{{\"start\": {}, \"end\": {}}}", result.start, result.end);
        } else {
            let file_path = compiler.get_file_path(result.file_id)

            println("{{\"start\": {}, \"end\": {}, \"file\": \"{}\"}}", result.start, result.end, escape_for_quotes(file_path!.to_string()));
        }
        return 0
    }
    if hover.has_value() {
        let index = hover!.to_uint()! as! usize;

        let result = ide::find_typename_in_program(program: checked_program, span: Span(file_id: FileId(id: 1), start: index, end: index))

        if result.has_value() {
            println("{{\"hover\": \"{}\"}}", result!)
        }
        return 0
    }
    if completions.has_value() {
        let index = completions!.to_uint()! as! usize;

        let result = ide::find_dot_completions(program: checked_program, span: Span(file_id: FileId(id: 1), start: index, end: index))

        print("{{\"completions\": [");
        mut first = true
        for completion in result {
            if not first {
                print(", ")
            } else {
                first = false
            }
            print("\"{}\"", completion)
        }
        println("]}}");
        return 0
    }

    if typechecker_debug {
        println("{:#}", checked_program);
    }

    compiler.print_errors()

    if not compiler.errors.is_empty() {
        return 1
    }

    if check_only {
        return 0
    }

    let codegen_result = CodeGenerator::generate(compiler, checked_program, debug_info: codegen_debug)

    mut depfile_builder = StringBuilder::create()

    if not binary_dir.exists() {
        make_directory(path: binary_dir.to_string())
    }

    for (file, contents_and_path) in codegen_result {
        let (contents, module_file_path) = contents_and_path

        let path = binary_dir.join(file)
        try write_to_file(data: contents, output_filename: path.to_string()) catch error {
            eprintln("Error: Could not write to file: {} ({})", file, error)
            return 1
        }

        if generate_depfile.has_value() and file.ends_with(".cpp") {
            let escaped = file.replace(replace: " ", with: "\\ ")
            let escaped_module_file_path = module_file_path.replace(replace: " ", with: "\\ ")
            depfile_builder.append_string(format(
                "{} {}.h: {}"
                escaped
                escaped.substring(start: 0, length: file.length() - 4)
                escaped_module_file_path
            ))
            depfile_builder.append(b'\n')
        }
    }

    if generate_depfile.has_value() {
        try {
            write_to_file(
                data: depfile_builder.to_string()
                output_filename: generate_depfile!
            )
        } catch error {
            eprintln("Error: Could not write to file list ({})", error)
            return 1
        }
    }

    if build_executable or run_executable {
        mut files: [String] = []
        for (file_name, _) in codegen_result {
            if file_name.ends_with(".h") {
                continue
            }
            files.push(file_name)
        }

        mut builder = Builder::for_building(
            files
            max_concurrent
        )

        mut extra_compiler_flags = ["-c"]
        if ak_stdlib {
            extra_compiler_flags.push("-DJAKT_USING_AK_AS_STANDARD_LIBRARY=1")
        }

        try builder.build_all(
            binary_dir
            compiler_invocation: &fn[
                cxx_compiler_path
                runtime_path
                extra_include_paths
                optimize
                extra_compiler_flags
            ](input_filename: String, output_filename: String) throws -> [String] {
                return run_compiler(
                    cxx_compiler_path
                    cpp_filename: input_filename
                    output_filename
                    runtime_path
                    extra_include_paths
                    extra_lib_paths: []
                    extra_link_libs: []
                    optimize
                    extra_compiler_flags
                )
            }
        ) catch {
            return 1
        }

        if link_archive.has_value() {
            try builder.link_into_archive(
                archiver: archiver_path ?? "ar"
                archive_filename: link_archive!
            ) catch {
                return 1
            }
        } else {
            mut extra_arguments: [String] = []

            let runtime_lib_path = Path::from_string(runtime_library_path)
            extra_arguments.push(runtime_lib_path.join(library_name("main")).to_string())
            extra_arguments.push(runtime_lib_path.join(library_name("runtime")).to_string())

            for path in extra_lib_paths {
                extra_arguments.push("-L")
                extra_arguments.push(path)
            }

            for lib in extra_link_libs {
                extra_arguments.push("-l")
                extra_arguments.push(lib)
            }

            if is_windows() and Path::from_string(cxx_compiler_path).basename() == "clang-cl" {
                extra_arguments.push("/link")
                extra_arguments.push("/subsystem:console")
            }

            try builder.link_into_executable(
                cxx_compiler_path
                output_filename
                extra_arguments
            ) catch {
                return 1
            }
        }
    }

    if run_executable {
        return system(output_filename.c_string())
    }
}

fn format_output(file_path: Path, tokens: [Token], format_range: FormatRange?, format_debug: bool, format_inplace: bool) throws {
    mut formatted_file = StringBuilder::create()

    mut on_new_line = true
    for formatted_line in Formatter::for_tokens(tokens, debug: format_debug) {
        for formatted_token in formatted_line {
            if not formatted_token.token.span().is_in_offset_range(start: format_range!.start, end: format_range!.end) {
                continue
            }

            for byte in formatted_token.preceding_trivia {
                formatted_file.append(byte)
            }

            match formatted_token.token {
                Eol(comment) => {
                    if comment.has_value() {
                        mut next_char = b' '
                        if comment!.length() != 0 {
                            next_char = comment!.byte_at(0)
                        }
                        let space = match next_char {
                            b' ' | b'\t' | b'/' => ""
                            else => " "
                        }
                        let lhs_space = match on_new_line {
                            true => indent(formatted_token.indent)
                            else => " "
                        }

                        formatted_file.append_string(format("{}//{}{}", lhs_space, space, comment!))
                    }
                    on_new_line = true
                }
                Garbage(consumed) => {
                    if consumed.has_value() {
                        formatted_file.append_string(format("{}", consumed!))
                    }
                }
                else => {
                    if on_new_line {
                        formatted_file.append_string(format("{}", indent(formatted_token.indent)))
                    }
                    formatted_file.append_string(format("{}", formatted_token.token_text()))
                    on_new_line = false
                }
            }

            for byte in formatted_token.trailing_trivia {
                formatted_file.append_string(format("{:c}", byte))
            }

            if formatted_token.token is Eol {
                formatted_file.append_string("\n")
            }
        }
    }

    if format_inplace {
        write_to_file(
            data: formatted_file.to_string()
            output_filename: file_path.to_string()
        )
    } else {
        print("{}", formatted_file.to_string())
    }
}
