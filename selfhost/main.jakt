/// Expect:
/// - output: ""

// Copyright (c) 2022, JT <jt@serenityos.org>
// Copyright (c) 2022, Andreas Kling <kling@serenityos.org>
//
// SPDX-License-Identifier: BSD-2-Clause

import compiler { Compiler, FileId }
import codegen { CodeGenerator }
import error { JaktError, print_error }
import utility { FilePath, ArgsParser }
import lexer { Lexer }
import parser { Parser }
import typechecker { Typechecker }

function usage() => "usage: jakt [-h] [OPTIONS] <path>"
function help() -> String{
    mut output = "Flags:\n"
    output += "  -h\t\tPrint this help and exit.\n"
    output += "  -dl\t\tPrint debug info for the lexer.\n"
    output += "  -dp\t\tPrint debug info for the parser.\n"
    output += "  -dt\t\tPrint debug info for the typechecker.\n"
    output += "  -b\t\tBuild an executable file.\n"
    output += "  -r\t\tBuild and run an executable file.\n"
    output += "  -d\t\tInsert debug statement spans in generated C++ code.\n"
    output += "  --debug-print\t\tOutput debug print.\n"
    output += "  --prettify-cpp-source\t\tRun emitted C++ source through clang-format.\n" // FIXME: Add -p flag to be the same as rust compiler.

    output += "\nOptions:\n"
    output += "  -F,--clang-format-path PATH\t\tPath to clang-format executable.\n\t\tDefaults to clang-format\n"
    output += "  -D, --dot-clang-format-path PATH\t\tPath to the .clang-format file to use.\n\t\tDefaults to none, invoking clangs default .clang-format file handling.\n"
    output += "  -R,--runtime-path PATH\t\tPath of the Jakt runtime headers.\n\t\tDefaults to $PWD/runtime.\n"
    output += "  -o,--binary-dir PATH\t\tOutput directory for compiled files.\n\t\tDefaults to $PWD/build.\n"
    output += "  -C,--cxx-compiler-path PATH\t\tPath of the C++ compiler to use when compiling the generated sources.\n\t\tDefaults to clang++.\n"
    output += "  -I PATH\t\tAdd PATH to compiler's include list. Can be specified multiple times.\n"
    output += "  -L PATH\t\tAdd PATH to linker's search list. Can be specified multiple times.\n"
    output += "  -l,--link-with LIB\t\tLink executable with LIB. Can be specified multiple times.\n"
    return output
} 

function main(args: [String]) {
    if args.size() <= 1 {
        eprintln("{}", usage())
        return 1
    }

    mut args_parser = ArgsParser::from_args(args)
    
    if args_parser.flag(["-h"]) {
        println("{}\n", usage())
        println("{}", help())
        return 0
    }

    if args_parser.flag(["-v", "--version"]) {
        println("unreleased")
        return 0
    }

    let lexer_debug = args_parser.flag(["-dl"])
    let parser_debug = args_parser.flag(["-dp"])
    let typechecker_debug = args_parser.flag(["-dt"])
    let build_executable = args_parser.flag(["-b"])
    let run_executable = args_parser.flag(["-r"])
    let codegen_debug = args_parser.flag(["-d"])
    let debug_print = args_parser.flag(["--debug-print"])
    let prettify_cpp_source = args_parser.flag(["--prettify-cpp-source"])

    let clang_format_path = args_parser.option(["-F", "--clang-format-path"]) ?? "clang-format"
    let runtime_path = args_parser.option(["-R", "--runtime-path"]) ?? "runtime"
    let binary_dir = args_parser.option(["-o", "--binary-dir"]) ?? "build"
    let dot_clang_format_path = args_parser.option(["-D", "--dot-clang-format-path"])
    let cxx_compiler_path = args_parser.option(["-C", "--cxx-compiler-path"]) ?? "clang++"
    let extra_include_paths = args_parser.option_multiple(["-I"])
    let extra_lib_paths = args_parser.option_multiple(["-L"])
    let extra_link_libs = args_parser.option_multiple(["-l"])


    let positional_arguments = args_parser.remaining_arguments()

    mut file_name: String? = None
    mut first_arg = true

    for arg in positional_arguments.iterator() {
        if first_arg {
            first_arg = false
            continue
        }
        if file_name.has_value() {
            eprintln("you can only pass one source file")
            eprintln("{}", usage())
            return 1
        } else {
            file_name = arg
        }
    }
    if not file_name.has_value() {
        eprintln("you must pass a source file")
        eprintln("{}", usage())
        return 1
    }

    let file_path = FilePath::make(file_name!)
    if file_path.ext() != "jakt" {
        eprintln("the compiler expects files with file extension .jakt")
        eprintln("{}", usage())
        return 1
    }

    mut errors: [JaktError] = []

    let none_file_id: FileId? = None
    mut compiler = Compiler(
        files: []
        file_ids: [:]
        errors: []
        current_file: none_file_id
        current_file_contents: []
        dump_lexer: lexer_debug
        dump_parser: parser_debug
        ignore_parser_errors: false
        debug_print: debug_print
    )

    let main_file_id = compiler.get_file_id_or_register(file_path)
    let file_is_set = compiler.set_current_file(main_file_id)
    if not file_is_set {
        return 1
    }

    let tokens = Lexer::lex(compiler)

    if lexer_debug {
        for token in tokens.iterator() {
            println("token: {}", token)
        }
    }

    let parsed_namespace = Parser::parse(compiler, tokens)

    if parser_debug {
        println("{:#}", parsed_namespace);
    }

    let checked_program = Typechecker::typecheck(
        compiler
        parsed_namespace
    )

    if typechecker_debug {
        println("{:#}", checked_program);
    }

    compiler.print_errors()

    if not compiler.errors.is_empty() {
        return 1
    }

    let output = CodeGenerator::generate(compiler, checked_program, debug_info: codegen_debug)

    if (build_executable or run_executable) {
        let basename_without_extension = file_path.basename().substring(start: 0, length: file_path.basename().length() - 5)
        let cpp_filename = binary_dir + "/" + basename_without_extension + ".cpp"
        let output_filename = binary_dir + "/" + basename_without_extension
        write_to_file(data: output, output_filename: cpp_filename)
        run_compiler(
            cxx_compiler_path
            cpp_filename
            output_filename
            runtime_path
            extra_include_paths
            extra_lib_paths
            extra_link_libs)

        if prettify_cpp_source {
            mut command = clang_format_path + " -i " + cpp_filename
            if dot_clang_format_path.has_value() {
                command+= " --style=file:" + dot_clang_format_path!
            }
            system(command.c_string())
        }

        if run_executable {
            system(output_filename.c_string())
        }
    } else {
        println("{}", output)
    }
}

function run_compiler(cxx_compiler_path: String, cpp_filename: String, output_filename: String, runtime_path: String, extra_include_paths: [String], extra_lib_paths: [String], extra_link_libs: [String]) throws {
    mut compile_args = [
        cxx_compiler_path
        "-fcolor-diagnostics"
        "-std=c++20"
        "-Wno-unknown-warning-option"
        "-Wno-trigraphs"
        "-Wno-parentheses-equality"
        "-Wno-unqualified-std-cast-call"
        "-Wno-user-defined-literals"
        "-Wno-deprecated-declarations"
        "-I"
        runtime_path
        "-o"
        output_filename
    ]
    compile_args.push(cpp_filename)
    if not extra_include_paths.is_empty() {
        compile_args.add_capacity(extra_include_paths.size() * 2)
        for path in extra_include_paths.iterator() {
            compile_args.push("-I")
            compile_args.push(path)
        }
    }
    if not extra_lib_paths.is_empty() {
        compile_args.add_capacity(extra_lib_paths.size() * 2)
        for path in extra_lib_paths.iterator() {
            compile_args.push("-L")
            compile_args.push(path)
        }
    }
    if not extra_link_libs.is_empty() {
        compile_args.add_capacity(extra_link_libs.size())
        for path in extra_link_libs.iterator() {
            compile_args.push("-l" + path)
        }
    }
    mut command = ""
    for compile_arg in compile_args.iterator() {
        command += compile_arg
        command += " "
    }
    system(command.c_string())
}

function write_to_file(data: String, output_filename: String) throws {
    mut outfile = File::open_for_writing(output_filename)
    mut bytes: [u8] = []
    for i in 0..data.length() {
        bytes.push(data.byte_at(i))
    }
    outfile.write(bytes)
}
