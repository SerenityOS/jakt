/// Expect:
/// - output: ""

// Copyright (c) 2022, JT <jt@serenityos.org>
// Copyright (c) 2022, Andreas Kling <kling@serenityos.org>
//
// SPDX-License-Identifier: BSD-2-Clause

import codegen { CodeGenerator }
import error { JaktError, print_error }
import lexer { Lexer, Token }
import parser { BinaryOperator, DefinitionLinkage, DefinitionType, ParsedCall, ParsedExpression, ParsedNamespace, Parser }
import typechecker { Typechecker }
import utility { panic, todo, Span }

function usage() {
    eprintln("usage: jakt [-l] [-p] <path>")
    return 1
}

function main(args: [String]) {
    if args.size() <= 1 {
        return usage()
    }
    mut lexer_debug = false
    mut parser_debug = false
    mut file_name: String? = None
    mut first_arg = true
    for arg in args.iterator() {
        if first_arg {
            first_arg = false
            continue
        }
        match arg {
            "-l" => {
                if lexer_debug {
                    eprintln("you can only have the -l option once")
                    return usage()
                } else {
                    lexer_debug = true
                }
            }
            "-p" => {
                if parser_debug {
                    eprintln("you can only have the -p option once")
                    return usage()
                } else {
                    parser_debug = true
                }
            }
            else => {
                if file_name.has_value() {
                    eprintln("you can only pass one file")
                    return usage()
                } else {
                    file_name = arg
                }
            }
        }
    }
    if not file_name.has_value() {
        eprintln("you must pass a source file")
        return usage()
    }

    mut file = File::open_for_reading(file_name!)
    let file_contents = file.read_all()

    mut errors: [JaktError] = []

    let tokens = Lexer::lex(input: file_contents, errors)

    if lexer_debug {
        for token in tokens.iterator() {
            println("token: {}", token)
        }
    }

    mut parser = Parser(index: 0, tokens, errors, ignore_errors: false)

    let parsed_namespace = parser.parse_namespace()

    if parser_debug {
        println("{:#}", parsed_namespace);
    }

    let checked_program = Typechecker::typecheck(parsed_namespace, errors)

    for error in errors.iterator() {
        print_error(file_name: file_name!, file_contents, error)
    }

    if not errors.is_empty() {
        return 1
    }

    let output = CodeGenerator::generate(checked_program)
    println("{}", output)
}
