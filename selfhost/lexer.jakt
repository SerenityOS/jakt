extern struct StringBuilder {
    function append(mut this, anon s: u8)
    function to_string(mut this) throws -> String
    function StringBuilder() -> StringBuilder
}

// FIXME: These should not need explicit "-> bool" return types.
function is_ascii_alpha(anon c: u8) -> bool => (c >= b'a' and c <= b'z') or (c >= b'A' and c <= b'Z')
function is_ascii_digit(anon c: u8) -> bool => (c >= b'0' and c <= b'9')
function is_ascii_hexdigit(anon c: u8) -> bool => (c >= b'0' and c <= b'9') or (c >= b'a' and c <= b'f') or (c >= b'A' and c <= b'F')
function is_ascii_alphanumeric(anon c: u8) -> bool => is_ascii_alpha(c) or is_ascii_digit(c)

enum JaktError {
    Message(message: String, span: JaktSpan)
    MessageWithHint(message: String, span: JaktSpan, hint: String, hint_span: JaktSpan)
}

function print_error(file_name: String, file_contents: [u8], error: JaktError) throws {
    match error {
        Message(message, span) => {
            display_message_with_span(MessageSeverity::Error, file_name, file_contents, message, span)
        }
        MessageWithHint(message, span, hint, hint_span) => {
            display_message_with_span(MessageSeverity::Error, file_name, file_contents, message, span)
            display_message_with_span(MessageSeverity::Hint, file_name, file_contents, message: hint, span: hint_span)
        }
    }
}

enum MessageSeverity {
    Hint
    Error
}

function severity_name(severity: MessageSeverity) throws => match severity {
    Hint => "Hint"
    Error => "Error"
}

function ansi_color_code(severity: MessageSeverity) throws => match severity {
    Hint => "94"  // Bright Blue
    Error => "31" // Red
}

function display_message_with_span(anon severity: MessageSeverity, file_name: String, file_contents: [u8], message: String, span: JaktSpan) throws {
    println("{}: {}", severity_name(severity), message)

    let line_spans = gather_line_spans(file_contents)

    mut line_index = 1uz
    let largest_line_number = line_spans.size()

    let width = format("{}", largest_line_number).length()

    while line_index < line_spans.size() {
        if span.start >= line_spans[line_index].0 and span.start <= line_spans[line_index].1 {
            let column_index = span.start - line_spans[line_index].0

            println("----- \u001b[33m{}:{}:{}\u001b[0m", file_name, line_index + 1, column_index + 1)

            if line_index > 0 {
                print_source_line(severity, file_contents, file_span: line_spans[line_index - 1], error_span: span, line_number: line_index, largest_line_number)
            }

            print_source_line(severity, file_contents, file_span: line_spans[line_index], error_span: span, line_number: line_index + 1, largest_line_number)

            for x in 0..(span.start - line_spans[line_index].0 + width + 4) {
                print(" ")
            }

            println("\u001b[{}m^- {}\u001b[0m", ansi_color_code(severity), message)

            while line_index < line_spans.size() and span.end > line_spans[line_index].0 {
                ++line_index
                if line_index >= line_spans.size() {
                    break
                }

                print_source_line(severity, file_contents, file_span: line_spans[line_index], error_span: span, line_number: line_index + 1, largest_line_number)

                break
            }
        } else {
            ++line_index
        }

    }
    println("\u001b[0m-----")
}

function print_source_line(severity: MessageSeverity, file_contents: [u8], file_span: (usize, usize), error_span: JaktSpan, line_number: usize, largest_line_number: usize) throws {
    mut index = file_span.0

    let width = format("{}", largest_line_number).length()

    print(" {} | ", line_number)

    while index <= file_span.1 {
        mut c = b' '
        if index < file_span.1 {
            c = file_contents[index]
        } else if error_span.start == error_span.end and index == error_span.start {
            c = b'_'
        }

        if (index >= error_span.start and index < error_span.end) or (error_span.start == error_span.end and index == error_span.start) {
            print("\u001b[{}m{:c}", ansi_color_code(severity), c)
        } else {
            print("\u001b[0m{:c}", c)
        }

        ++index
    }
    println("")
}

function gather_line_spans(file_contents: [u8]) throws -> [(usize, usize)] {
    mut idx = 0uz
    mut output: [(usize, usize)] = []

    mut start = idx
    while idx < file_contents.size() {
        if file_contents[idx] == b'\n' {
            output.push((start, idx))
            start = idx + 1
        }
        idx += 1
    }
    if start < idx {
        output.push((start, idx))
    }

    return output
}

//FIXME: Would be nice to name this Span and not have conflict
struct JaktSpan {
    start: usize
    end: usize
}

function merge_spans(anon start: JaktSpan, anon end: JaktSpan) -> JaktSpan => JaktSpan(start: start.start, end: end.end)
function empty_span() -> JaktSpan => JaktSpan(start: 0, end: 0)

enum Token {
    SingleQuotedString(quote: String, span: JaktSpan)
    SingleQuotedByteString(quote: String, span: JaktSpan)
    QuotedString(quote: String, span: JaktSpan)
    Number(number: i64, span: JaktSpan)
    Identifier(name: String, span: JaktSpan)
    Semicolon(JaktSpan)
    Colon(JaktSpan)
    ColonColon(JaktSpan)
    LParen(JaktSpan)
    RParen(JaktSpan)
    LCurly(JaktSpan)
    RCurly(JaktSpan)
    LSquare(JaktSpan)
    RSquare(JaktSpan)
    PercentSign(JaktSpan)
    Plus(JaktSpan)
    Minus(JaktSpan)
    Equal(JaktSpan)
    PlusEqual(JaktSpan)
    PlusPlus(JaktSpan)
    MinusEqual(JaktSpan)
    MinusMinus(JaktSpan)
    AsteriskEqual(JaktSpan)
    ForwardSlashEqual(JaktSpan)
    PercentSignEqual(JaktSpan)
    NotEqual(JaktSpan)
    DoubleEqual(JaktSpan)
    GreaterThan(JaktSpan)
    GreaterThanOrEqual(JaktSpan)
    LessThan(JaktSpan)
    LessThanOrEqual(JaktSpan)
    LeftArithmeticShift(JaktSpan)
    LeftShift(JaktSpan)
    LeftShiftEqual(JaktSpan)
    RightShift(JaktSpan)
    RightArithmeticShift(JaktSpan)
    RightShiftEqual(JaktSpan)
    Asterisk(JaktSpan)
    Ampersand(JaktSpan)
    AmpersandEqual(JaktSpan)
    Pipe(JaktSpan)
    PipeEqual(JaktSpan)
    Caret(JaktSpan)
    CaretEqual(JaktSpan)
    Dollar(JaktSpan)
    Tilde(JaktSpan)
    ForwardSlash(JaktSpan)
    ExclamationPoint(JaktSpan)
    QuestionMark(JaktSpan)
    QuestionMarkQuestionMark(JaktSpan)
    QuestionMarkQuestionMarkEqual(JaktSpan)
    Comma(JaktSpan)
    Dot(JaktSpan)
    DotDot(JaktSpan)
    Eol(JaktSpan)
    Eof(JaktSpan)
    FatArrow(JaktSpan)
    Arrow(JaktSpan)

    // Keywords
    And(JaktSpan)
    Anon(JaktSpan)
    Boxed(JaktSpan)
    Break(JaktSpan)
    Catch(JaktSpan)
    Class(JaktSpan)
    Continue(JaktSpan)
    Cpp(JaktSpan)
    Defer(JaktSpan)
    Else(JaktSpan)
    Enum(JaktSpan)
    Extern(JaktSpan)
    False(JaktSpan)
    For(JaktSpan)
    Function(JaktSpan)
    If(JaktSpan)
    In(JaktSpan)
    Is(JaktSpan)
    Let(JaktSpan)
    Loop(JaktSpan)
    Match(JaktSpan)
    Mut(JaktSpan)
    Not(JaktSpan)
    Or(JaktSpan)
    Private(JaktSpan)
    Public(JaktSpan)
    Raw(JaktSpan)
    Return(JaktSpan)
    Restricted(JaktSpan)
    Struct(JaktSpan)
    This(JaktSpan)
    Throw(JaktSpan)
    Throws(JaktSpan)
    True(JaktSpan)
    Try(JaktSpan)
    Unsafe(JaktSpan)
    Weak(JaktSpan)
    While(JaktSpan)
    Yield(JaktSpan)

    // Catch-all for failed parses
    Garbage(JaktSpan)

    public function span(this) => match this {
        SingleQuotedString(quote, span) => span
        SingleQuotedByteString(quote, span) => span
        QuotedString(quote, span) => span
        Number(number, span) => span
        Identifier(name, span) => span
        Semicolon(span) => span
        Colon(span) => span
        ColonColon(span) => span
        Cpp(span) => span
        LParen(span) => span
        RParen(span) => span
        LCurly(span) => span
        RCurly(span) => span
        LSquare(span) => span
        RSquare(span) => span
        PercentSign(span) => span
        Plus(span) => span
        Minus(span) => span
        Equal(span) => span
        PlusEqual(span) => span
        PlusPlus(span) => span
        MinusEqual(span) => span
        MinusMinus(span) => span
        Arrow(span) => span
        AsteriskEqual(span) => span
        ForwardSlashEqual(span) => span
        PercentSignEqual(span) => span
        NotEqual(span) => span
        DoubleEqual(span) => span
        GreaterThan(span) => span
        GreaterThanOrEqual(span) => span
        LessThan(span) => span
        LessThanOrEqual(span) => span
        LeftArithmeticShift(span) => span
        LeftShift(span) => span
        LeftShiftEqual(span) => span
        RightShift(span) => span
        RightArithmeticShift(span) => span
        RightShiftEqual(span) => span
        Asterisk(span) => span
        Ampersand(span) => span
        AmpersandEqual(span) => span
        Pipe(span) => span
        PipeEqual(span) => span
        Caret(span) => span
        CaretEqual(span) => span
        Dollar(span) => span
        Tilde(span) => span
        ForwardSlash(span) => span
        ExclamationPoint(span) => span
        QuestionMark(span) => span
        QuestionMarkQuestionMark(span) => span
        QuestionMarkQuestionMarkEqual(span) => span
        Comma(span) => span
        Dot(span) => span
        DotDot(span) => span
        Eol(span) => span
        Eof(span) => span
        FatArrow(span) => span
        And(span) => span
        Anon(span) => span
        Boxed(span) => span
        Break(span) => span
        Catch(span) => span
        Class(span) => span
        Continue(span) => span
        Defer(span) => span
        Else(span) => span
        Enum(span) => span
        Extern(span) => span
        False(span) => span
        For(span) => span
        Function(span) => span
        If(span) => span
        In(span) => span
        Is(span) => span
        Let(span) => span
        Loop(span) => span
        Match(span) => span
        Mut(span) => span
        Not(span) => span
        Or(span) => span
        Private(span) => span
        Public(span) => span
        Raw(span) => span
        Restricted(span) => span
        Return(span) => span
        Struct(span) => span
        This(span) => span
        Throw(span) => span
        Throws(span) => span
        True(span) => span
        Try(span) => span
        Unsafe(span) => span
        Weak(span) => span
        While(span) => span
        Yield(span) => span
        Garbage(span) => span
    }

    function from_keyword_or_identifier(string: String, span: JaktSpan) => match string {
        "and" => Token::And(span)
        "anon" => Token::Anon(span)
        "boxed" => Token::Boxed(span)
        "break" => Token::Break(span)
        "catch" => Token::Catch(span)
        "class" => Token::Class(span)
        "continue" => Token::Continue(span)
        "cpp" => Token::Cpp(span)
        "defer" => Token::Defer(span)
        "else" => Token::Else(span)
        "enum" => Token::Enum(span)
        "extern" => Token::Extern(span)
        "false" => Token::False(span)
        "for" => Token::For(span)
        "function" => Token::Function(span)
        "if" => Token::If(span)
        "in" => Token::In(span)
        "is" => Token::Is(span)
        "let" => Token::Let(span)
        "loop" => Token::Loop(span)
        "match" => Token::Match(span)
        "mut" => Token::Mut(span)
        "not" => Token::Not(span)
        "or" => Token::Or(span)
        "private" => Token::Private(span)
        "public" => Token::Public(span)
        "raw" => Token::Raw(span)
        "return" => Token::Return(span)
        "restricted" => Token::Restricted(span)
        "struct" => Token::Struct(span)
        "this" => Token::This(span)
        "throw" => Token::Throw(span)
        "throws" => Token::Throws(span)
        "true" => Token::True(span)
        "try" => Token::Try(span)
        "unsafe" => Token::Unsafe(span)
        "weak" => Token::Weak(span)
        "while" => Token::While(span)
        "yield" => Token::Yield(span)
        else => Token::Identifier(name: string, span)
    }
}

struct Lexer {
    index: usize
    input: [u8]
    errors: [JaktError]

    function error(mut this, anon message: String, anon span: JaktSpan) throws {
        .errors.push(JaktError::Message(message, span))
    }

    // Peek at next upcoming character
    function peek(this) -> u8 {
        if .eof() {
            return 0
        }
        return .input[.index]
    }

    // Peek at upcoming characters, N steps ahead in the stream
    // FIXME: This could be merged with peek() once we support default arguments
    function peek_ahead(this, anon steps: usize) -> u8 {
        if .index + steps >= .input.size() {
            return 0
        }
        return .input[.index + steps]
    }

    function eof(this) -> bool {
        return .index >= .input.size()
    }

    function substring(this, start: usize, length: usize) throws -> String {
        mut builder = StringBuilder()
        for i in start..length {
            builder.append(.input[i])
        }
        return builder.to_string()
    }

    function lex_character_constant_or_name(mut this) throws -> Token {
        if .peek_ahead(1) != b'\'' {
            return .lex_number_or_name()
        }

        let is_byte = .peek() == b'b'
        if is_byte {
            .index++
        }

        let start = .index
        .index++

        mut escaped = false;

        while not .eof() and (escaped or .peek() != b'\'') {
            if not escaped and .peek() == b'\\' {
                escaped = true
            } else {
                escaped = false
            }

            .index++
        }

        if .eof() or .peek() != b'\'' {
            .error("expected single quote", JaktSpan(start, end: start))
        }

        // Everything but the quotes
        mut builder = StringBuilder()
        builder.append(.input[start + 1])
        let str = builder.to_string()

        .index++

        let end = .index

        if is_byte {
            return Token::SingleQuotedByteString(quote: str, span: JaktSpan(start, end))
        }
        return Token::SingleQuotedString(quote: str, span: JaktSpan(start, end))
    }

    function lex_number_or_name(mut this) throws -> Token {
        let start = .index

        if .eof() {
            .error("unexpected eof", JaktSpan(start, end: start))
            return Token::Garbage(JaktSpan(start, end: start))
        }
        if is_ascii_digit(.peek()) {
            mut total = 0i64

            while is_ascii_digit(.peek()) {
                let value = .input[.index]
                ++.index
                let digit: i64 = as_saturated(value - b'0')
                total = total * 10 + digit
            }
            let end = .index
            return Token::Number(number: total, span: JaktSpan(start, end))
        } else if is_ascii_alpha(.peek()) or .peek() == b'_' {
            mut string_builder = StringBuilder()

            while is_ascii_alphanumeric(.peek()) or .peek() == b'_' {
                let value = .input[.index]
                ++.index
                string_builder.append(value)
            }
            let end = .index
            let span = JaktSpan(start, end)
            let string = string_builder.to_string()

            return Token::from_keyword_or_identifier(string, span)
        }

        let unknown_char = .input[.index]
        let end = ++.index
        .error(format("unknown character: {:c}", unknown_char), JaktSpan(start, end))
        return Token::Garbage(JaktSpan(start, end))
    }

    function lex_quoted_string(mut this, delimiter: u8) throws -> Token {
        let start = .index

        ++.index

        if .eof() {
            .error("unexpected eof", JaktSpan(start, end: start))
            return Token::Garbage(JaktSpan(start, end: start))
        }

        mut escaped = false
        while not .eof() and (escaped or .peek() != delimiter) {
            if not escaped and .peek() == b'\\' {
                escaped = true
            } else {
                escaped = false
            }
            ++.index
        }

        let end = .index

        let str = .substring(start: start + 1, length: .index)

        .index++

        if delimiter == b'\'' {
            return Token::SingleQuotedString(quote: str, span: JaktSpan(start, end))
        }

        return Token::QuotedString(quote: str, span: JaktSpan(start, end))
    }

    function lex_plus(mut this) -> Token {
        let start = .index++
        return match .peek() {
            b'=' => Token::PlusEqual(JaktSpan(start, end: ++.index))
            b'+' => Token::PlusPlus(JaktSpan(start, end: ++.index))
            else => Token::Plus(JaktSpan(start: .index - 1, end: .index))
        }
    }

    function lex_minus(mut this) -> Token {
        let start = .index++
        return match .peek() {
            b'=' => Token::MinusEqual(JaktSpan(start, end: ++.index))
            b'-' => Token::MinusMinus(JaktSpan(start, end: ++.index))
            b'>' => Token::Arrow(JaktSpan(start, end: ++.index))
            else => Token::Minus(JaktSpan(start: .index - 1, end: .index))
        }
    }

    function lex_asterisk(mut this) -> Token {
        let start = .index++
        return match .peek() {
            b'=' => Token::AsteriskEqual(JaktSpan(start, end: ++.index))
            else => Token::Asterisk(JaktSpan(start: .index - 1, end: .index))
        }
    }

    function lex_forward_slash(mut this) throws -> Token {
        let start = .index++
        if .peek() == b'=' {
            return Token::ForwardSlashEqual(JaktSpan(start, end: ++.index))
        }
        if .peek() != b'/' {
            return Token::ForwardSlash(JaktSpan(start, end: .index))
        }
        // We're in a comment, swallow to end of line.
        while not .eof() {
            let c = .peek()
            .index++
            if c == b'\n' {
                break
            }
        }
        return .next() ?? Token::Eof(JaktSpan(start: .index, end: .index))
    }

    function lex_caret(mut this) -> Token {
        let start = .index++
        return match .peek() {
            b'=' => Token::CaretEqual(JaktSpan(start, end: ++.index))
            else => Token::Caret(JaktSpan(start: .index - 1, end: .index))
        }
    }

    function lex_pipe(mut this) -> Token {
        let start = .index++
        return match .peek() {
            b'=' => Token::PipeEqual(JaktSpan(start, end: ++.index))
            else => Token::Pipe(JaktSpan(start: .index - 1, end: .index))
        }
    }

    function lex_percent_sign(mut this) -> Token {
        let start = .index++
        return match .peek() {
            b'=' => Token::PercentSignEqual(JaktSpan(start, end: ++.index))
            else => Token::PercentSign(JaktSpan(start: .index - 1, end: .index))
        }
    }

    function lex_exclamation_point(mut this) -> Token {
        let start = .index++
        return match .peek() {
            b'=' => Token::NotEqual(JaktSpan(start, end: ++.index))
            else => Token::ExclamationPoint(JaktSpan(start: .index - 1, end: .index))
        }
    }

    function lex_ampersand(mut this) -> Token {
        let start = .index++
        return match .peek() {
            b'=' => Token::AmpersandEqual(JaktSpan(start, end: ++.index))
            else => Token::Ampersand(JaktSpan(start: .index - 1, end: .index))
        }
    }

    function lex_less_than(mut this) -> Token {
        let start = .index++
        return match .peek() {
            b'=' => Token::LessThanOrEqual(JaktSpan(start, end: ++.index))
            b'<' => Token::LeftShift(JaktSpan(start, end: ++.index))
            else => Token::LessThan(JaktSpan(start: .index - 1, end: .index))
        }
    }

    function lex_greater_than(mut this) -> Token {
        let start = .index++
        return match .peek() {
            b'=' => Token::GreaterThanOrEqual(JaktSpan(start, end: ++.index))
            b'>' => Token::RightShift(JaktSpan(start, end: ++.index))
            else => Token::GreaterThan(JaktSpan(start: .index - 1, end: .index))
        }
    }

    function lex_dot(mut this) -> Token {
        let start = .index++
        return match .peek() {
            b'.' => Token::DotDot(JaktSpan(start, end: ++.index))
            else => Token::Dot(JaktSpan(start: .index - 1, end: .index))
        }
    }

    function lex_colon(mut this) -> Token {
        let start = .index++
        return match .peek() {
            b':' => Token::ColonColon(JaktSpan(start, end: ++.index))
            else => Token::Colon(JaktSpan(start: .index - 1, end: .index))
        }
    }

    function lex_question_mark(mut this) -> Token {
        let start = .index++
        return match .peek() {
            b'?' => {
                .index++
                yield match .peek() {
                    b'=' => Token::QuestionMarkQuestionMarkEqual(JaktSpan(start, end: ++.index))
                    else => Token::QuestionMarkQuestionMark(JaktSpan(start, end: .index))
                }
            }
            else => Token::QuestionMark(JaktSpan(start: .index - 1, end: .index))
        }
    }

    function lex_equals(mut this) -> Token {
        let start = .index++
        return match .peek() {
            b'=' => Token::DoubleEqual(JaktSpan(start, end: ++.index))
            b'>' => Token::FatArrow(JaktSpan(start, end: ++.index))
            else => Token::Equal(JaktSpan(start: .index - 1, end: .index))
        }
    }

    function next(mut this) throws -> Token? {
        if .index == .input.size() {
            ++.index
            return Token::Eof(JaktSpan(start: .index - 1, end: .index - 1))
        }
        if .eof() {
            return None
        }
        loop {
            let ch = .peek()
            if ch == b' ' or ch == b'\t' or ch == b'\r' {
                .index++
            } else {
                break
            }
        }

        let start = .index

        return match .input[.index] {
            b'(' => Token::LParen(JaktSpan(start, end: ++.index))
            b')' => Token::RParen(JaktSpan(start, end: ++.index))
            b'[' => Token::LSquare(JaktSpan(start, end: ++.index))
            b']' => Token::RSquare(JaktSpan(start, end: ++.index))
            b'{' => Token::LCurly(JaktSpan(start, end: ++.index))
            b'}' => Token::RCurly(JaktSpan(start, end: ++.index))
            b'<' => .lex_less_than()
            b'>' => .lex_greater_than()
            b'.' => .lex_dot()
            b',' => Token::Comma(JaktSpan(start, end: ++.index))
            b'~' => Token::Tilde(JaktSpan(start, end: ++.index))
            b';' => Token::Semicolon(JaktSpan(start, end: ++.index))
            b':' => .lex_colon()
            b'?' => .lex_question_mark()
            b'+' => .lex_plus()
            b'-' => .lex_minus()
            b'*' => .lex_asterisk()
            b'/' => .lex_forward_slash()
            b'^' => .lex_caret()
            b'|' => .lex_pipe()
            b'%' => .lex_percent_sign()
            b'!' => .lex_exclamation_point()
            b'&' => .lex_ampersand()
            b'$' => Token::Dollar(JaktSpan(start, end: ++.index))
            b'=' => .lex_equals()
            b'\n' => Token::Eol(JaktSpan(start, end: ++.index))
            b'\'' => .lex_quoted_string(delimiter: b'\'')
            b'\"' => .lex_quoted_string(delimiter: b'"')
            b'b' => .lex_character_constant_or_name()
            b'c' => .lex_character_constant_or_name()
            else => .lex_number_or_name()
        }
    }
}
