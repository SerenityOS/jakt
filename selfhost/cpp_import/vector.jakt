import extern "AK/Vector.h" {
    namespace AK {
        extern struct Vector<T> {
            fn Vector<S>() -> Vector<S>
            [[name=try_append]]
            fn append(mut this, value: T) throws
            fn at(this, anon index: usize) -> T
            fn size(this) -> usize
            fn contains_slow(this, anon value: T) -> bool
        }
    }
}

use AK::Vector

struct VectorIterator<T> implements(Iterable<T>) {
    vector: Vector<T>
    index: usize

    fn next(mut this) -> T? {
        if .index >= .vector.size() {
            let v: T? = None
            return v
        }

        let value = .vector.at(.index)
        .index += 1
        return Some(value)
    }
}

type Vector implements(IntoIterator<T>) {
    [[inline()]]
    fn iterator(this) -> VectorIterator<T> {
        return VectorIterator(vector: this, index: 0)
    }
}
