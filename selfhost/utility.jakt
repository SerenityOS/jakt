// Copyright (c) 2022, JT <jt@serenityos.org>
// Copyright (c) 2022, Andreas Kling <kling@serenityos.org>
//
// SPDX-License-Identifier: BSD-2-Clause

function panic(anon message: String) -> void {
    eprintln("internal error: {}", message)
    abort()
}

function todo(anon message: String) {
    eprintln("TODO: {}", message)
    abort()
}

function join(anon strings: [String], separator: String) -> String {
    mut output = ""
    
    mut i = 0uz
    for s in strings.iterator() {
        output += s
        if i < strings.size() - 1 {
            output += separator
        }
        i++
    }

    return output
}

function prepend_to_each(anon strings: [String], prefix: String) throws -> [String] {
    mut output: [String] = []
    for str in strings.iterator() {
        output.push(prefix + str)
    }
    return output
}

function append_to_each(anon strings: [String], suffix: String) throws -> [String] {
    mut output: [String] = []
    for str in strings.iterator() {
        output.push(str + suffix)
    }
    return output
}

struct Span {
    start: usize
    end: usize
}

// FIXME: Use jakt stdlib if available
class FilePath {
    public path: String

    public function make(anon filepath: String) throws -> FilePath {
        return FilePath(path: filepath)
    }

    public function dirname(this) throws -> String {
        let parts = .split()
        return parts.0
    }

    public function basename(this) throws -> String {
        let parts = .split()
        return parts.1
    }

    public function ext(this) throws -> String {
        mut i = .path.length() -1
	    while (i >= 0 and .path.byte_at(i) != b'/')  {
		    if .path.byte_at(i) == b'.' {
			    return .path.substring(start: (i + 1), length: (.path.length() - 1 - i))
		    }
		    i--
	    }
	    return ""
    }

    private function split(this) throws -> (String, String) {
        let len = .path.length()
        let pos = FilePath::last_slash(.path)
        let dir = .path.substring(start: 0, length: (pos + 1)) 
        let base = .path.substring(start: (pos + 1), length: (len - pos - 1))
        return (dir, base)
    }


    private function last_slash(anon path: String) -> usize {
	    mut i = path.length() - 1
	    while (i >= 1 and path.byte_at(i) != b'/') {
		    i--
	    }
	    return i
    }
}
