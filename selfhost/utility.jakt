// Copyright (c) 2022, JT <jt@serenityos.org>
// Copyright (c) 2022, Andreas Kling <kling@serenityos.org>
//
// SPDX-License-Identifier: BSD-2-Clause

import jakt::platform::utility { null, allocate }

fn panic(anon message: String) -> never {
    eprintln("internal error: {}", message)
    abort()
}

fn todo(anon message: String) -> never {
    eprintln("TODO: {}", message)
    abort()
}

fn add_arrays<T>(anon a: [T], anon b: [T]) -> [T] {
    mut result: [T] = []

    for x in a {
        result.push(x)
    }

    for x in b {
        result.push(x)
    }

    return result
}

fn to_string(anon bytes: [u8]) throws -> String {
    mut builder = StringBuilder::create()
    for byte in bytes {
        builder.append(byte)
    }
    return builder.to_string()
}

fn join(anon strings: [String], separator: String) throws -> String {
    mut output = ""

    mut i = 0uz
    for s in strings {
        output += s
        if i < strings.size() - 1 {
            output += separator
        }
        i++
    }

    return output
}

fn map<T, U>(input: [T], mapper: &fn(item: T) throws -> U) throws -> [U] {
    mut us: [U] = []
    for t in input {
        us.push(mapper(item: t))
    }
    return us
}

fn prepend_to_each(anon strings: [String], prefix: String) throws -> [String] {
    mut output: [String] = []
    for str in strings {
        output.push(prefix + str)
    }
    return output
}

fn append_to_each(anon strings: [String], suffix: String) throws -> [String] {
    mut output: [String] = []
    for str in strings {
        output.push(str + suffix)
    }
    return output
}

fn write_to_file(data: String, output_filename: String) throws {
    mut outfile = File::open_for_writing(output_filename)
    mut bytes: [u8] = []
    for i in 0..data.length() {
        bytes.push(data.byte_at(i))
    }
    outfile.write(bytes)
}

struct Span {
    file_id: FileId
    start: usize
    end: usize

    fn first(anon a: Span, anon b: Span) -> Span {
        if a.start < b.start {
            return a
        }
        if b.start < a.start {
            return b
        }
        if a.end < b.end {
            return a
        }
        return b
    }

    fn last(anon a: Span, anon b: Span) -> Span {
        if a.start > b.start {
            return a
        }
        if b.start > a.start {
            return b
        }
        if a.end > b.end {
            return a
        }
        return b
    }

    fn contains(this, span: Span) -> bool {
        return .file_id.equals(span.file_id) and span.start >= .start and span.end <= .end
    }

    fn is_in_offset_range(this, start: usize, end: usize) -> bool => start <= .start and end >= .end
}

struct FileId {
    id: usize

    fn equals(this, anon rhs: FileId) -> bool {
        return .id == rhs.id
    }
}

fn escape_for_quotes(anon s: String) throws -> String {
    mut builder = StringBuilder::create()
    for cp in s.code_points() {
        match cp {
            b'"' as! u32 =>  { builder.append_string("\\\"") }
            b'\\' as! u32 => { builder.append_string("\\\\") }
            b'\n' as! u32 => { builder.append_string("\\n") }
            else =>  { builder.append_code_point(cp) }
        }
    }

    return builder.to_string()
}

fn interpret_escapes(anon s: String) throws -> String {
    mut builder = StringBuilder::create()
    mut in_escape = false
    for cp in s.code_points() {
        match cp {
            b'\\' as! u32 => {
                if in_escape {
                    builder.append(b'\\')
                    in_escape = false
                } else {
                    in_escape = true
                }
            }
            b'"' as! u32 | b'\'' as! u32 => {
                builder.append_code_point(cp)
                in_escape = false
            }
            b'n' as! u32 => {
                if in_escape {
                    builder.append(b'\n')
                    in_escape = false
                } else {
                    builder.append_code_point(cp)
                }
            }
            else => {
                builder.append_code_point(cp)
                in_escape = false
            }
        }
    }

    return builder.to_string()
}

fn is_ascii_alpha(anon c: u8) => (c >= b'a' and c <= b'z') or (c >= b'A' and c <= b'Z')
fn is_ascii_digit(anon c: u8) => (c >= b'0' and c <= b'9')
fn is_ascii_hexdigit(anon c: u8) => (c >= b'0' and c <= b'9') or (c >= b'a' and c <= b'f') or (c >= b'A' and c <= b'F')
fn is_ascii_octdigit(anon c: u8) => (c >= b'0' and c <= b'7')
fn is_ascii_binary(anon c: u8) => (c == b'0' or c == b'1')
fn is_ascii_alphanumeric(anon c: u8) -> bool => is_ascii_alpha(c) or is_ascii_digit(c)

fn is_whitespace(anon byte: u8) => byte == b' ' or byte == b'\t' or byte == b'\r'

enum IterationDecision<T> {
    Break(value: T)
    Continue
}

import extern "AK/Queue.h" {
    namespace AK {
        extern struct Queue<T> {
            fn Queue<T>() -> Queue<T>
            fn size(this) -> usize
            fn is_empty(this) -> bool
            fn enqueue(mut this, anon value: T)
            fn dequeue(mut this) -> T
            fn clear(mut this)
        }
    }
}

use AK::Queue
