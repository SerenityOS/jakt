// Copyright (c) 2022, JT <jt@serenityos.org>
// Copyright (c) 2022, Andreas Kling <kling@serenityos.org>
//
// SPDX-License-Identifier: BSD-2-Clause

function panic(anon message: String) -> never {
    eprintln("internal error: {}", message)
    abort()
}

function todo(anon message: String) {
    eprintln("TODO: {}", message)
    abort()
}

function add_arrays<T>(anon a: [T], anon b: [T]) throws -> [T] {
    mut result: [T] = []

    for x in a {
        result.push(x)
    }

    for x in b {
        result.push(x)
    }

    return result
}

function join(anon strings: [String], separator: String) -> String {
    mut output = ""

    mut i = 0uz
    for s in strings {
        output += s
        if i < strings.size() - 1 {
            output += separator
        }
        i++
    }

    return output
}

function prepend_to_each(anon strings: [String], prefix: String) throws -> [String] {
    mut output: [String] = []
    for str in strings {
        output.push(prefix + str)
    }
    return output
}

function append_to_each(anon strings: [String], suffix: String) throws -> [String] {
    mut output: [String] = []
    for str in strings {
        output.push(str + suffix)
    }
    return output
}

struct Span {
    file_id: FileId
    start: usize
    end: usize

    function contains(this, span: Span) -> bool {
        return .file_id.equals(span.file_id) and span.start >= .start and span.end <= .end
    }

    function is_in_offset_range(this, start: usize, end: usize) => start <= .start and end >= .end
}

struct FileId {
    id: usize

    function equals(this, anon rhs: FileId) -> bool {
        return .id == rhs.id
    }
}

function escape_for_quotes(anon s: String) throws -> String {
    mut builder = StringBuilder::create()
    for i in 0..s.length() {
        let c = s.byte_at(i)
        match c {
            b'"' =>  { builder.append_string("\\\"") }
            b'\\' => { builder.append_string("\\\\") }
            b'\n' => { builder.append_string("\\n") }
            else =>  { builder.append(c) }
        }
    }

    return builder.to_string()
}

function interpret_escapes(anon s: String) throws -> String {
    mut builder = StringBuilder::create()
    mut in_escape = false
    for i in 0..s.length() {
        let c = s.byte_at(i)
        match c {
            b'\\' => {
                if in_escape {
                    builder.append(b'\\')
                    in_escape = false
                } else {
                    in_escape = true
                }
            }
            b'"' | b'\'' => {
                if in_escape {
                    builder.append(c)
                    in_escape = false
                }
            }
            b'n' => {
                if in_escape {
                    builder.append(b'\n')
                    in_escape = false
                } else {
                    builder.append(c)
                }
            }
            else => {
                builder.append(c)
                in_escape = false
            }
        }
    }

    return builder.to_string()
}

function null<T>() -> raw T {
    unsafe {
        cpp {
            "return nullptr;"
        }
    }

    abort()
}

function allocate<T>(count: usize) -> raw T {
    unsafe {
        cpp {
            "return static_cast<T*>(malloc(count * sizeof(T)));"
        }
    }

    abort()
}

function is_ascii_alpha(anon c: u8) => (c >= b'a' and c <= b'z') or (c >= b'A' and c <= b'Z')
function is_ascii_digit(anon c: u8) => (c >= b'0' and c <= b'9')
function is_ascii_hexdigit(anon c: u8) => (c >= b'0' and c <= b'9') or (c >= b'a' and c <= b'f') or (c >= b'A' and c <= b'F')
function is_ascii_octdigit(anon c: u8) => (c >= b'0' and c <= b'7')
function is_ascii_binary(anon c: u8) => (c == b'0' or c == b'1')
function is_ascii_alphanumeric(anon c: u8) -> bool => is_ascii_alpha(c) or is_ascii_digit(c)

function is_whitespace(anon byte: u8) => byte == b' ' or byte == b'\t' or byte == b'\r'
